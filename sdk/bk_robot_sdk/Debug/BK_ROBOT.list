
BK_ROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000988c  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08009a70  08009a70  0000aa70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c70  08009c70  0000b034  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009c70  08009c70  0000ac70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c78  08009c78  0000b034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c78  08009c78  0000ac78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c7c  08009c7c  0000ac7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08009c80  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  20000034  08009cb4  0000b034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08009cb4  0000b440  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001984d  00000000  00000000  0000b05d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004de8  00000000  00000000  000248aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c8  00000000  00000000  00029698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011d0  00000000  00000000  0002ad60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e3e9  00000000  00000000  0002bf30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020a16  00000000  00000000  0004a319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4012  00000000  00000000  0006ad2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ed41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a14  00000000  00000000  0010ed84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00114798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000034 	.word	0x20000034
 8000200:	00000000 	.word	0x00000000
 8000204:	08009a58 	.word	0x08009a58

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000038 	.word	0x20000038
 8000220:	08009a58 	.word	0x08009a58

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000244:	4b4a      	ldr	r3, [pc, #296]	@ (8000370 <MX_ADC1_Init+0x13c>)
 8000246:	4a4b      	ldr	r2, [pc, #300]	@ (8000374 <MX_ADC1_Init+0x140>)
 8000248:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800024a:	4b49      	ldr	r3, [pc, #292]	@ (8000370 <MX_ADC1_Init+0x13c>)
 800024c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000250:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000252:	4b47      	ldr	r3, [pc, #284]	@ (8000370 <MX_ADC1_Init+0x13c>)
 8000254:	2200      	movs	r2, #0
 8000256:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000258:	4b45      	ldr	r3, [pc, #276]	@ (8000370 <MX_ADC1_Init+0x13c>)
 800025a:	2200      	movs	r2, #0
 800025c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800025e:	4b44      	ldr	r3, [pc, #272]	@ (8000370 <MX_ADC1_Init+0x13c>)
 8000260:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000264:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000266:	4b42      	ldr	r3, [pc, #264]	@ (8000370 <MX_ADC1_Init+0x13c>)
 8000268:	2200      	movs	r2, #0
 800026a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 800026c:	4b40      	ldr	r3, [pc, #256]	@ (8000370 <MX_ADC1_Init+0x13c>)
 800026e:	2208      	movs	r2, #8
 8000270:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000272:	483f      	ldr	r0, [pc, #252]	@ (8000370 <MX_ADC1_Init+0x13c>)
 8000274:	f003 fe50 	bl	8003f18 <HAL_ADC_Init>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800027e:	f001 fa92 	bl	80017a6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000282:	2308      	movs	r3, #8
 8000284:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000286:	2301      	movs	r3, #1
 8000288:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800028a:	2303      	movs	r3, #3
 800028c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	4619      	mov	r1, r3
 8000292:	4837      	ldr	r0, [pc, #220]	@ (8000370 <MX_ADC1_Init+0x13c>)
 8000294:	f004 f824 	bl	80042e0 <HAL_ADC_ConfigChannel>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800029e:	f001 fa82 	bl	80017a6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80002a2:	2309      	movs	r3, #9
 80002a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002a6:	2302      	movs	r3, #2
 80002a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4619      	mov	r1, r3
 80002ae:	4830      	ldr	r0, [pc, #192]	@ (8000370 <MX_ADC1_Init+0x13c>)
 80002b0:	f004 f816 	bl	80042e0 <HAL_ADC_ConfigChannel>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80002ba:	f001 fa74 	bl	80017a6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80002be:	230a      	movs	r3, #10
 80002c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002c2:	2303      	movs	r3, #3
 80002c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	4619      	mov	r1, r3
 80002ca:	4829      	ldr	r0, [pc, #164]	@ (8000370 <MX_ADC1_Init+0x13c>)
 80002cc:	f004 f808 	bl	80042e0 <HAL_ADC_ConfigChannel>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80002d6:	f001 fa66 	bl	80017a6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80002da:	230b      	movs	r3, #11
 80002dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80002de:	2304      	movs	r3, #4
 80002e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	4619      	mov	r1, r3
 80002e6:	4822      	ldr	r0, [pc, #136]	@ (8000370 <MX_ADC1_Init+0x13c>)
 80002e8:	f003 fffa 	bl	80042e0 <HAL_ADC_ConfigChannel>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80002f2:	f001 fa58 	bl	80017a6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80002f6:	230c      	movs	r3, #12
 80002f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80002fa:	2305      	movs	r3, #5
 80002fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	4619      	mov	r1, r3
 8000302:	481b      	ldr	r0, [pc, #108]	@ (8000370 <MX_ADC1_Init+0x13c>)
 8000304:	f003 ffec 	bl	80042e0 <HAL_ADC_ConfigChannel>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800030e:	f001 fa4a 	bl	80017a6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000312:	230d      	movs	r3, #13
 8000314:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000316:	2306      	movs	r3, #6
 8000318:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	4619      	mov	r1, r3
 800031e:	4814      	ldr	r0, [pc, #80]	@ (8000370 <MX_ADC1_Init+0x13c>)
 8000320:	f003 ffde 	bl	80042e0 <HAL_ADC_ConfigChannel>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800032a:	f001 fa3c 	bl	80017a6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800032e:	230e      	movs	r3, #14
 8000330:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000332:	2307      	movs	r3, #7
 8000334:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	4619      	mov	r1, r3
 800033a:	480d      	ldr	r0, [pc, #52]	@ (8000370 <MX_ADC1_Init+0x13c>)
 800033c:	f003 ffd0 	bl	80042e0 <HAL_ADC_ConfigChannel>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000346:	f001 fa2e 	bl	80017a6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800034a:	230f      	movs	r3, #15
 800034c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800034e:	2308      	movs	r3, #8
 8000350:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4619      	mov	r1, r3
 8000356:	4806      	ldr	r0, [pc, #24]	@ (8000370 <MX_ADC1_Init+0x13c>)
 8000358:	f003 ffc2 	bl	80042e0 <HAL_ADC_ConfigChannel>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000362:	f001 fa20 	bl	80017a6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000366:	bf00      	nop
 8000368:	3710      	adds	r7, #16
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000050 	.word	0x20000050
 8000374:	40012400 	.word	0x40012400

08000378 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b08a      	sub	sp, #40	@ 0x28
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000380:	f107 0318 	add.w	r3, r7, #24
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	605a      	str	r2, [r3, #4]
 800038a:	609a      	str	r2, [r3, #8]
 800038c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4a33      	ldr	r2, [pc, #204]	@ (8000460 <HAL_ADC_MspInit+0xe8>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d15f      	bne.n	8000458 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000398:	4b32      	ldr	r3, [pc, #200]	@ (8000464 <HAL_ADC_MspInit+0xec>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a31      	ldr	r2, [pc, #196]	@ (8000464 <HAL_ADC_MspInit+0xec>)
 800039e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b2f      	ldr	r3, [pc, #188]	@ (8000464 <HAL_ADC_MspInit+0xec>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80003ac:	617b      	str	r3, [r7, #20]
 80003ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000464 <HAL_ADC_MspInit+0xec>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a2b      	ldr	r2, [pc, #172]	@ (8000464 <HAL_ADC_MspInit+0xec>)
 80003b6:	f043 0310 	orr.w	r3, r3, #16
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b29      	ldr	r3, [pc, #164]	@ (8000464 <HAL_ADC_MspInit+0xec>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0310 	and.w	r3, r3, #16
 80003c4:	613b      	str	r3, [r7, #16]
 80003c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c8:	4b26      	ldr	r3, [pc, #152]	@ (8000464 <HAL_ADC_MspInit+0xec>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a25      	ldr	r2, [pc, #148]	@ (8000464 <HAL_ADC_MspInit+0xec>)
 80003ce:	f043 0308 	orr.w	r3, r3, #8
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b23      	ldr	r3, [pc, #140]	@ (8000464 <HAL_ADC_MspInit+0xec>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0308 	and.w	r3, r3, #8
 80003dc:	60fb      	str	r3, [r7, #12]
 80003de:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80003e0:	233f      	movs	r3, #63	@ 0x3f
 80003e2:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003e4:	2303      	movs	r3, #3
 80003e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003e8:	f107 0318 	add.w	r3, r7, #24
 80003ec:	4619      	mov	r1, r3
 80003ee:	481e      	ldr	r0, [pc, #120]	@ (8000468 <HAL_ADC_MspInit+0xf0>)
 80003f0:	f004 ff02 	bl	80051f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80003f4:	2303      	movs	r3, #3
 80003f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003f8:	2303      	movs	r3, #3
 80003fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003fc:	f107 0318 	add.w	r3, r7, #24
 8000400:	4619      	mov	r1, r3
 8000402:	481a      	ldr	r0, [pc, #104]	@ (800046c <HAL_ADC_MspInit+0xf4>)
 8000404:	f004 fef8 	bl	80051f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000408:	4b19      	ldr	r3, [pc, #100]	@ (8000470 <HAL_ADC_MspInit+0xf8>)
 800040a:	4a1a      	ldr	r2, [pc, #104]	@ (8000474 <HAL_ADC_MspInit+0xfc>)
 800040c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800040e:	4b18      	ldr	r3, [pc, #96]	@ (8000470 <HAL_ADC_MspInit+0xf8>)
 8000410:	2200      	movs	r2, #0
 8000412:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000414:	4b16      	ldr	r3, [pc, #88]	@ (8000470 <HAL_ADC_MspInit+0xf8>)
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800041a:	4b15      	ldr	r3, [pc, #84]	@ (8000470 <HAL_ADC_MspInit+0xf8>)
 800041c:	2280      	movs	r2, #128	@ 0x80
 800041e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000420:	4b13      	ldr	r3, [pc, #76]	@ (8000470 <HAL_ADC_MspInit+0xf8>)
 8000422:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000426:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000428:	4b11      	ldr	r3, [pc, #68]	@ (8000470 <HAL_ADC_MspInit+0xf8>)
 800042a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800042e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000430:	4b0f      	ldr	r3, [pc, #60]	@ (8000470 <HAL_ADC_MspInit+0xf8>)
 8000432:	2200      	movs	r2, #0
 8000434:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000436:	4b0e      	ldr	r3, [pc, #56]	@ (8000470 <HAL_ADC_MspInit+0xf8>)
 8000438:	2200      	movs	r2, #0
 800043a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800043c:	480c      	ldr	r0, [pc, #48]	@ (8000470 <HAL_ADC_MspInit+0xf8>)
 800043e:	f004 fa57 	bl	80048f0 <HAL_DMA_Init>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000448:	f001 f9ad 	bl	80017a6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4a08      	ldr	r2, [pc, #32]	@ (8000470 <HAL_ADC_MspInit+0xf8>)
 8000450:	621a      	str	r2, [r3, #32]
 8000452:	4a07      	ldr	r2, [pc, #28]	@ (8000470 <HAL_ADC_MspInit+0xf8>)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000458:	bf00      	nop
 800045a:	3728      	adds	r7, #40	@ 0x28
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40012400 	.word	0x40012400
 8000464:	40021000 	.word	0x40021000
 8000468:	40011000 	.word	0x40011000
 800046c:	40010c00 	.word	0x40010c00
 8000470:	20000080 	.word	0x20000080
 8000474:	40020008 	.word	0x40020008

08000478 <initButton>:
	/**
	 * @brief  	Init matrix button
	 * @note  	Call once at the beginning
	 */
	enum StatusCode initButton()
	{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(INPUT_LOAD_GPIO_Port, INPUT_LOAD_Pin, 1);
 800047c:	2201      	movs	r2, #1
 800047e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000482:	480e      	ldr	r0, [pc, #56]	@ (80004bc <initButton+0x44>)
 8000484:	f005 f863 	bl	800554e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUT_LOAD_GPIO_Port, INPUT_LOAD_Pin, 0);
 8000488:	2200      	movs	r2, #0
 800048a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800048e:	480b      	ldr	r0, [pc, #44]	@ (80004bc <initButton+0x44>)
 8000490:	f005 f85d 	bl	800554e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUT_LOAD_GPIO_Port, INPUT_LOAD_Pin, 1);
 8000494:	2201      	movs	r2, #1
 8000496:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800049a:	4808      	ldr	r0, [pc, #32]	@ (80004bc <initButton+0x44>)
 800049c:	f005 f857 	bl	800554e <HAL_GPIO_WritePin>

		if (HAL_SPI_Receive(&hspi1, (void *)&button_buffer, 1, 10) == HAL_OK)
 80004a0:	230a      	movs	r3, #10
 80004a2:	2201      	movs	r2, #1
 80004a4:	4906      	ldr	r1, [pc, #24]	@ (80004c0 <initButton+0x48>)
 80004a6:	4807      	ldr	r0, [pc, #28]	@ (80004c4 <initButton+0x4c>)
 80004a8:	f006 fe34 	bl	8007114 <HAL_SPI_Receive>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d101      	bne.n	80004b6 <initButton+0x3e>
		{
			return STATUS_OK;
 80004b2:	2301      	movs	r3, #1
 80004b4:	e000      	b.n	80004b8 <initButton+0x40>
		}
		return STATUS_ERROR;
 80004b6:	2300      	movs	r3, #0
	}
 80004b8:	4618      	mov	r0, r3
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40010800 	.word	0x40010800
 80004c0:	200000c8 	.word	0x200000c8
 80004c4:	200001d8 	.word	0x200001d8

080004c8 <scanButton>:
	/**
	 * @brief  	Scan matrix button
	 * @note  	Call every 50ms (in interrupt or timer) to update button state
	 */
	enum StatusCode scanButton()
	{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(INPUT_LOAD_GPIO_Port, INPUT_LOAD_Pin, 0);
 80004ce:	2200      	movs	r2, #0
 80004d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004d4:	481b      	ldr	r0, [pc, #108]	@ (8000544 <scanButton+0x7c>)
 80004d6:	f005 f83a 	bl	800554e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INPUT_LOAD_GPIO_Port, INPUT_LOAD_Pin, 1);
 80004da:	2201      	movs	r2, #1
 80004dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004e0:	4818      	ldr	r0, [pc, #96]	@ (8000544 <scanButton+0x7c>)
 80004e2:	f005 f834 	bl	800554e <HAL_GPIO_WritePin>

		if (HAL_SPI_Receive(&hspi1, (void *)&button_buffer, 1, 10) != HAL_OK)
 80004e6:	230a      	movs	r3, #10
 80004e8:	2201      	movs	r2, #1
 80004ea:	4917      	ldr	r1, [pc, #92]	@ (8000548 <scanButton+0x80>)
 80004ec:	4817      	ldr	r0, [pc, #92]	@ (800054c <scanButton+0x84>)
 80004ee:	f006 fe11 	bl	8007114 <HAL_SPI_Receive>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <scanButton+0x34>
		{
			return STATUS_ERROR;
 80004f8:	2300      	movs	r3, #0
 80004fa:	e01f      	b.n	800053c <scanButton+0x74>
		}

		for (uint8_t i = 0; i < NUMBER_OF_BUTTON; ++i)
 80004fc:	2300      	movs	r3, #0
 80004fe:	71fb      	strb	r3, [r7, #7]
 8000500:	e018      	b.n	8000534 <scanButton+0x6c>
		{
			if (button_buffer & (0b00000001 << i))
 8000502:	4b11      	ldr	r3, [pc, #68]	@ (8000548 <scanButton+0x80>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	461a      	mov	r2, r3
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	fa42 f303 	asr.w	r3, r2, r3
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	2b00      	cmp	r3, #0
 8000514:	d004      	beq.n	8000520 <scanButton+0x58>
			{
				button_counter[i] = 0;
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	4a0d      	ldr	r2, [pc, #52]	@ (8000550 <scanButton+0x88>)
 800051a:	2100      	movs	r1, #0
 800051c:	54d1      	strb	r1, [r2, r3]
 800051e:	e006      	b.n	800052e <scanButton+0x66>
			}
			else
				++button_counter[i];
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	4a0b      	ldr	r2, [pc, #44]	@ (8000550 <scanButton+0x88>)
 8000524:	5cd2      	ldrb	r2, [r2, r3]
 8000526:	3201      	adds	r2, #1
 8000528:	b2d1      	uxtb	r1, r2
 800052a:	4a09      	ldr	r2, [pc, #36]	@ (8000550 <scanButton+0x88>)
 800052c:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < NUMBER_OF_BUTTON; ++i)
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	3301      	adds	r3, #1
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	2b03      	cmp	r3, #3
 8000538:	d9e3      	bls.n	8000502 <scanButton+0x3a>
		}

		return STATUS_OK;
 800053a:	2301      	movs	r3, #1
	}
 800053c:	4618      	mov	r0, r3
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40010800 	.word	0x40010800
 8000548:	200000c8 	.word	0x200000c8
 800054c:	200001d8 	.word	0x200001d8
 8000550:	200000c4 	.word	0x200000c4

08000554 <isButtonPressed>:
	 * @brief  	Check if button is pressed and handle button hold
	 * @param  	button_id: button id
	 * @retval 	1: pressed or hold every 2s, 0: not pressed
	 */
	uint8_t isButtonPressed(const enum Button button_id)
	{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
		if (button_counter[button_id] > BUTTON_HOLD_THRESHOLD)
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	4a0a      	ldr	r2, [pc, #40]	@ (800058c <isButtonPressed+0x38>)
 8000562:	5cd3      	ldrb	r3, [r2, r3]
 8000564:	2b28      	cmp	r3, #40	@ 0x28
 8000566:	d903      	bls.n	8000570 <isButtonPressed+0x1c>
		{
			button_counter[button_id] = 1;
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	4a08      	ldr	r2, [pc, #32]	@ (800058c <isButtonPressed+0x38>)
 800056c:	2101      	movs	r1, #1
 800056e:	54d1      	strb	r1, [r2, r3]
		}

		if (button_counter[button_id] == 1)
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	4a06      	ldr	r2, [pc, #24]	@ (800058c <isButtonPressed+0x38>)
 8000574:	5cd3      	ldrb	r3, [r2, r3]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d101      	bne.n	800057e <isButtonPressed+0x2a>
		{
			return 1;
 800057a:	2301      	movs	r3, #1
 800057c:	e000      	b.n	8000580 <isButtonPressed+0x2c>
		}
		return 0;
 800057e:	2300      	movs	r3, #0
	}
 8000580:	4618      	mov	r0, r3
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	200000c4 	.word	0x200000c4

08000590 <initBuzzer>:
	/**
	 *@brief Initializes the buzzer by starting the PWM signal.
	 *@return STATUS_OK if successful, STATUS_ERROR otherwise.
	 */
	enum StatusCode initBuzzer()
	{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8000596:	2300      	movs	r3, #0
 8000598:	71fb      	strb	r3, [r7, #7]
 800059a:	e00e      	b.n	80005ba <initBuzzer+0x2a>
		{
			if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1) == HAL_OK)
 800059c:	2100      	movs	r1, #0
 800059e:	480b      	ldr	r0, [pc, #44]	@ (80005cc <initBuzzer+0x3c>)
 80005a0:	f007 fa84 	bl	8007aac <HAL_TIM_PWM_Start>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d101      	bne.n	80005ae <initBuzzer+0x1e>
			{
				return STATUS_OK;
 80005aa:	2301      	movs	r3, #1
 80005ac:	e009      	b.n	80005c2 <initBuzzer+0x32>
			}
			HAL_Delay(50);
 80005ae:	2032      	movs	r0, #50	@ 0x32
 80005b0:	f003 fc8e 	bl	8003ed0 <HAL_Delay>
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	3301      	adds	r3, #1
 80005b8:	71fb      	strb	r3, [r7, #7]
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d9ed      	bls.n	800059c <initBuzzer+0xc>
		}

		return STATUS_ERROR;
 80005c0:	2300      	movs	r3, #0
	}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000318 	.word	0x20000318

080005d0 <setFreqBuzzer>:
	/**
	 * @brief Sets the frequency of the buzzer.
	 *
	 */
	void setFreqBuzzer(const uint32_t frequency)
	{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
		if (frequency <= 0)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d104      	bne.n	80005e8 <setFreqBuzzer+0x18>
		{
			// Nếu tần số bằng 0, dừng buzzer
			HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 80005de:	2100      	movs	r1, #0
 80005e0:	4820      	ldr	r0, [pc, #128]	@ (8000664 <setFreqBuzzer+0x94>)
 80005e2:	f007 fb1d 	bl	8007c20 <HAL_TIM_PWM_Stop>
			return;
 80005e6:	e03a      	b.n	800065e <setFreqBuzzer+0x8e>
		}

		uint32_t prescaler = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	60fb      	str	r3, [r7, #12]
		uint32_t period = (TIMER_CLOCK_HZ / prescaler / frequency) - 1;
 80005ec:	4a1e      	ldr	r2, [pc, #120]	@ (8000668 <setFreqBuzzer+0x98>)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fa:	3b01      	subs	r3, #1
 80005fc:	60bb      	str	r3, [r7, #8]

		while (period > MAX_TIMER_COUNT && prescaler < MAX_TIMER_COUNT)
 80005fe:	e00b      	b.n	8000618 <setFreqBuzzer+0x48>
		{
			++prescaler;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	3301      	adds	r3, #1
 8000604:	60fb      	str	r3, [r7, #12]
			period = (TIMER_CLOCK_HZ / prescaler / frequency) - 1;
 8000606:	4a18      	ldr	r2, [pc, #96]	@ (8000668 <setFreqBuzzer+0x98>)
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	fbb2 f2f3 	udiv	r2, r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	fbb2 f3f3 	udiv	r3, r2, r3
 8000614:	3b01      	subs	r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
		while (period > MAX_TIMER_COUNT && prescaler < MAX_TIMER_COUNT)
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800061e:	d304      	bcc.n	800062a <setFreqBuzzer+0x5a>
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000626:	4293      	cmp	r3, r2
 8000628:	d9ea      	bls.n	8000600 <setFreqBuzzer+0x30>
		}

		if (period > MAX_TIMER_COUNT)
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000630:	d214      	bcs.n	800065c <setFreqBuzzer+0x8c>
		{
			// If timer capacity is still exceeded, do nothing
			return;
		}

		__HAL_TIM_SET_PRESCALER(&htim5, prescaler);
 8000632:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <setFreqBuzzer+0x94>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	629a      	str	r2, [r3, #40]	@ 0x28
		__HAL_TIM_SET_AUTORELOAD(&htim5, period);
 800063a:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <setFreqBuzzer+0x94>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000642:	4a08      	ldr	r2, [pc, #32]	@ (8000664 <setFreqBuzzer+0x94>)
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, period / 2);
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <setFreqBuzzer+0x94>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	68ba      	ldr	r2, [r7, #8]
 800064e:	0852      	lsrs	r2, r2, #1
 8000650:	635a      	str	r2, [r3, #52]	@ 0x34

		HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000652:	2100      	movs	r1, #0
 8000654:	4803      	ldr	r0, [pc, #12]	@ (8000664 <setFreqBuzzer+0x94>)
 8000656:	f007 fa29 	bl	8007aac <HAL_TIM_PWM_Start>
 800065a:	e000      	b.n	800065e <setFreqBuzzer+0x8e>
			return;
 800065c:	bf00      	nop
	}
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000318 	.word	0x20000318
 8000668:	044aa200 	.word	0x044aa200

0800066c <stopBuzzer>:

	void stopBuzzer()
	{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
		HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8000670:	2100      	movs	r1, #0
 8000672:	4802      	ldr	r0, [pc, #8]	@ (800067c <stopBuzzer+0x10>)
 8000674:	f007 fad4 	bl	8007c20 <HAL_TIM_PWM_Stop>
	}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000318 	.word	0x20000318

08000680 <initDisplay>:
                                    0x1f, 0x01, 0x09}; // 0->9
    uint16_t display_index = 0;
    uint8_t spi_buffer = 0xff;

    enum StatusCode initDisplay()
    {
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
        HAL_GPIO_WritePin(LED_LATCH_GPIO_Port, LED_LATCH_Pin, 1);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800068a:	4811      	ldr	r0, [pc, #68]	@ (80006d0 <initDisplay+0x50>)
 800068c:	f004 ff5f 	bl	800554e <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(LED_LATCH_GPIO_Port, LED_LATCH_Pin, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000696:	480e      	ldr	r0, [pc, #56]	@ (80006d0 <initDisplay+0x50>)
 8000698:	f004 ff59 	bl	800554e <HAL_GPIO_WritePin>
        if (HAL_SPI_Transmit(&hspi1, (void *)&spi_buffer, 1, 1) != HAL_OK)
 800069c:	2301      	movs	r3, #1
 800069e:	2201      	movs	r2, #1
 80006a0:	490c      	ldr	r1, [pc, #48]	@ (80006d4 <initDisplay+0x54>)
 80006a2:	480d      	ldr	r0, [pc, #52]	@ (80006d8 <initDisplay+0x58>)
 80006a4:	f006 fbf2 	bl	8006e8c <HAL_SPI_Transmit>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d007      	beq.n	80006be <initDisplay+0x3e>
        {
            HAL_GPIO_WritePin(LED_LATCH_GPIO_Port, LED_LATCH_Pin, 1);
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006b4:	4806      	ldr	r0, [pc, #24]	@ (80006d0 <initDisplay+0x50>)
 80006b6:	f004 ff4a 	bl	800554e <HAL_GPIO_WritePin>
            return STATUS_ERROR;
 80006ba:	2300      	movs	r3, #0
 80006bc:	e006      	b.n	80006cc <initDisplay+0x4c>
        }
        HAL_GPIO_WritePin(LED_LATCH_GPIO_Port, LED_LATCH_Pin, 1);
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c4:	4802      	ldr	r0, [pc, #8]	@ (80006d0 <initDisplay+0x50>)
 80006c6:	f004 ff42 	bl	800554e <HAL_GPIO_WritePin>
        return STATUS_OK;
 80006ca:	2301      	movs	r3, #1
    }
 80006cc:	4618      	mov	r0, r3
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40011000 	.word	0x40011000
 80006d4:	2000000a 	.word	0x2000000a
 80006d8:	200001d8 	.word	0x200001d8

080006dc <displayScan>:
    /**
     * @brief Display scan function
     * @note This function should be called in a timer interrupt
     */
    void displayScan()
    {
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
        spi_buffer = display_buffer[display_index];
 80006e0:	4b37      	ldr	r3, [pc, #220]	@ (80007c0 <displayScan+0xe4>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b37      	ldr	r3, [pc, #220]	@ (80007c4 <displayScan+0xe8>)
 80006e8:	5c9a      	ldrb	r2, [r3, r2]
 80006ea:	4b37      	ldr	r3, [pc, #220]	@ (80007c8 <displayScan+0xec>)
 80006ec:	701a      	strb	r2, [r3, #0]
        switch (display_index)
 80006ee:	4b34      	ldr	r3, [pc, #208]	@ (80007c0 <displayScan+0xe4>)
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d02c      	beq.n	8000750 <displayScan+0x74>
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	dc3d      	bgt.n	8000776 <displayScan+0x9a>
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d002      	beq.n	8000704 <displayScan+0x28>
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d013      	beq.n	800072a <displayScan+0x4e>
            HAL_GPIO_WritePin(LED7_EN1_GPIO_Port, LED7_EN1_Pin, 1);
            HAL_GPIO_WritePin(LED7_EN2_GPIO_Port, LED7_EN2_Pin, 1);
            HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 0);
            break;
        default:
            break;
 8000702:	e038      	b.n	8000776 <displayScan+0x9a>
            HAL_GPIO_WritePin(LED7_EN1_GPIO_Port, LED7_EN1_Pin, 1);
 8000704:	2201      	movs	r2, #1
 8000706:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800070a:	4830      	ldr	r0, [pc, #192]	@ (80007cc <displayScan+0xf0>)
 800070c:	f004 ff1f 	bl	800554e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED7_EN2_GPIO_Port, LED7_EN2_Pin, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000716:	482d      	ldr	r0, [pc, #180]	@ (80007cc <displayScan+0xf0>)
 8000718:	f004 ff19 	bl	800554e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 1);
 800071c:	2201      	movs	r2, #1
 800071e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000722:	482a      	ldr	r0, [pc, #168]	@ (80007cc <displayScan+0xf0>)
 8000724:	f004 ff13 	bl	800554e <HAL_GPIO_WritePin>
            break;
 8000728:	e026      	b.n	8000778 <displayScan+0x9c>
            HAL_GPIO_WritePin(LED7_EN1_GPIO_Port, LED7_EN1_Pin, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000730:	4826      	ldr	r0, [pc, #152]	@ (80007cc <displayScan+0xf0>)
 8000732:	f004 ff0c 	bl	800554e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED7_EN2_GPIO_Port, LED7_EN2_Pin, 1);
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800073c:	4823      	ldr	r0, [pc, #140]	@ (80007cc <displayScan+0xf0>)
 800073e:	f004 ff06 	bl	800554e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 1);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000748:	4820      	ldr	r0, [pc, #128]	@ (80007cc <displayScan+0xf0>)
 800074a:	f004 ff00 	bl	800554e <HAL_GPIO_WritePin>
            break;
 800074e:	e013      	b.n	8000778 <displayScan+0x9c>
            HAL_GPIO_WritePin(LED7_EN1_GPIO_Port, LED7_EN1_Pin, 1);
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000756:	481d      	ldr	r0, [pc, #116]	@ (80007cc <displayScan+0xf0>)
 8000758:	f004 fef9 	bl	800554e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED7_EN2_GPIO_Port, LED7_EN2_Pin, 1);
 800075c:	2201      	movs	r2, #1
 800075e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000762:	481a      	ldr	r0, [pc, #104]	@ (80007cc <displayScan+0xf0>)
 8000764:	f004 fef3 	bl	800554e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 0);
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800076e:	4817      	ldr	r0, [pc, #92]	@ (80007cc <displayScan+0xf0>)
 8000770:	f004 feed 	bl	800554e <HAL_GPIO_WritePin>
            break;
 8000774:	e000      	b.n	8000778 <displayScan+0x9c>
            break;
 8000776:	bf00      	nop
        }

        display_index = (display_index + 1) % 3;
 8000778:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <displayScan+0xe4>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	1c5a      	adds	r2, r3, #1
 800077e:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <displayScan+0xf4>)
 8000780:	fb83 3102 	smull	r3, r1, r3, r2
 8000784:	17d3      	asrs	r3, r2, #31
 8000786:	1ac9      	subs	r1, r1, r3
 8000788:	460b      	mov	r3, r1
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	440b      	add	r3, r1
 800078e:	1ad1      	subs	r1, r2, r3
 8000790:	b28a      	uxth	r2, r1
 8000792:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <displayScan+0xe4>)
 8000794:	801a      	strh	r2, [r3, #0]

        HAL_GPIO_WritePin(LED_LATCH_GPIO_Port, LED_LATCH_Pin, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800079c:	480d      	ldr	r0, [pc, #52]	@ (80007d4 <displayScan+0xf8>)
 800079e:	f004 fed6 	bl	800554e <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi1, (void *)&spi_buffer, 1, 1);
 80007a2:	2301      	movs	r3, #1
 80007a4:	2201      	movs	r2, #1
 80007a6:	4908      	ldr	r1, [pc, #32]	@ (80007c8 <displayScan+0xec>)
 80007a8:	480b      	ldr	r0, [pc, #44]	@ (80007d8 <displayScan+0xfc>)
 80007aa:	f006 fb6f 	bl	8006e8c <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(LED_LATCH_GPIO_Port, LED_LATCH_Pin, 1);
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007b4:	4807      	ldr	r0, [pc, #28]	@ (80007d4 <displayScan+0xf8>)
 80007b6:	f004 feca 	bl	800554e <HAL_GPIO_WritePin>
    }
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000d0 	.word	0x200000d0
 80007c4:	200000cc 	.word	0x200000cc
 80007c8:	2000000a 	.word	0x2000000a
 80007cc:	40010800 	.word	0x40010800
 80007d0:	55555556 	.word	0x55555556
 80007d4:	40011000 	.word	0x40011000
 80007d8:	200001d8 	.word	0x200001d8

080007dc <displayLed7Seg>:
     * @param number Number to display
     * @return None
     * @note display_buffer[1] is the left digit, display_buffer[0] is the right digit
     */
    void displayLed7Seg(const uint8_t number)
    {
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
        display_buffer[1] = display_7seg_map[number / 10];
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	4a0f      	ldr	r2, [pc, #60]	@ (8000828 <displayLed7Seg+0x4c>)
 80007ea:	fba2 2303 	umull	r2, r3, r2, r3
 80007ee:	08db      	lsrs	r3, r3, #3
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	461a      	mov	r2, r3
 80007f4:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <displayLed7Seg+0x50>)
 80007f6:	5c9a      	ldrb	r2, [r3, r2]
 80007f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <displayLed7Seg+0x54>)
 80007fa:	705a      	strb	r2, [r3, #1]
        display_buffer[0] = display_7seg_map[number % 10];
 80007fc:	79fa      	ldrb	r2, [r7, #7]
 80007fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <displayLed7Seg+0x4c>)
 8000800:	fba3 1302 	umull	r1, r3, r3, r2
 8000804:	08d9      	lsrs	r1, r3, #3
 8000806:	460b      	mov	r3, r1
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	440b      	add	r3, r1
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	1ad3      	subs	r3, r2, r3
 8000810:	b2db      	uxtb	r3, r3
 8000812:	461a      	mov	r2, r3
 8000814:	4b05      	ldr	r3, [pc, #20]	@ (800082c <displayLed7Seg+0x50>)
 8000816:	5c9a      	ldrb	r2, [r3, r2]
 8000818:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <displayLed7Seg+0x54>)
 800081a:	701a      	strb	r2, [r3, #0]
    }
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	cccccccd 	.word	0xcccccccd
 800082c:	20000000 	.word	0x20000000
 8000830:	200000cc 	.word	0x200000cc

08000834 <mirrorByte>:

    uint8_t mirrorByte(uint8_t data_byte)
    {
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
        data_byte = (data_byte & 0xF0) >> 4 | (data_byte & 0x0F) << 4;
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	091b      	lsrs	r3, r3, #4
 8000842:	b2db      	uxtb	r3, r3
 8000844:	b25a      	sxtb	r2, r3
 8000846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084a:	011b      	lsls	r3, r3, #4
 800084c:	b25b      	sxtb	r3, r3
 800084e:	4313      	orrs	r3, r2
 8000850:	b25b      	sxtb	r3, r3
 8000852:	71fb      	strb	r3, [r7, #7]
        data_byte = (data_byte & 0xCC) >> 2 | (data_byte & 0x33) << 2;
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	109b      	asrs	r3, r3, #2
 8000858:	b25b      	sxtb	r3, r3
 800085a:	f003 0333 	and.w	r3, r3, #51	@ 0x33
 800085e:	b25a      	sxtb	r2, r3
 8000860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	b25b      	sxtb	r3, r3
 8000868:	f023 0333 	bic.w	r3, r3, #51	@ 0x33
 800086c:	b25b      	sxtb	r3, r3
 800086e:	4313      	orrs	r3, r2
 8000870:	b25b      	sxtb	r3, r3
 8000872:	71fb      	strb	r3, [r7, #7]
        data_byte = (data_byte & 0xAA) >> 1 | (data_byte & 0x55) << 1;
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	105b      	asrs	r3, r3, #1
 8000878:	b25b      	sxtb	r3, r3
 800087a:	f003 0355 	and.w	r3, r3, #85	@ 0x55
 800087e:	b25a      	sxtb	r2, r3
 8000880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	b25b      	sxtb	r3, r3
 8000888:	f023 0355 	bic.w	r3, r3, #85	@ 0x55
 800088c:	b25b      	sxtb	r3, r3
 800088e:	4313      	orrs	r3, r2
 8000890:	b25b      	sxtb	r3, r3
 8000892:	71fb      	strb	r3, [r7, #7]
        return data_byte;
 8000894:	79fb      	ldrb	r3, [r7, #7]
    }
 8000896:	4618      	mov	r0, r3
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr

080008a0 <displayLeds>:
     * @param data_byte Data byte to display
     * @note because the LEDs are connected in reverse order,
     * we need to mirror the byte and then reverse the bits of the byte
     */
    void displayLeds(const uint8_t data_byte)
    {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
        display_buffer[2] = ~mirrorByte(data_byte);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ffc1 	bl	8000834 <mirrorByte>
 80008b2:	4603      	mov	r3, r0
 80008b4:	43db      	mvns	r3, r3
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	4b02      	ldr	r3, [pc, #8]	@ (80008c4 <displayLeds+0x24>)
 80008ba:	709a      	strb	r2, [r3, #2]
    }
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	200000cc 	.word	0x200000cc

080008c8 <toggleLedDebug>:

    void toggleLedDebug()
    {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
        HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 80008cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008d0:	4802      	ldr	r0, [pc, #8]	@ (80008dc <toggleLedDebug+0x14>)
 80008d2:	f004 fe54 	bl	800557e <HAL_GPIO_TogglePin>
    }
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40011000 	.word	0x40011000

080008e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <MX_DMA_Init+0x38>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000918 <MX_DMA_Init+0x38>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6153      	str	r3, [r2, #20]
 80008f2:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <MX_DMA_Init+0x38>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	200b      	movs	r0, #11
 8000904:	f003 ffbd 	bl	8004882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000908:	200b      	movs	r0, #11
 800090a:	f003 ffd6 	bl	80048ba <HAL_NVIC_EnableIRQ>

}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000

0800091c <scanEncoder>:

    /**
     * @brief This function should be called in interupt
     */
    void scanEncoder()
    {
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
        for (uint8_t i = 0; i < NUMBER_OF_ENCODER; ++i)
 8000922:	2300      	movs	r3, #0
 8000924:	71fb      	strb	r3, [r7, #7]
 8000926:	e03f      	b.n	80009a8 <scanEncoder+0x8c>
        {
            switch (HAL_GPIO_ReadPin(ENCODER_A_PORT[i], ENCODER_A_PIN[i]))
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	4a23      	ldr	r2, [pc, #140]	@ (80009b8 <scanEncoder+0x9c>)
 800092c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	4922      	ldr	r1, [pc, #136]	@ (80009bc <scanEncoder+0xa0>)
 8000934:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000938:	4619      	mov	r1, r3
 800093a:	4610      	mov	r0, r2
 800093c:	f004 fdf0 	bl	8005520 <HAL_GPIO_ReadPin>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d020      	beq.n	8000988 <scanEncoder+0x6c>
 8000946:	2b01      	cmp	r3, #1
 8000948:	d12b      	bne.n	80009a2 <scanEncoder+0x86>
            {
            case GPIO_PIN_SET:
            {
                if (encoder_pin_a_state[i] == GPIO_PIN_RESET)
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	4a1c      	ldr	r2, [pc, #112]	@ (80009c0 <scanEncoder+0xa4>)
 800094e:	5cd3      	ldrb	r3, [r2, r3]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d123      	bne.n	800099c <scanEncoder+0x80>
                {
                    encoder_pin_a_state[i] = GPIO_PIN_SET;
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	4a1a      	ldr	r2, [pc, #104]	@ (80009c0 <scanEncoder+0xa4>)
 8000958:	2101      	movs	r1, #1
 800095a:	54d1      	strb	r1, [r2, r3]

                    if (encoder_pulse_count[i] < 0xFFFFFFFF)
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	4a19      	ldr	r2, [pc, #100]	@ (80009c4 <scanEncoder+0xa8>)
 8000960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000964:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000968:	d008      	beq.n	800097c <scanEncoder+0x60>
                    {
                        ++encoder_pulse_count[i];
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	4a15      	ldr	r2, [pc, #84]	@ (80009c4 <scanEncoder+0xa8>)
 800096e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000972:	3201      	adds	r2, #1
 8000974:	4913      	ldr	r1, [pc, #76]	@ (80009c4 <scanEncoder+0xa8>)
 8000976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    else
                    {
                        encoder_pulse_count[i] = 0;
                    }
                }
                break;
 800097a:	e00f      	b.n	800099c <scanEncoder+0x80>
                        encoder_pulse_count[i] = 0;
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	4a11      	ldr	r2, [pc, #68]	@ (80009c4 <scanEncoder+0xa8>)
 8000980:	2100      	movs	r1, #0
 8000982:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                break;
 8000986:	e009      	b.n	800099c <scanEncoder+0x80>
            }
            case GPIO_PIN_RESET:
            {
                if (encoder_pin_a_state[i] == GPIO_PIN_SET)
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	4a0d      	ldr	r2, [pc, #52]	@ (80009c0 <scanEncoder+0xa4>)
 800098c:	5cd3      	ldrb	r3, [r2, r3]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d106      	bne.n	80009a0 <scanEncoder+0x84>
                {
                    encoder_pin_a_state[i] = GPIO_PIN_RESET;
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	4a0a      	ldr	r2, [pc, #40]	@ (80009c0 <scanEncoder+0xa4>)
 8000996:	2100      	movs	r1, #0
 8000998:	54d1      	strb	r1, [r2, r3]
                }
                break;
 800099a:	e001      	b.n	80009a0 <scanEncoder+0x84>
                break;
 800099c:	bf00      	nop
 800099e:	e000      	b.n	80009a2 <scanEncoder+0x86>
                break;
 80009a0:	bf00      	nop
        for (uint8_t i = 0; i < NUMBER_OF_ENCODER; ++i)
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	3301      	adds	r3, #1
 80009a6:	71fb      	strb	r3, [r7, #7]
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	2b03      	cmp	r3, #3
 80009ac:	d9bc      	bls.n	8000928 <scanEncoder+0xc>
            }
            }
        }
    }
 80009ae:	bf00      	nop
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	2000000c 	.word	0x2000000c
 80009bc:	2000001c 	.word	0x2000001c
 80009c0:	200000e4 	.word	0x200000e4
 80009c4:	200000d4 	.word	0x200000d4

080009c8 <getPulseCount>:

    uint32_t getPulseCount(const enum Encoder encoder_id)
    {
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
        return encoder_pulse_count[encoder_id];
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	4a03      	ldr	r2, [pc, #12]	@ (80009e4 <getPulseCount+0x1c>)
 80009d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    }
 80009da:	4618      	mov	r0, r3
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	200000d4 	.word	0x200000d4

080009e8 <followLine>:

    uint16_t cross_count = 0;
    uint16_t prev_cross_turn = 0;

    void followLine()
    {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
        if (follow_line_state != FOLLOW_LINE)
 80009ec:	4b44      	ldr	r3, [pc, #272]	@ (8000b00 <followLine+0x118>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d17e      	bne.n	8000af2 <followLine+0x10a>

        // These variables are used to detect the cross.
        static enum LineStatus prev_line_status = LINE_CROSS;
        static enum LineStatus curr_line_status = LINE_CROSS;

        prev_line_status = curr_line_status;
 80009f4:	4b43      	ldr	r3, [pc, #268]	@ (8000b04 <followLine+0x11c>)
 80009f6:	781a      	ldrb	r2, [r3, #0]
 80009f8:	4b43      	ldr	r3, [pc, #268]	@ (8000b08 <followLine+0x120>)
 80009fa:	701a      	strb	r2, [r3, #0]
        curr_line_status = getLineStatus();
 80009fc:	f000 fd20 	bl	8001440 <getLineStatus>
 8000a00:	4603      	mov	r3, r0
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b3f      	ldr	r3, [pc, #252]	@ (8000b04 <followLine+0x11c>)
 8000a06:	701a      	strb	r2, [r3, #0]

        switch (curr_line_status)
 8000a08:	4b3e      	ldr	r3, [pc, #248]	@ (8000b04 <followLine+0x11c>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	2b07      	cmp	r3, #7
 8000a10:	d871      	bhi.n	8000af6 <followLine+0x10e>
 8000a12:	a201      	add	r2, pc, #4	@ (adr r2, 8000a18 <followLine+0x30>)
 8000a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a18:	08000add 	.word	0x08000add
 8000a1c:	08000a39 	.word	0x08000a39
 8000a20:	08000a8f 	.word	0x08000a8f
 8000a24:	08000aa9 	.word	0x08000aa9
 8000a28:	08000ac3 	.word	0x08000ac3
 8000a2c:	08000a41 	.word	0x08000a41
 8000a30:	08000a5b 	.word	0x08000a5b
 8000a34:	08000a75 	.word	0x08000a75
        {
        case LINE_CENTER:
        {
            moveForward(FOLLOW_LINE_SPEED);
 8000a38:	2019      	movs	r0, #25
 8000a3a:	f001 f8c7 	bl	8001bcc <moveForward>
            break;
 8000a3e:	e05d      	b.n	8000afc <followLine+0x114>
        }
        case LINE_LEFT1:
        {
            motor1Rotates(FOLLOW_LINE_SPEED * 2 / 3);
 8000a40:	2010      	movs	r0, #16
 8000a42:	f001 f80f 	bl	8001a64 <motor1Rotates>
            motor2Rotates(FOLLOW_LINE_SPEED * 2 / 3);
 8000a46:	2010      	movs	r0, #16
 8000a48:	f001 f836 	bl	8001ab8 <motor2Rotates>

            motor3Rotates(FOLLOW_LINE_SPEED);
 8000a4c:	2019      	movs	r0, #25
 8000a4e:	f001 f85d 	bl	8001b0c <motor3Rotates>
            motor4Rotates(FOLLOW_LINE_SPEED);
 8000a52:	2019      	movs	r0, #25
 8000a54:	f001 f882 	bl	8001b5c <motor4Rotates>

            break;
 8000a58:	e050      	b.n	8000afc <followLine+0x114>
        }
        case LINE_LEFT2:
        {
            motor1Rotates(FOLLOW_LINE_SPEED * 1 / 3);
 8000a5a:	2008      	movs	r0, #8
 8000a5c:	f001 f802 	bl	8001a64 <motor1Rotates>
            motor2Rotates(FOLLOW_LINE_SPEED * 1 / 3);
 8000a60:	2008      	movs	r0, #8
 8000a62:	f001 f829 	bl	8001ab8 <motor2Rotates>

            motor3Rotates(FOLLOW_LINE_SPEED);
 8000a66:	2019      	movs	r0, #25
 8000a68:	f001 f850 	bl	8001b0c <motor3Rotates>
            motor4Rotates(FOLLOW_LINE_SPEED);
 8000a6c:	2019      	movs	r0, #25
 8000a6e:	f001 f875 	bl	8001b5c <motor4Rotates>

            break;
 8000a72:	e043      	b.n	8000afc <followLine+0x114>
        }
        case LINE_LEFT3:
        {
            motor1Rotates(0);
 8000a74:	2000      	movs	r0, #0
 8000a76:	f000 fff5 	bl	8001a64 <motor1Rotates>
            motor2Rotates(0);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f001 f81c 	bl	8001ab8 <motor2Rotates>

            motor3Rotates(FOLLOW_LINE_SPEED);
 8000a80:	2019      	movs	r0, #25
 8000a82:	f001 f843 	bl	8001b0c <motor3Rotates>
            motor4Rotates(FOLLOW_LINE_SPEED);
 8000a86:	2019      	movs	r0, #25
 8000a88:	f001 f868 	bl	8001b5c <motor4Rotates>

            break;
 8000a8c:	e036      	b.n	8000afc <followLine+0x114>
        }
        case LINE_RIGHT1:
        {
            motor1Rotates(FOLLOW_LINE_SPEED);
 8000a8e:	2019      	movs	r0, #25
 8000a90:	f000 ffe8 	bl	8001a64 <motor1Rotates>
            motor2Rotates(FOLLOW_LINE_SPEED);
 8000a94:	2019      	movs	r0, #25
 8000a96:	f001 f80f 	bl	8001ab8 <motor2Rotates>

            motor3Rotates(FOLLOW_LINE_SPEED * 2 / 3);
 8000a9a:	2010      	movs	r0, #16
 8000a9c:	f001 f836 	bl	8001b0c <motor3Rotates>
            motor4Rotates(FOLLOW_LINE_SPEED * 2 / 3);
 8000aa0:	2010      	movs	r0, #16
 8000aa2:	f001 f85b 	bl	8001b5c <motor4Rotates>

            break;
 8000aa6:	e029      	b.n	8000afc <followLine+0x114>
        }
        case LINE_RIGHT2:
        {
            motor1Rotates(FOLLOW_LINE_SPEED);
 8000aa8:	2019      	movs	r0, #25
 8000aaa:	f000 ffdb 	bl	8001a64 <motor1Rotates>
            motor2Rotates(FOLLOW_LINE_SPEED);
 8000aae:	2019      	movs	r0, #25
 8000ab0:	f001 f802 	bl	8001ab8 <motor2Rotates>

            motor3Rotates(FOLLOW_LINE_SPEED * 1 / 3);
 8000ab4:	2008      	movs	r0, #8
 8000ab6:	f001 f829 	bl	8001b0c <motor3Rotates>
            motor4Rotates(FOLLOW_LINE_SPEED * 1 / 3);
 8000aba:	2008      	movs	r0, #8
 8000abc:	f001 f84e 	bl	8001b5c <motor4Rotates>

            break;
 8000ac0:	e01c      	b.n	8000afc <followLine+0x114>
        }
        case LINE_RIGHT3:
        {
            motor1Rotates(FOLLOW_LINE_SPEED);
 8000ac2:	2019      	movs	r0, #25
 8000ac4:	f000 ffce 	bl	8001a64 <motor1Rotates>
            motor2Rotates(FOLLOW_LINE_SPEED);
 8000ac8:	2019      	movs	r0, #25
 8000aca:	f000 fff5 	bl	8001ab8 <motor2Rotates>

            motor3Rotates(0);
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f001 f81c 	bl	8001b0c <motor3Rotates>
            motor4Rotates(0);
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f001 f841 	bl	8001b5c <motor4Rotates>

            break;
 8000ada:	e00f      	b.n	8000afc <followLine+0x114>
        }
        case LINE_CROSS:
        {
            if (prev_line_status != LINE_CROSS)
 8000adc:	4b0a      	ldr	r3, [pc, #40]	@ (8000b08 <followLine+0x120>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d00a      	beq.n	8000afa <followLine+0x112>
            {
                cross_count++;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <followLine+0x124>)
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <followLine+0x124>)
 8000aee:	801a      	strh	r2, [r3, #0]
            }
            break;
 8000af0:	e003      	b.n	8000afa <followLine+0x112>
            return;
 8000af2:	bf00      	nop
 8000af4:	e002      	b.n	8000afc <followLine+0x114>
        }
        default:
        {
            return;
 8000af6:	bf00      	nop
 8000af8:	e000      	b.n	8000afc <followLine+0x114>
            break;
 8000afa:	bf00      	nop
        }
        }
    }
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200000e8 	.word	0x200000e8
 8000b04:	20000024 	.word	0x20000024
 8000b08:	20000025 	.word	0x20000025
 8000b0c:	200000ea 	.word	0x200000ea

08000b10 <turnRightAtCross>:

    void turnRightAtCross(uint16_t cross_num)
    {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	80fb      	strh	r3, [r7, #6]
        static uint32_t pulse_count_enc_1 = 0;
        static uint32_t pulse_count_enc_2 = 0;
        static uint32_t pulse_count_enc_3 = 0;
        static uint32_t pulse_count_enc_4 = 0;

        if (cross_num == cross_count && follow_line_state == FOLLOW_LINE && prev_cross_turn != cross_num) // Execute only once
 8000b1a:	4b5f      	ldr	r3, [pc, #380]	@ (8000c98 <turnRightAtCross+0x188>)
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	88fa      	ldrh	r2, [r7, #6]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d129      	bne.n	8000b78 <turnRightAtCross+0x68>
 8000b24:	4b5d      	ldr	r3, [pc, #372]	@ (8000c9c <turnRightAtCross+0x18c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d125      	bne.n	8000b78 <turnRightAtCross+0x68>
 8000b2c:	4b5c      	ldr	r3, [pc, #368]	@ (8000ca0 <turnRightAtCross+0x190>)
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	88fa      	ldrh	r2, [r7, #6]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d020      	beq.n	8000b78 <turnRightAtCross+0x68>
        {
            pulse_count_enc_1 = getPulseCount(ENCODER_1);
 8000b36:	2000      	movs	r0, #0
 8000b38:	f7ff ff46 	bl	80009c8 <getPulseCount>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4a59      	ldr	r2, [pc, #356]	@ (8000ca4 <turnRightAtCross+0x194>)
 8000b40:	6013      	str	r3, [r2, #0]
            pulse_count_enc_2 = getPulseCount(ENCODER_2);
 8000b42:	2001      	movs	r0, #1
 8000b44:	f7ff ff40 	bl	80009c8 <getPulseCount>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	4a57      	ldr	r2, [pc, #348]	@ (8000ca8 <turnRightAtCross+0x198>)
 8000b4c:	6013      	str	r3, [r2, #0]
            pulse_count_enc_3 = getPulseCount(ENCODER_3);
 8000b4e:	2002      	movs	r0, #2
 8000b50:	f7ff ff3a 	bl	80009c8 <getPulseCount>
 8000b54:	4603      	mov	r3, r0
 8000b56:	4a55      	ldr	r2, [pc, #340]	@ (8000cac <turnRightAtCross+0x19c>)
 8000b58:	6013      	str	r3, [r2, #0]
            pulse_count_enc_4 = getPulseCount(ENCODER_4);
 8000b5a:	2003      	movs	r0, #3
 8000b5c:	f7ff ff34 	bl	80009c8 <getPulseCount>
 8000b60:	4603      	mov	r3, r0
 8000b62:	4a53      	ldr	r2, [pc, #332]	@ (8000cb0 <turnRightAtCross+0x1a0>)
 8000b64:	6013      	str	r3, [r2, #0]

            moveForward(FOLLOW_LINE_SPEED);
 8000b66:	2019      	movs	r0, #25
 8000b68:	f001 f830 	bl	8001bcc <moveForward>

            prev_cross_turn = cross_num;
 8000b6c:	4a4c      	ldr	r2, [pc, #304]	@ (8000ca0 <turnRightAtCross+0x190>)
 8000b6e:	88fb      	ldrh	r3, [r7, #6]
 8000b70:	8013      	strh	r3, [r2, #0]
            follow_line_state = FOLLOW_LINE_TURN_RIGHT;
 8000b72:	4b4a      	ldr	r3, [pc, #296]	@ (8000c9c <turnRightAtCross+0x18c>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	701a      	strb	r2, [r3, #0]
        }

        if (follow_line_state != FOLLOW_LINE_TURN_RIGHT)
 8000b78:	4b48      	ldr	r3, [pc, #288]	@ (8000c9c <turnRightAtCross+0x18c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	f040 8085 	bne.w	8000c8c <turnRightAtCross+0x17c>
        {
            return;
        }

        if (getPulseCount(ENCODER_1) - pulse_count_enc_1 >= PULSE_PER_REVOLUTION / 4 &&
 8000b82:	2000      	movs	r0, #0
 8000b84:	f7ff ff20 	bl	80009c8 <getPulseCount>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	4b46      	ldr	r3, [pc, #280]	@ (8000ca4 <turnRightAtCross+0x194>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	1ad3      	subs	r3, r2, r3
 8000b90:	2b39      	cmp	r3, #57	@ 0x39
 8000b92:	d94a      	bls.n	8000c2a <turnRightAtCross+0x11a>
            getPulseCount(ENCODER_2) - pulse_count_enc_2 >= PULSE_PER_REVOLUTION / 4 &&
 8000b94:	2001      	movs	r0, #1
 8000b96:	f7ff ff17 	bl	80009c8 <getPulseCount>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	4b42      	ldr	r3, [pc, #264]	@ (8000ca8 <turnRightAtCross+0x198>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	1ad3      	subs	r3, r2, r3
        if (getPulseCount(ENCODER_1) - pulse_count_enc_1 >= PULSE_PER_REVOLUTION / 4 &&
 8000ba2:	2b39      	cmp	r3, #57	@ 0x39
 8000ba4:	d941      	bls.n	8000c2a <turnRightAtCross+0x11a>
            getPulseCount(ENCODER_3) - pulse_count_enc_3 >= PULSE_PER_REVOLUTION / 4 &&
 8000ba6:	2002      	movs	r0, #2
 8000ba8:	f7ff ff0e 	bl	80009c8 <getPulseCount>
 8000bac:	4602      	mov	r2, r0
 8000bae:	4b3f      	ldr	r3, [pc, #252]	@ (8000cac <turnRightAtCross+0x19c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	1ad3      	subs	r3, r2, r3
            getPulseCount(ENCODER_2) - pulse_count_enc_2 >= PULSE_PER_REVOLUTION / 4 &&
 8000bb4:	2b39      	cmp	r3, #57	@ 0x39
 8000bb6:	d938      	bls.n	8000c2a <turnRightAtCross+0x11a>
            getPulseCount(ENCODER_4) - pulse_count_enc_4 >= PULSE_PER_REVOLUTION / 4)
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f7ff ff05 	bl	80009c8 <getPulseCount>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	4b3b      	ldr	r3, [pc, #236]	@ (8000cb0 <turnRightAtCross+0x1a0>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	1ad3      	subs	r3, r2, r3
            getPulseCount(ENCODER_3) - pulse_count_enc_3 >= PULSE_PER_REVOLUTION / 4 &&
 8000bc6:	2b39      	cmp	r3, #57	@ 0x39
 8000bc8:	d92f      	bls.n	8000c2a <turnRightAtCross+0x11a>
        {
            rotateRight(FOLLOW_LINE_SPEED);
 8000bca:	2019      	movs	r0, #25
 8000bcc:	f001 f8ce 	bl	8001d6c <rotateRight>
            // if (getLineStatus() == LINE_RIGHT2)
            // {
            //     follow_line_state = FOLLOW_LINE;
            // }

            if (getPulseCount(ENCODER_1) - pulse_count_enc_1 >= PULSE_PER_REVOLUTION * 2 / 3 &&
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f7ff fef9 	bl	80009c8 <getPulseCount>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	4b32      	ldr	r3, [pc, #200]	@ (8000ca4 <turnRightAtCross+0x194>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	2b9b      	cmp	r3, #155	@ 0x9b
 8000be0:	d956      	bls.n	8000c90 <turnRightAtCross+0x180>
                getPulseCount(ENCODER_2) - pulse_count_enc_2 >= PULSE_PER_REVOLUTION * 2 / 3 &&
 8000be2:	2001      	movs	r0, #1
 8000be4:	f7ff fef0 	bl	80009c8 <getPulseCount>
 8000be8:	4602      	mov	r2, r0
 8000bea:	4b2f      	ldr	r3, [pc, #188]	@ (8000ca8 <turnRightAtCross+0x198>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	1ad3      	subs	r3, r2, r3
            if (getPulseCount(ENCODER_1) - pulse_count_enc_1 >= PULSE_PER_REVOLUTION * 2 / 3 &&
 8000bf0:	2b9b      	cmp	r3, #155	@ 0x9b
 8000bf2:	d94d      	bls.n	8000c90 <turnRightAtCross+0x180>
                getPulseCount(ENCODER_3) - pulse_count_enc_3 >= PULSE_PER_REVOLUTION * 2 / 3 &&
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	f7ff fee7 	bl	80009c8 <getPulseCount>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8000cac <turnRightAtCross+0x19c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	1ad3      	subs	r3, r2, r3
                getPulseCount(ENCODER_2) - pulse_count_enc_2 >= PULSE_PER_REVOLUTION * 2 / 3 &&
 8000c02:	2b9b      	cmp	r3, #155	@ 0x9b
 8000c04:	d944      	bls.n	8000c90 <turnRightAtCross+0x180>
                getPulseCount(ENCODER_4) - pulse_count_enc_4 >= PULSE_PER_REVOLUTION * 2 / 3)
 8000c06:	2003      	movs	r0, #3
 8000c08:	f7ff fede 	bl	80009c8 <getPulseCount>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	4b28      	ldr	r3, [pc, #160]	@ (8000cb0 <turnRightAtCross+0x1a0>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	1ad3      	subs	r3, r2, r3
                getPulseCount(ENCODER_3) - pulse_count_enc_3 >= PULSE_PER_REVOLUTION * 2 / 3 &&
 8000c14:	2b9b      	cmp	r3, #155	@ 0x9b
 8000c16:	d93b      	bls.n	8000c90 <turnRightAtCross+0x180>
            {
                if (getLineStatus() == LINE_CENTER)
 8000c18:	f000 fc12 	bl	8001440 <getLineStatus>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d136      	bne.n	8000c90 <turnRightAtCross+0x180>
                {
                    follow_line_state = FOLLOW_LINE;
 8000c22:	4b1e      	ldr	r3, [pc, #120]	@ (8000c9c <turnRightAtCross+0x18c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
            if (getPulseCount(ENCODER_1) - pulse_count_enc_1 >= PULSE_PER_REVOLUTION * 2 / 3 &&
 8000c28:	e032      	b.n	8000c90 <turnRightAtCross+0x180>
                }
            }
        }
        else
        {
            if (getPulseCount(ENCODER_1) - pulse_count_enc_1 >= PULSE_PER_REVOLUTION / 4)
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f7ff fecc 	bl	80009c8 <getPulseCount>
 8000c30:	4602      	mov	r2, r0
 8000c32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <turnRightAtCross+0x194>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	2b39      	cmp	r3, #57	@ 0x39
 8000c3a:	d902      	bls.n	8000c42 <turnRightAtCross+0x132>
            {
                motor1Rotates(0);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f000 ff11 	bl	8001a64 <motor1Rotates>
            }
            if (getPulseCount(ENCODER_2) - pulse_count_enc_2 >= PULSE_PER_REVOLUTION / 4)
 8000c42:	2001      	movs	r0, #1
 8000c44:	f7ff fec0 	bl	80009c8 <getPulseCount>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <turnRightAtCross+0x198>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	2b39      	cmp	r3, #57	@ 0x39
 8000c52:	d902      	bls.n	8000c5a <turnRightAtCross+0x14a>
            {
                motor2Rotates(0);
 8000c54:	2000      	movs	r0, #0
 8000c56:	f000 ff2f 	bl	8001ab8 <motor2Rotates>
            }
            if (getPulseCount(ENCODER_3) - pulse_count_enc_3 >= PULSE_PER_REVOLUTION / 4)
 8000c5a:	2002      	movs	r0, #2
 8000c5c:	f7ff feb4 	bl	80009c8 <getPulseCount>
 8000c60:	4602      	mov	r2, r0
 8000c62:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <turnRightAtCross+0x19c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	2b39      	cmp	r3, #57	@ 0x39
 8000c6a:	d902      	bls.n	8000c72 <turnRightAtCross+0x162>
            {
                motor3Rotates(0);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f000 ff4d 	bl	8001b0c <motor3Rotates>
            }
            if (getPulseCount(ENCODER_4) - pulse_count_enc_4 >= PULSE_PER_REVOLUTION / 4)
 8000c72:	2003      	movs	r0, #3
 8000c74:	f7ff fea8 	bl	80009c8 <getPulseCount>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb0 <turnRightAtCross+0x1a0>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	2b39      	cmp	r3, #57	@ 0x39
 8000c82:	d906      	bls.n	8000c92 <turnRightAtCross+0x182>
            {
                motor4Rotates(0);
 8000c84:	2000      	movs	r0, #0
 8000c86:	f000 ff69 	bl	8001b5c <motor4Rotates>
 8000c8a:	e002      	b.n	8000c92 <turnRightAtCross+0x182>
            return;
 8000c8c:	bf00      	nop
 8000c8e:	e000      	b.n	8000c92 <turnRightAtCross+0x182>
            if (getPulseCount(ENCODER_1) - pulse_count_enc_1 >= PULSE_PER_REVOLUTION * 2 / 3 &&
 8000c90:	bf00      	nop
            }
        }
    }
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200000ea 	.word	0x200000ea
 8000c9c:	200000e8 	.word	0x200000e8
 8000ca0:	200000ec 	.word	0x200000ec
 8000ca4:	200000f0 	.word	0x200000f0
 8000ca8:	200000f4 	.word	0x200000f4
 8000cac:	200000f8 	.word	0x200000f8
 8000cb0:	200000fc 	.word	0x200000fc

08000cb4 <turnLeftAtCross>:

    void turnLeftAtCross(uint16_t cross_num)
    {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	80fb      	strh	r3, [r7, #6]
        static uint32_t pulse_count_enc_1 = 0;
        static uint32_t pulse_count_enc_2 = 0;
        static uint32_t pulse_count_enc_3 = 0;
        static uint32_t pulse_count_enc_4 = 0;

        if (cross_num == cross_count && follow_line_state == FOLLOW_LINE && prev_cross_turn != cross_num) // Execute only once
 8000cbe:	4b5f      	ldr	r3, [pc, #380]	@ (8000e3c <turnLeftAtCross+0x188>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	88fa      	ldrh	r2, [r7, #6]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d129      	bne.n	8000d1c <turnLeftAtCross+0x68>
 8000cc8:	4b5d      	ldr	r3, [pc, #372]	@ (8000e40 <turnLeftAtCross+0x18c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d125      	bne.n	8000d1c <turnLeftAtCross+0x68>
 8000cd0:	4b5c      	ldr	r3, [pc, #368]	@ (8000e44 <turnLeftAtCross+0x190>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	88fa      	ldrh	r2, [r7, #6]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d020      	beq.n	8000d1c <turnLeftAtCross+0x68>
        {
            pulse_count_enc_1 = getPulseCount(ENCODER_1);
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f7ff fe74 	bl	80009c8 <getPulseCount>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4a59      	ldr	r2, [pc, #356]	@ (8000e48 <turnLeftAtCross+0x194>)
 8000ce4:	6013      	str	r3, [r2, #0]
            pulse_count_enc_2 = getPulseCount(ENCODER_2);
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f7ff fe6e 	bl	80009c8 <getPulseCount>
 8000cec:	4603      	mov	r3, r0
 8000cee:	4a57      	ldr	r2, [pc, #348]	@ (8000e4c <turnLeftAtCross+0x198>)
 8000cf0:	6013      	str	r3, [r2, #0]
            pulse_count_enc_3 = getPulseCount(ENCODER_3);
 8000cf2:	2002      	movs	r0, #2
 8000cf4:	f7ff fe68 	bl	80009c8 <getPulseCount>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4a55      	ldr	r2, [pc, #340]	@ (8000e50 <turnLeftAtCross+0x19c>)
 8000cfc:	6013      	str	r3, [r2, #0]
            pulse_count_enc_4 = getPulseCount(ENCODER_4);
 8000cfe:	2003      	movs	r0, #3
 8000d00:	f7ff fe62 	bl	80009c8 <getPulseCount>
 8000d04:	4603      	mov	r3, r0
 8000d06:	4a53      	ldr	r2, [pc, #332]	@ (8000e54 <turnLeftAtCross+0x1a0>)
 8000d08:	6013      	str	r3, [r2, #0]

            moveForward(FOLLOW_LINE_SPEED);
 8000d0a:	2019      	movs	r0, #25
 8000d0c:	f000 ff5e 	bl	8001bcc <moveForward>

            prev_cross_turn = cross_num;
 8000d10:	4a4c      	ldr	r2, [pc, #304]	@ (8000e44 <turnLeftAtCross+0x190>)
 8000d12:	88fb      	ldrh	r3, [r7, #6]
 8000d14:	8013      	strh	r3, [r2, #0]
            follow_line_state = FOLLOW_LINE_TURN_LEFT;
 8000d16:	4b4a      	ldr	r3, [pc, #296]	@ (8000e40 <turnLeftAtCross+0x18c>)
 8000d18:	2202      	movs	r2, #2
 8000d1a:	701a      	strb	r2, [r3, #0]
        }

        if (follow_line_state != FOLLOW_LINE_TURN_LEFT)
 8000d1c:	4b48      	ldr	r3, [pc, #288]	@ (8000e40 <turnLeftAtCross+0x18c>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	f040 8085 	bne.w	8000e30 <turnLeftAtCross+0x17c>
        {
            return;
        }

        if (getPulseCount(ENCODER_1) - pulse_count_enc_1 >= PULSE_PER_REVOLUTION / 4 &&
 8000d26:	2000      	movs	r0, #0
 8000d28:	f7ff fe4e 	bl	80009c8 <getPulseCount>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	4b46      	ldr	r3, [pc, #280]	@ (8000e48 <turnLeftAtCross+0x194>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	2b39      	cmp	r3, #57	@ 0x39
 8000d36:	d94a      	bls.n	8000dce <turnLeftAtCross+0x11a>
            getPulseCount(ENCODER_2) - pulse_count_enc_2 >= PULSE_PER_REVOLUTION / 4 &&
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f7ff fe45 	bl	80009c8 <getPulseCount>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	4b42      	ldr	r3, [pc, #264]	@ (8000e4c <turnLeftAtCross+0x198>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	1ad3      	subs	r3, r2, r3
        if (getPulseCount(ENCODER_1) - pulse_count_enc_1 >= PULSE_PER_REVOLUTION / 4 &&
 8000d46:	2b39      	cmp	r3, #57	@ 0x39
 8000d48:	d941      	bls.n	8000dce <turnLeftAtCross+0x11a>
            getPulseCount(ENCODER_3) - pulse_count_enc_3 >= PULSE_PER_REVOLUTION / 4 &&
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f7ff fe3c 	bl	80009c8 <getPulseCount>
 8000d50:	4602      	mov	r2, r0
 8000d52:	4b3f      	ldr	r3, [pc, #252]	@ (8000e50 <turnLeftAtCross+0x19c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	1ad3      	subs	r3, r2, r3
            getPulseCount(ENCODER_2) - pulse_count_enc_2 >= PULSE_PER_REVOLUTION / 4 &&
 8000d58:	2b39      	cmp	r3, #57	@ 0x39
 8000d5a:	d938      	bls.n	8000dce <turnLeftAtCross+0x11a>
            getPulseCount(ENCODER_4) - pulse_count_enc_4 >= PULSE_PER_REVOLUTION / 4)
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	f7ff fe33 	bl	80009c8 <getPulseCount>
 8000d62:	4602      	mov	r2, r0
 8000d64:	4b3b      	ldr	r3, [pc, #236]	@ (8000e54 <turnLeftAtCross+0x1a0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	1ad3      	subs	r3, r2, r3
            getPulseCount(ENCODER_3) - pulse_count_enc_3 >= PULSE_PER_REVOLUTION / 4 &&
 8000d6a:	2b39      	cmp	r3, #57	@ 0x39
 8000d6c:	d92f      	bls.n	8000dce <turnLeftAtCross+0x11a>
        {
            rotateLeft(FOLLOW_LINE_SPEED);
 8000d6e:	2019      	movs	r0, #25
 8000d70:	f000 ffe4 	bl	8001d3c <rotateLeft>
            // if (getLineStatus() == LINE_LEFT2)
            // {
            //     follow_line_state = FOLLOW_LINE;
            // }

            if (getPulseCount(ENCODER_1) - pulse_count_enc_1 >= PULSE_PER_REVOLUTION * 2 / 3 &&
 8000d74:	2000      	movs	r0, #0
 8000d76:	f7ff fe27 	bl	80009c8 <getPulseCount>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	4b32      	ldr	r3, [pc, #200]	@ (8000e48 <turnLeftAtCross+0x194>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b9b      	cmp	r3, #155	@ 0x9b
 8000d84:	d956      	bls.n	8000e34 <turnLeftAtCross+0x180>
                getPulseCount(ENCODER_2) - pulse_count_enc_2 >= PULSE_PER_REVOLUTION * 2 / 3 &&
 8000d86:	2001      	movs	r0, #1
 8000d88:	f7ff fe1e 	bl	80009c8 <getPulseCount>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e4c <turnLeftAtCross+0x198>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	1ad3      	subs	r3, r2, r3
            if (getPulseCount(ENCODER_1) - pulse_count_enc_1 >= PULSE_PER_REVOLUTION * 2 / 3 &&
 8000d94:	2b9b      	cmp	r3, #155	@ 0x9b
 8000d96:	d94d      	bls.n	8000e34 <turnLeftAtCross+0x180>
                getPulseCount(ENCODER_3) - pulse_count_enc_3 >= PULSE_PER_REVOLUTION * 2 / 3 &&
 8000d98:	2002      	movs	r0, #2
 8000d9a:	f7ff fe15 	bl	80009c8 <getPulseCount>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	4b2b      	ldr	r3, [pc, #172]	@ (8000e50 <turnLeftAtCross+0x19c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	1ad3      	subs	r3, r2, r3
                getPulseCount(ENCODER_2) - pulse_count_enc_2 >= PULSE_PER_REVOLUTION * 2 / 3 &&
 8000da6:	2b9b      	cmp	r3, #155	@ 0x9b
 8000da8:	d944      	bls.n	8000e34 <turnLeftAtCross+0x180>
                getPulseCount(ENCODER_4) - pulse_count_enc_4 >= PULSE_PER_REVOLUTION * 2 / 3)
 8000daa:	2003      	movs	r0, #3
 8000dac:	f7ff fe0c 	bl	80009c8 <getPulseCount>
 8000db0:	4602      	mov	r2, r0
 8000db2:	4b28      	ldr	r3, [pc, #160]	@ (8000e54 <turnLeftAtCross+0x1a0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	1ad3      	subs	r3, r2, r3
                getPulseCount(ENCODER_3) - pulse_count_enc_3 >= PULSE_PER_REVOLUTION * 2 / 3 &&
 8000db8:	2b9b      	cmp	r3, #155	@ 0x9b
 8000dba:	d93b      	bls.n	8000e34 <turnLeftAtCross+0x180>
            {
                if (getLineStatus() == LINE_CENTER)
 8000dbc:	f000 fb40 	bl	8001440 <getLineStatus>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d136      	bne.n	8000e34 <turnLeftAtCross+0x180>
                {
                    follow_line_state = FOLLOW_LINE;
 8000dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e40 <turnLeftAtCross+0x18c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
            if (getPulseCount(ENCODER_1) - pulse_count_enc_1 >= PULSE_PER_REVOLUTION * 2 / 3 &&
 8000dcc:	e032      	b.n	8000e34 <turnLeftAtCross+0x180>
                }
            }
        }
        else
        {
            if (getPulseCount(ENCODER_1) - pulse_count_enc_1 >= PULSE_PER_REVOLUTION / 4)
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f7ff fdfa 	bl	80009c8 <getPulseCount>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e48 <turnLeftAtCross+0x194>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	2b39      	cmp	r3, #57	@ 0x39
 8000dde:	d902      	bls.n	8000de6 <turnLeftAtCross+0x132>
            {
                motor1Rotates(0);
 8000de0:	2000      	movs	r0, #0
 8000de2:	f000 fe3f 	bl	8001a64 <motor1Rotates>
            }
            if (getPulseCount(ENCODER_2) - pulse_count_enc_2 >= PULSE_PER_REVOLUTION / 4)
 8000de6:	2001      	movs	r0, #1
 8000de8:	f7ff fdee 	bl	80009c8 <getPulseCount>
 8000dec:	4602      	mov	r2, r0
 8000dee:	4b17      	ldr	r3, [pc, #92]	@ (8000e4c <turnLeftAtCross+0x198>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	2b39      	cmp	r3, #57	@ 0x39
 8000df6:	d902      	bls.n	8000dfe <turnLeftAtCross+0x14a>
            {
                motor2Rotates(0);
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f000 fe5d 	bl	8001ab8 <motor2Rotates>
            }
            if (getPulseCount(ENCODER_3) - pulse_count_enc_3 >= PULSE_PER_REVOLUTION / 4)
 8000dfe:	2002      	movs	r0, #2
 8000e00:	f7ff fde2 	bl	80009c8 <getPulseCount>
 8000e04:	4602      	mov	r2, r0
 8000e06:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <turnLeftAtCross+0x19c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	2b39      	cmp	r3, #57	@ 0x39
 8000e0e:	d902      	bls.n	8000e16 <turnLeftAtCross+0x162>
            {
                motor3Rotates(0);
 8000e10:	2000      	movs	r0, #0
 8000e12:	f000 fe7b 	bl	8001b0c <motor3Rotates>
            }
            if (getPulseCount(ENCODER_4) - pulse_count_enc_4 >= PULSE_PER_REVOLUTION / 4)
 8000e16:	2003      	movs	r0, #3
 8000e18:	f7ff fdd6 	bl	80009c8 <getPulseCount>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e54 <turnLeftAtCross+0x1a0>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	2b39      	cmp	r3, #57	@ 0x39
 8000e26:	d906      	bls.n	8000e36 <turnLeftAtCross+0x182>
            {
                motor4Rotates(0);
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f000 fe97 	bl	8001b5c <motor4Rotates>
 8000e2e:	e002      	b.n	8000e36 <turnLeftAtCross+0x182>
            return;
 8000e30:	bf00      	nop
 8000e32:	e000      	b.n	8000e36 <turnLeftAtCross+0x182>
            if (getPulseCount(ENCODER_1) - pulse_count_enc_1 >= PULSE_PER_REVOLUTION * 2 / 3 &&
 8000e34:	bf00      	nop
            }
        }
    }
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	200000ea 	.word	0x200000ea
 8000e40:	200000e8 	.word	0x200000e8
 8000e44:	200000ec 	.word	0x200000ec
 8000e48:	20000100 	.word	0x20000100
 8000e4c:	20000104 	.word	0x20000104
 8000e50:	20000108 	.word	0x20000108
 8000e54:	2000010c 	.word	0x2000010c

08000e58 <turnAroundAtCross>:

    void turnAroundAtCross(uint16_t cross_num)
    {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	80fb      	strh	r3, [r7, #6]
        static uint32_t pulse_count_enc_1 = 0;
        static uint32_t pulse_count_enc_2 = 0;
        static uint32_t pulse_count_enc_3 = 0;
        static uint32_t pulse_count_enc_4 = 0;

        if (cross_num == cross_count && follow_line_state == FOLLOW_LINE && prev_cross_turn != cross_num) // Execute only once
 8000e62:	4b32      	ldr	r3, [pc, #200]	@ (8000f2c <turnAroundAtCross+0xd4>)
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	88fa      	ldrh	r2, [r7, #6]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d129      	bne.n	8000ec0 <turnAroundAtCross+0x68>
 8000e6c:	4b30      	ldr	r3, [pc, #192]	@ (8000f30 <turnAroundAtCross+0xd8>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d125      	bne.n	8000ec0 <turnAroundAtCross+0x68>
 8000e74:	4b2f      	ldr	r3, [pc, #188]	@ (8000f34 <turnAroundAtCross+0xdc>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	88fa      	ldrh	r2, [r7, #6]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d020      	beq.n	8000ec0 <turnAroundAtCross+0x68>
        {
            pulse_count_enc_1 = getPulseCount(ENCODER_1);
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f7ff fda2 	bl	80009c8 <getPulseCount>
 8000e84:	4603      	mov	r3, r0
 8000e86:	4a2c      	ldr	r2, [pc, #176]	@ (8000f38 <turnAroundAtCross+0xe0>)
 8000e88:	6013      	str	r3, [r2, #0]
            pulse_count_enc_2 = getPulseCount(ENCODER_2);
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f7ff fd9c 	bl	80009c8 <getPulseCount>
 8000e90:	4603      	mov	r3, r0
 8000e92:	4a2a      	ldr	r2, [pc, #168]	@ (8000f3c <turnAroundAtCross+0xe4>)
 8000e94:	6013      	str	r3, [r2, #0]
            pulse_count_enc_3 = getPulseCount(ENCODER_3);
 8000e96:	2002      	movs	r0, #2
 8000e98:	f7ff fd96 	bl	80009c8 <getPulseCount>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4a28      	ldr	r2, [pc, #160]	@ (8000f40 <turnAroundAtCross+0xe8>)
 8000ea0:	6013      	str	r3, [r2, #0]
            pulse_count_enc_4 = getPulseCount(ENCODER_4);
 8000ea2:	2003      	movs	r0, #3
 8000ea4:	f7ff fd90 	bl	80009c8 <getPulseCount>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	4a26      	ldr	r2, [pc, #152]	@ (8000f44 <turnAroundAtCross+0xec>)
 8000eac:	6013      	str	r3, [r2, #0]

            rotateRight(FOLLOW_LINE_SPEED);
 8000eae:	2019      	movs	r0, #25
 8000eb0:	f000 ff5c 	bl	8001d6c <rotateRight>

            prev_cross_turn = cross_num;
 8000eb4:	4a1f      	ldr	r2, [pc, #124]	@ (8000f34 <turnAroundAtCross+0xdc>)
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	8013      	strh	r3, [r2, #0]
            follow_line_state = FOLLOW_LINE_TURN_AROUND;
 8000eba:	4b1d      	ldr	r3, [pc, #116]	@ (8000f30 <turnAroundAtCross+0xd8>)
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	701a      	strb	r2, [r3, #0]
        }

        if (follow_line_state != FOLLOW_LINE_TURN_AROUND)
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f30 <turnAroundAtCross+0xd8>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	d12c      	bne.n	8000f22 <turnAroundAtCross+0xca>
        {
            return;
        }

        if (getPulseCount(ENCODER_1) - pulse_count_enc_1 >= PULSE_PER_REVOLUTION &&
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f7ff fd7d 	bl	80009c8 <getPulseCount>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <turnAroundAtCross+0xe0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2be9      	cmp	r3, #233	@ 0xe9
 8000ed8:	d924      	bls.n	8000f24 <turnAroundAtCross+0xcc>
            getPulseCount(ENCODER_2) - pulse_count_enc_2 >= PULSE_PER_REVOLUTION &&
 8000eda:	2001      	movs	r0, #1
 8000edc:	f7ff fd74 	bl	80009c8 <getPulseCount>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	4b16      	ldr	r3, [pc, #88]	@ (8000f3c <turnAroundAtCross+0xe4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	1ad3      	subs	r3, r2, r3
        if (getPulseCount(ENCODER_1) - pulse_count_enc_1 >= PULSE_PER_REVOLUTION &&
 8000ee8:	2be9      	cmp	r3, #233	@ 0xe9
 8000eea:	d91b      	bls.n	8000f24 <turnAroundAtCross+0xcc>
            getPulseCount(ENCODER_3) - pulse_count_enc_3 >= PULSE_PER_REVOLUTION &&
 8000eec:	2002      	movs	r0, #2
 8000eee:	f7ff fd6b 	bl	80009c8 <getPulseCount>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <turnAroundAtCross+0xe8>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	1ad3      	subs	r3, r2, r3
            getPulseCount(ENCODER_2) - pulse_count_enc_2 >= PULSE_PER_REVOLUTION &&
 8000efa:	2be9      	cmp	r3, #233	@ 0xe9
 8000efc:	d912      	bls.n	8000f24 <turnAroundAtCross+0xcc>
            getPulseCount(ENCODER_4) - pulse_count_enc_4 >= PULSE_PER_REVOLUTION)
 8000efe:	2003      	movs	r0, #3
 8000f00:	f7ff fd62 	bl	80009c8 <getPulseCount>
 8000f04:	4602      	mov	r2, r0
 8000f06:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <turnAroundAtCross+0xec>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	1ad3      	subs	r3, r2, r3
            getPulseCount(ENCODER_3) - pulse_count_enc_3 >= PULSE_PER_REVOLUTION &&
 8000f0c:	2be9      	cmp	r3, #233	@ 0xe9
 8000f0e:	d909      	bls.n	8000f24 <turnAroundAtCross+0xcc>
        {
            if (getLineStatus() == LINE_CENTER)
 8000f10:	f000 fa96 	bl	8001440 <getLineStatus>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d104      	bne.n	8000f24 <turnAroundAtCross+0xcc>
            {
                follow_line_state = FOLLOW_LINE;
 8000f1a:	4b05      	ldr	r3, [pc, #20]	@ (8000f30 <turnAroundAtCross+0xd8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
 8000f20:	e000      	b.n	8000f24 <turnAroundAtCross+0xcc>
            return;
 8000f22:	bf00      	nop
            }
        }
    }
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200000ea 	.word	0x200000ea
 8000f30:	200000e8 	.word	0x200000e8
 8000f34:	200000ec 	.word	0x200000ec
 8000f38:	20000110 	.word	0x20000110
 8000f3c:	20000114 	.word	0x20000114
 8000f40:	20000118 	.word	0x20000118
 8000f44:	2000011c 	.word	0x2000011c

08000f48 <disableFollowLine>:

    void disableFollowLine()
    {
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
        follow_line_state = FOLLOW_LINE_DISABLE;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	@ (8000f5c <disableFollowLine+0x14>)
 8000f4e:	2204      	movs	r2, #4
 8000f50:	701a      	strb	r2, [r3, #0]
    }
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	200000e8 	.word	0x200000e8

08000f60 <enableFollowLine>:
    void enableFollowLine()
    {
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
        follow_line_state = FOLLOW_LINE;
 8000f64:	4b03      	ldr	r3, [pc, #12]	@ (8000f74 <enableFollowLine+0x14>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
    }
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	200000e8 	.word	0x200000e8

08000f78 <getCrossCount>:
    //         }
    //     }
    // }

    uint8_t getCrossCount()
    {
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
        return cross_count;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	@ (8000f8c <getCrossCount+0x14>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	b2db      	uxtb	r3, r3
    }
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200000ea 	.word	0x200000ea

08000f90 <initGamepad>:
     * @brief check if module bluetooth receiver is working
     * @retval STATUS_ERROR if initializing connection fail
     * @retval STATUS_OK if connecting successfully
     */
    enum StatusCode initGamepad()
    {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
        for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8000f96:	2300      	movs	r3, #0
 8000f98:	71fb      	strb	r3, [r7, #7]
 8000f9a:	e010      	b.n	8000fbe <initGamepad+0x2e>
        {
            if (HAL_I2C_IsDeviceReady(&hi2c2, GAMEPAD_I2C_ADDRESS, 3, 50) == HAL_OK)
 8000f9c:	2332      	movs	r3, #50	@ 0x32
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	21aa      	movs	r1, #170	@ 0xaa
 8000fa2:	480b      	ldr	r0, [pc, #44]	@ (8000fd0 <initGamepad+0x40>)
 8000fa4:	f004 feb4 	bl	8005d10 <HAL_I2C_IsDeviceReady>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <initGamepad+0x22>
            {
                return STATUS_OK;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e009      	b.n	8000fc6 <initGamepad+0x36>
            }

            HAL_Delay(50);
 8000fb2:	2032      	movs	r0, #50	@ 0x32
 8000fb4:	f002 ff8c 	bl	8003ed0 <HAL_Delay>
        for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	71fb      	strb	r3, [r7, #7]
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d9eb      	bls.n	8000f9c <initGamepad+0xc>
        }
        return STATUS_ERROR;
 8000fc4:	2300      	movs	r3, #0
    }
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000140 	.word	0x20000140

08000fd4 <readGamepadData>:
     * @brief Read gamepad data
     * @retval STATUS_OK or STATUS_ERROR
     * @note This function is intergrated into get info function, you dont have to use it
     */
    enum StatusCode readGamepadData()
    {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af02      	add	r7, sp, #8
        if (HAL_I2C_Master_Receive(&hi2c2, GAMEPAD_I2C_ADDRESS, gamepad_data, GAMEPAD_DATA_LEN, HAL_MAX_DELAY) == HAL_OK)
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	231e      	movs	r3, #30
 8000fe2:	4a07      	ldr	r2, [pc, #28]	@ (8001000 <readGamepadData+0x2c>)
 8000fe4:	21aa      	movs	r1, #170	@ 0xaa
 8000fe6:	4807      	ldr	r0, [pc, #28]	@ (8001004 <readGamepadData+0x30>)
 8000fe8:	f004 fc26 	bl	8005838 <HAL_I2C_Master_Receive>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <readGamepadData+0x22>
        {
            return STATUS_OK;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <readGamepadData+0x24>
        }
        else
        {
            return STATUS_ERROR;
 8000ff6:	2300      	movs	r3, #0
        }
    }
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000120 	.word	0x20000120
 8001004:	20000140 	.word	0x20000140

08001008 <isGamepadButtonPressed>:
     * @param gamepad_button_id type GamepadButtons. indicate button you want to know whether it's pressed or not
     * @retval 0 if it's NOT pressed
     * @retval 1 if it IS pressed
     */
    uint8_t isGamepadButtonPressed(enum GamepadButtons gamepad_button_id)
    {
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
        switch (gamepad_button_id)
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b0e      	cmp	r3, #14
 8001016:	f200 8099 	bhi.w	800114c <isGamepadButtonPressed+0x144>
 800101a:	a201      	add	r2, pc, #4	@ (adr r2, 8001020 <isGamepadButtonPressed+0x18>)
 800101c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001020:	0800105d 	.word	0x0800105d
 8001024:	0800106d 	.word	0x0800106d
 8001028:	0800107d 	.word	0x0800107d
 800102c:	0800108d 	.word	0x0800108d
 8001030:	0800109d 	.word	0x0800109d
 8001034:	080010ad 	.word	0x080010ad
 8001038:	080010bd 	.word	0x080010bd
 800103c:	080010cd 	.word	0x080010cd
 8001040:	080010dd 	.word	0x080010dd
 8001044:	080010ed 	.word	0x080010ed
 8001048:	080010fd 	.word	0x080010fd
 800104c:	0800110d 	.word	0x0800110d
 8001050:	0800112d 	.word	0x0800112d
 8001054:	0800113d 	.word	0x0800113d
 8001058:	0800111d 	.word	0x0800111d
        {
        case BUTTON_UP:
        {
            return (gamepad_data[1] == 0x01);
 800105c:	4b3e      	ldr	r3, [pc, #248]	@ (8001158 <isGamepadButtonPressed+0x150>)
 800105e:	785b      	ldrb	r3, [r3, #1]
 8001060:	2b01      	cmp	r3, #1
 8001062:	bf0c      	ite	eq
 8001064:	2301      	moveq	r3, #1
 8001066:	2300      	movne	r3, #0
 8001068:	b2db      	uxtb	r3, r3
 800106a:	e070      	b.n	800114e <isGamepadButtonPressed+0x146>
            break;
        }
        case BUTTON_DOWN:
        {
            return (gamepad_data[1] == 0x02);
 800106c:	4b3a      	ldr	r3, [pc, #232]	@ (8001158 <isGamepadButtonPressed+0x150>)
 800106e:	785b      	ldrb	r3, [r3, #1]
 8001070:	2b02      	cmp	r3, #2
 8001072:	bf0c      	ite	eq
 8001074:	2301      	moveq	r3, #1
 8001076:	2300      	movne	r3, #0
 8001078:	b2db      	uxtb	r3, r3
 800107a:	e068      	b.n	800114e <isGamepadButtonPressed+0x146>
            break;
        }
        case BUTTON_RIGHT:
        {
            return (gamepad_data[1] == 0x04);
 800107c:	4b36      	ldr	r3, [pc, #216]	@ (8001158 <isGamepadButtonPressed+0x150>)
 800107e:	785b      	ldrb	r3, [r3, #1]
 8001080:	2b04      	cmp	r3, #4
 8001082:	bf0c      	ite	eq
 8001084:	2301      	moveq	r3, #1
 8001086:	2300      	movne	r3, #0
 8001088:	b2db      	uxtb	r3, r3
 800108a:	e060      	b.n	800114e <isGamepadButtonPressed+0x146>
            break;
        }
        case BUTTON_LEFT:
        {
            return (gamepad_data[1] == 0x08);
 800108c:	4b32      	ldr	r3, [pc, #200]	@ (8001158 <isGamepadButtonPressed+0x150>)
 800108e:	785b      	ldrb	r3, [r3, #1]
 8001090:	2b08      	cmp	r3, #8
 8001092:	bf0c      	ite	eq
 8001094:	2301      	moveq	r3, #1
 8001096:	2300      	movne	r3, #0
 8001098:	b2db      	uxtb	r3, r3
 800109a:	e058      	b.n	800114e <isGamepadButtonPressed+0x146>
            break;
        }

        case BUTTON_CROSS:
        {
            return (gamepad_data[27] == 0x01);
 800109c:	4b2e      	ldr	r3, [pc, #184]	@ (8001158 <isGamepadButtonPressed+0x150>)
 800109e:	7edb      	ldrb	r3, [r3, #27]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	bf0c      	ite	eq
 80010a4:	2301      	moveq	r3, #1
 80010a6:	2300      	movne	r3, #0
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	e050      	b.n	800114e <isGamepadButtonPressed+0x146>
            break;
        }
        case BUTTON_CIRCLE:
        {
            return (gamepad_data[27] == 0x02);
 80010ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001158 <isGamepadButtonPressed+0x150>)
 80010ae:	7edb      	ldrb	r3, [r3, #27]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	bf0c      	ite	eq
 80010b4:	2301      	moveq	r3, #1
 80010b6:	2300      	movne	r3, #0
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	e048      	b.n	800114e <isGamepadButtonPressed+0x146>
            break;
        }
        case BUTTON_SQUARE:
        {
            return (gamepad_data[27] == 0x04);
 80010bc:	4b26      	ldr	r3, [pc, #152]	@ (8001158 <isGamepadButtonPressed+0x150>)
 80010be:	7edb      	ldrb	r3, [r3, #27]
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	bf0c      	ite	eq
 80010c4:	2301      	moveq	r3, #1
 80010c6:	2300      	movne	r3, #0
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	e040      	b.n	800114e <isGamepadButtonPressed+0x146>
            break;
        }
        case BUTTON_TRIANGLE:
        {
            return (gamepad_data[27] == 0x08);
 80010cc:	4b22      	ldr	r3, [pc, #136]	@ (8001158 <isGamepadButtonPressed+0x150>)
 80010ce:	7edb      	ldrb	r3, [r3, #27]
 80010d0:	2b08      	cmp	r3, #8
 80010d2:	bf0c      	ite	eq
 80010d4:	2301      	moveq	r3, #1
 80010d6:	2300      	movne	r3, #0
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	e038      	b.n	800114e <isGamepadButtonPressed+0x146>
            break;
        }

        case BUTTON_L1:
        {
            return (gamepad_data[27] == 0x10);
 80010dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001158 <isGamepadButtonPressed+0x150>)
 80010de:	7edb      	ldrb	r3, [r3, #27]
 80010e0:	2b10      	cmp	r3, #16
 80010e2:	bf0c      	ite	eq
 80010e4:	2301      	moveq	r3, #1
 80010e6:	2300      	movne	r3, #0
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	e030      	b.n	800114e <isGamepadButtonPressed+0x146>
            break;
        }
        case BUTTON_L2:
        {
            return (gamepad_data[27] == 0x40);
 80010ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001158 <isGamepadButtonPressed+0x150>)
 80010ee:	7edb      	ldrb	r3, [r3, #27]
 80010f0:	2b40      	cmp	r3, #64	@ 0x40
 80010f2:	bf0c      	ite	eq
 80010f4:	2301      	moveq	r3, #1
 80010f6:	2300      	movne	r3, #0
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	e028      	b.n	800114e <isGamepadButtonPressed+0x146>
            break;
        }

        case BUTTON_R1:
        {
            return (gamepad_data[27] == 0x20);
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <isGamepadButtonPressed+0x150>)
 80010fe:	7edb      	ldrb	r3, [r3, #27]
 8001100:	2b20      	cmp	r3, #32
 8001102:	bf0c      	ite	eq
 8001104:	2301      	moveq	r3, #1
 8001106:	2300      	movne	r3, #0
 8001108:	b2db      	uxtb	r3, r3
 800110a:	e020      	b.n	800114e <isGamepadButtonPressed+0x146>
            break;
        }
        case BUTTON_R2:
        {
            return (gamepad_data[27] == 0x80);
 800110c:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <isGamepadButtonPressed+0x150>)
 800110e:	7edb      	ldrb	r3, [r3, #27]
 8001110:	2b80      	cmp	r3, #128	@ 0x80
 8001112:	bf0c      	ite	eq
 8001114:	2301      	moveq	r3, #1
 8001116:	2300      	movne	r3, #0
 8001118:	b2db      	uxtb	r3, r3
 800111a:	e018      	b.n	800114e <isGamepadButtonPressed+0x146>
            break;
        }

        case BUTTON_MAIN:
        {
            return (gamepad_data[29] == 0x01);
 800111c:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <isGamepadButtonPressed+0x150>)
 800111e:	7f5b      	ldrb	r3, [r3, #29]
 8001120:	2b01      	cmp	r3, #1
 8001122:	bf0c      	ite	eq
 8001124:	2301      	moveq	r3, #1
 8001126:	2300      	movne	r3, #0
 8001128:	b2db      	uxtb	r3, r3
 800112a:	e010      	b.n	800114e <isGamepadButtonPressed+0x146>
            break;
        }
        case BUTTON_SHARE:
        {
            return (gamepad_data[29] == 0x02);
 800112c:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <isGamepadButtonPressed+0x150>)
 800112e:	7f5b      	ldrb	r3, [r3, #29]
 8001130:	2b02      	cmp	r3, #2
 8001132:	bf0c      	ite	eq
 8001134:	2301      	moveq	r3, #1
 8001136:	2300      	movne	r3, #0
 8001138:	b2db      	uxtb	r3, r3
 800113a:	e008      	b.n	800114e <isGamepadButtonPressed+0x146>
            break;
        }
        case BUTTON_OPTIONS:
        {
            return (gamepad_data[29] == 0x04);
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <isGamepadButtonPressed+0x150>)
 800113e:	7f5b      	ldrb	r3, [r3, #29]
 8001140:	2b04      	cmp	r3, #4
 8001142:	bf0c      	ite	eq
 8001144:	2301      	moveq	r3, #1
 8001146:	2300      	movne	r3, #0
 8001148:	b2db      	uxtb	r3, r3
 800114a:	e000      	b.n	800114e <isGamepadButtonPressed+0x146>
            break;
        }

        default:
        {
            return 0;
 800114c:	2300      	movs	r3, #0
            break;
        }
        }
    }
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	20000120 	.word	0x20000120

0800115c <getGamepadData>:
    /**
     * @note This function should be used for debugging only.
     * @return An 8 bits array signal from reciver module
     */
    const uint8_t *getGamepadData()
    {
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
        return gamepad_data;
 8001160:	4b02      	ldr	r3, [pc, #8]	@ (800116c <getGamepadData+0x10>)
    }
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000120 	.word	0x20000120

08001170 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001176:	f107 0310 	add.w	r3, r7, #16
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001184:	4b4b      	ldr	r3, [pc, #300]	@ (80012b4 <MX_GPIO_Init+0x144>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a4a      	ldr	r2, [pc, #296]	@ (80012b4 <MX_GPIO_Init+0x144>)
 800118a:	f043 0310 	orr.w	r3, r3, #16
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b48      	ldr	r3, [pc, #288]	@ (80012b4 <MX_GPIO_Init+0x144>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0310 	and.w	r3, r3, #16
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800119c:	4b45      	ldr	r3, [pc, #276]	@ (80012b4 <MX_GPIO_Init+0x144>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	4a44      	ldr	r2, [pc, #272]	@ (80012b4 <MX_GPIO_Init+0x144>)
 80011a2:	f043 0320 	orr.w	r3, r3, #32
 80011a6:	6193      	str	r3, [r2, #24]
 80011a8:	4b42      	ldr	r3, [pc, #264]	@ (80012b4 <MX_GPIO_Init+0x144>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f003 0320 	and.w	r3, r3, #32
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	4b3f      	ldr	r3, [pc, #252]	@ (80012b4 <MX_GPIO_Init+0x144>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a3e      	ldr	r2, [pc, #248]	@ (80012b4 <MX_GPIO_Init+0x144>)
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b3c      	ldr	r3, [pc, #240]	@ (80012b4 <MX_GPIO_Init+0x144>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011cc:	4b39      	ldr	r3, [pc, #228]	@ (80012b4 <MX_GPIO_Init+0x144>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4a38      	ldr	r2, [pc, #224]	@ (80012b4 <MX_GPIO_Init+0x144>)
 80011d2:	f043 0308 	orr.w	r3, r3, #8
 80011d6:	6193      	str	r3, [r2, #24]
 80011d8:	4b36      	ldr	r3, [pc, #216]	@ (80012b4 <MX_GPIO_Init+0x144>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f003 0308 	and.w	r3, r3, #8
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M1_DIR_Pin|M2_DIR_Pin|LED_DEBUG_Pin|LED_LATCH_Pin, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80011ea:	4833      	ldr	r0, [pc, #204]	@ (80012b8 <MX_GPIO_Init+0x148>)
 80011ec:	f004 f9af 	bl	800554e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M4_DIR_Pin|LED_EN_Pin|LED7_EN2_Pin|LED7_EN1_Pin
 80011f0:	2200      	movs	r2, #0
 80011f2:	f649 1102 	movw	r1, #39170	@ 0x9902
 80011f6:	4831      	ldr	r0, [pc, #196]	@ (80012bc <MX_GPIO_Init+0x14c>)
 80011f8:	f004 f9a9 	bl	800554e <HAL_GPIO_WritePin>
                          |INPUT_LOAD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M3_DIR_Pin|SM_DIR_Pin, GPIO_PIN_RESET);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2124      	movs	r1, #36	@ 0x24
 8001200:	482f      	ldr	r0, [pc, #188]	@ (80012c0 <MX_GPIO_Init+0x150>)
 8001202:	f004 f9a4 	bl	800554e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_DIR_Pin M2_DIR_Pin LED_DEBUG_Pin LED_LATCH_Pin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M2_DIR_Pin|LED_DEBUG_Pin|LED_LATCH_Pin;
 8001206:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800120a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2302      	movs	r3, #2
 8001216:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	4619      	mov	r1, r3
 800121e:	4826      	ldr	r0, [pc, #152]	@ (80012b8 <MX_GPIO_Init+0x148>)
 8001220:	f003 ffea 	bl	80051f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : M4_DIR_Pin LED_EN_Pin LED7_EN2_Pin LED7_EN1_Pin
                           INPUT_LOAD_Pin */
  GPIO_InitStruct.Pin = M4_DIR_Pin|LED_EN_Pin|LED7_EN2_Pin|LED7_EN1_Pin
 8001224:	f649 1302 	movw	r3, #39170	@ 0x9902
 8001228:	613b      	str	r3, [r7, #16]
                          |INPUT_LOAD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2302      	movs	r3, #2
 8001234:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	4619      	mov	r1, r3
 800123c:	481f      	ldr	r0, [pc, #124]	@ (80012bc <MX_GPIO_Init+0x14c>)
 800123e:	f003 ffdb 	bl	80051f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : M3_DIR_Pin SM_DIR_Pin */
  GPIO_InitStruct.Pin = M3_DIR_Pin|SM_DIR_Pin;
 8001242:	2324      	movs	r3, #36	@ 0x24
 8001244:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001246:	2301      	movs	r3, #1
 8001248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2302      	movs	r3, #2
 8001250:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001252:	f107 0310 	add.w	r3, r7, #16
 8001256:	4619      	mov	r1, r3
 8001258:	4819      	ldr	r0, [pc, #100]	@ (80012c0 <MX_GPIO_Init+0x150>)
 800125a:	f003 ffcd 	bl	80051f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER3_B_Pin ENCODER3_A_Pin ENCODER4_B_Pin ENCODER4_A_Pin
                           SM_FAULT_Pin ENCODER1_A_Pin */
  GPIO_InitStruct.Pin = ENCODER3_B_Pin|ENCODER3_A_Pin|ENCODER4_B_Pin|ENCODER4_A_Pin
 800125e:	f24f 2308 	movw	r3, #61960	@ 0xf208
 8001262:	613b      	str	r3, [r7, #16]
                          |SM_FAULT_Pin|ENCODER1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	4619      	mov	r1, r3
 8001272:	4813      	ldr	r0, [pc, #76]	@ (80012c0 <MX_GPIO_Init+0x150>)
 8001274:	f003 ffc0 	bl	80051f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER2_A_Pin ENCODER2_B_Pin */
  GPIO_InitStruct.Pin = ENCODER2_A_Pin|ENCODER2_B_Pin;
 8001278:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800127c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001286:	f107 0310 	add.w	r3, r7, #16
 800128a:	4619      	mov	r1, r3
 800128c:	480a      	ldr	r0, [pc, #40]	@ (80012b8 <MX_GPIO_Init+0x148>)
 800128e:	f003 ffb3 	bl	80051f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER1_B_Pin */
  GPIO_InitStruct.Pin = ENCODER1_B_Pin;
 8001292:	2304      	movs	r3, #4
 8001294:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENCODER1_B_GPIO_Port, &GPIO_InitStruct);
 800129e:	f107 0310 	add.w	r3, r7, #16
 80012a2:	4619      	mov	r1, r3
 80012a4:	4807      	ldr	r0, [pc, #28]	@ (80012c4 <MX_GPIO_Init+0x154>)
 80012a6:	f003 ffa7 	bl	80051f8 <HAL_GPIO_Init>

}
 80012aa:	bf00      	nop
 80012ac:	3720      	adds	r7, #32
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40011000 	.word	0x40011000
 80012bc:	40010800 	.word	0x40010800
 80012c0:	40010c00 	.word	0x40010c00
 80012c4:	40011400 	.word	0x40011400

080012c8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012cc:	4b12      	ldr	r3, [pc, #72]	@ (8001318 <MX_I2C2_Init+0x50>)
 80012ce:	4a13      	ldr	r2, [pc, #76]	@ (800131c <MX_I2C2_Init+0x54>)
 80012d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80012d2:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <MX_I2C2_Init+0x50>)
 80012d4:	4a12      	ldr	r2, [pc, #72]	@ (8001320 <MX_I2C2_Init+0x58>)
 80012d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <MX_I2C2_Init+0x50>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80012de:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <MX_I2C2_Init+0x50>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <MX_I2C2_Init+0x50>)
 80012e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012ea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001318 <MX_I2C2_Init+0x50>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <MX_I2C2_Init+0x50>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f8:	4b07      	ldr	r3, [pc, #28]	@ (8001318 <MX_I2C2_Init+0x50>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012fe:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <MX_I2C2_Init+0x50>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001304:	4804      	ldr	r0, [pc, #16]	@ (8001318 <MX_I2C2_Init+0x50>)
 8001306:	f004 f953 	bl	80055b0 <HAL_I2C_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001310:	f000 fa49 	bl	80017a6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000140 	.word	0x20000140
 800131c:	40005800 	.word	0x40005800
 8001320:	000186a0 	.word	0x000186a0

08001324 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a16      	ldr	r2, [pc, #88]	@ (8001398 <HAL_I2C_MspInit+0x74>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d124      	bne.n	800138e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001344:	4b15      	ldr	r3, [pc, #84]	@ (800139c <HAL_I2C_MspInit+0x78>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4a14      	ldr	r2, [pc, #80]	@ (800139c <HAL_I2C_MspInit+0x78>)
 800134a:	f043 0308 	orr.w	r3, r3, #8
 800134e:	6193      	str	r3, [r2, #24]
 8001350:	4b12      	ldr	r3, [pc, #72]	@ (800139c <HAL_I2C_MspInit+0x78>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800135c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001360:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001362:	2312      	movs	r3, #18
 8001364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001366:	2303      	movs	r3, #3
 8001368:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136a:	f107 0310 	add.w	r3, r7, #16
 800136e:	4619      	mov	r1, r3
 8001370:	480b      	ldr	r0, [pc, #44]	@ (80013a0 <HAL_I2C_MspInit+0x7c>)
 8001372:	f003 ff41 	bl	80051f8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001376:	4b09      	ldr	r3, [pc, #36]	@ (800139c <HAL_I2C_MspInit+0x78>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	4a08      	ldr	r2, [pc, #32]	@ (800139c <HAL_I2C_MspInit+0x78>)
 800137c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001380:	61d3      	str	r3, [r2, #28]
 8001382:	4b06      	ldr	r3, [pc, #24]	@ (800139c <HAL_I2C_MspInit+0x78>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800138e:	bf00      	nop
 8001390:	3720      	adds	r7, #32
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40005800 	.word	0x40005800
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010c00 	.word	0x40010c00

080013a4 <calibSensor>:
	 * @brief Sensor calibration function
	 * @note This function should be called once to calibrate the sensors
	 * @note This function should be called when the sensors are in black square
	 */
	enum StatusCode calibSensor()
	{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 80013aa:	2300      	movs	r3, #0
 80013ac:	71fb      	strb	r3, [r7, #7]
 80013ae:	e00f      	b.n	80013d0 <calibSensor+0x2c>
		{
			if (HAL_ADC_Start_DMA(&hadc1, (void *)sensor_calib, 8) == HAL_OK)
 80013b0:	2208      	movs	r2, #8
 80013b2:	490b      	ldr	r1, [pc, #44]	@ (80013e0 <calibSensor+0x3c>)
 80013b4:	480b      	ldr	r0, [pc, #44]	@ (80013e4 <calibSensor+0x40>)
 80013b6:	f002 fe99 	bl	80040ec <HAL_ADC_Start_DMA>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <calibSensor+0x20>
			{
				return STATUS_OK;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e009      	b.n	80013d8 <calibSensor+0x34>
			}
			HAL_Delay(50);
 80013c4:	2032      	movs	r0, #50	@ 0x32
 80013c6:	f002 fd83 	bl	8003ed0 <HAL_Delay>
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	3301      	adds	r3, #1
 80013ce:	71fb      	strb	r3, [r7, #7]
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d9ec      	bls.n	80013b0 <calibSensor+0xc>
		}
		return STATUS_ERROR;
 80013d6:	2300      	movs	r3, #0
	}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000194 	.word	0x20000194
 80013e4:	20000050 	.word	0x20000050

080013e8 <scanSensor>:
	 * @note This function should be called after calibSensor()
	 * @note This function should be called in a loop
	 */

	enum StatusCode scanSensor()
	{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 80013ee:	2300      	movs	r3, #0
 80013f0:	71fb      	strb	r3, [r7, #7]
 80013f2:	e016      	b.n	8001422 <scanSensor+0x3a>
		{
			if (HAL_ADC_Start_DMA(&hadc1, (void *)sensor_buffer, 8) == HAL_OK)
 80013f4:	2208      	movs	r2, #8
 80013f6:	490f      	ldr	r1, [pc, #60]	@ (8001434 <scanSensor+0x4c>)
 80013f8:	480f      	ldr	r0, [pc, #60]	@ (8001438 <scanSensor+0x50>)
 80013fa:	f002 fe77 	bl	80040ec <HAL_ADC_Start_DMA>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d108      	bne.n	8001416 <scanSensor+0x2e>
			{
				sensor_states = processSensorBuffer(sensor_buffer);
 8001404:	480b      	ldr	r0, [pc, #44]	@ (8001434 <scanSensor+0x4c>)
 8001406:	f000 f90d 	bl	8001624 <processSensorBuffer>
 800140a:	4603      	mov	r3, r0
 800140c:	461a      	mov	r2, r3
 800140e:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <scanSensor+0x54>)
 8001410:	701a      	strb	r2, [r3, #0]

				return STATUS_OK;
 8001412:	2301      	movs	r3, #1
 8001414:	e009      	b.n	800142a <scanSensor+0x42>
			}
			HAL_Delay(50);
 8001416:	2032      	movs	r0, #50	@ 0x32
 8001418:	f002 fd5a 	bl	8003ed0 <HAL_Delay>
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	3301      	adds	r3, #1
 8001420:	71fb      	strb	r3, [r7, #7]
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d9e5      	bls.n	80013f4 <scanSensor+0xc>
		}
		return STATUS_ERROR;
 8001428:	2300      	movs	r3, #0
	}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200001a4 	.word	0x200001a4
 8001438:	20000050 	.word	0x20000050
 800143c:	200001b4 	.word	0x200001b4

08001440 <getLineStatus>:
	 * @brief Get the line status
	 * @return LineStatus
	 * @note This function should be called after SensorScan()
	 */
	enum LineStatus getLineStatus()
	{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
		enum LineStatus line_status = LINE_END;
 8001446:	2300      	movs	r3, #0
 8001448:	71fb      	strb	r3, [r7, #7]

		switch (sensor_states & 0b01111110)
 800144a:	4b66      	ldr	r3, [pc, #408]	@ (80015e4 <getLineStatus+0x1a4>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001452:	2b7e      	cmp	r3, #126	@ 0x7e
 8001454:	f000 809b 	beq.w	800158e <getLineStatus+0x14e>
 8001458:	2b7e      	cmp	r3, #126	@ 0x7e
 800145a:	f300 80b9 	bgt.w	80015d0 <getLineStatus+0x190>
 800145e:	2b70      	cmp	r3, #112	@ 0x70
 8001460:	f000 80b0 	beq.w	80015c4 <getLineStatus+0x184>
 8001464:	2b70      	cmp	r3, #112	@ 0x70
 8001466:	f300 80b3 	bgt.w	80015d0 <getLineStatus+0x190>
 800146a:	2b40      	cmp	r3, #64	@ 0x40
 800146c:	f300 808c 	bgt.w	8001588 <getLineStatus+0x148>
 8001470:	2b00      	cmp	r3, #0
 8001472:	f2c0 80ad 	blt.w	80015d0 <getLineStatus+0x190>
 8001476:	2b40      	cmp	r3, #64	@ 0x40
 8001478:	f200 80aa 	bhi.w	80015d0 <getLineStatus+0x190>
 800147c:	a201      	add	r2, pc, #4	@ (adr r2, 8001484 <getLineStatus+0x44>)
 800147e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001482:	bf00      	nop
 8001484:	08001595 	.word	0x08001595
 8001488:	080015d1 	.word	0x080015d1
 800148c:	080015b3 	.word	0x080015b3
 8001490:	080015d1 	.word	0x080015d1
 8001494:	080015d1 	.word	0x080015d1
 8001498:	080015d1 	.word	0x080015d1
 800149c:	080015a7 	.word	0x080015a7
 80014a0:	080015d1 	.word	0x080015d1
 80014a4:	080015d1 	.word	0x080015d1
 80014a8:	080015d1 	.word	0x080015d1
 80014ac:	080015d1 	.word	0x080015d1
 80014b0:	080015d1 	.word	0x080015d1
 80014b4:	080015a1 	.word	0x080015a1
 80014b8:	080015d1 	.word	0x080015d1
 80014bc:	080015ad 	.word	0x080015ad
 80014c0:	080015d1 	.word	0x080015d1
 80014c4:	080015d1 	.word	0x080015d1
 80014c8:	080015d1 	.word	0x080015d1
 80014cc:	080015d1 	.word	0x080015d1
 80014d0:	080015d1 	.word	0x080015d1
 80014d4:	080015d1 	.word	0x080015d1
 80014d8:	080015d1 	.word	0x080015d1
 80014dc:	080015d1 	.word	0x080015d1
 80014e0:	080015d1 	.word	0x080015d1
 80014e4:	0800159b 	.word	0x0800159b
 80014e8:	080015d1 	.word	0x080015d1
 80014ec:	080015d1 	.word	0x080015d1
 80014f0:	080015d1 	.word	0x080015d1
 80014f4:	080015a1 	.word	0x080015a1
 80014f8:	080015d1 	.word	0x080015d1
 80014fc:	080015d1 	.word	0x080015d1
 8001500:	080015d1 	.word	0x080015d1
 8001504:	080015d1 	.word	0x080015d1
 8001508:	080015d1 	.word	0x080015d1
 800150c:	080015d1 	.word	0x080015d1
 8001510:	080015d1 	.word	0x080015d1
 8001514:	080015d1 	.word	0x080015d1
 8001518:	080015d1 	.word	0x080015d1
 800151c:	080015d1 	.word	0x080015d1
 8001520:	080015d1 	.word	0x080015d1
 8001524:	080015d1 	.word	0x080015d1
 8001528:	080015d1 	.word	0x080015d1
 800152c:	080015d1 	.word	0x080015d1
 8001530:	080015d1 	.word	0x080015d1
 8001534:	080015d1 	.word	0x080015d1
 8001538:	080015d1 	.word	0x080015d1
 800153c:	080015d1 	.word	0x080015d1
 8001540:	080015d1 	.word	0x080015d1
 8001544:	080015b9 	.word	0x080015b9
 8001548:	080015d1 	.word	0x080015d1
 800154c:	080015d1 	.word	0x080015d1
 8001550:	080015d1 	.word	0x080015d1
 8001554:	080015d1 	.word	0x080015d1
 8001558:	080015d1 	.word	0x080015d1
 800155c:	080015d1 	.word	0x080015d1
 8001560:	080015d1 	.word	0x080015d1
 8001564:	080015b9 	.word	0x080015b9
 8001568:	080015d1 	.word	0x080015d1
 800156c:	080015d1 	.word	0x080015d1
 8001570:	080015d1 	.word	0x080015d1
 8001574:	080015d1 	.word	0x080015d1
 8001578:	080015d1 	.word	0x080015d1
 800157c:	080015d1 	.word	0x080015d1
 8001580:	080015d1 	.word	0x080015d1
 8001584:	080015cb 	.word	0x080015cb
 8001588:	2b60      	cmp	r3, #96	@ 0x60
 800158a:	d018      	beq.n	80015be <getLineStatus+0x17e>
 800158c:	e020      	b.n	80015d0 <getLineStatus+0x190>
		{
		case 0b01111110:
		{
			line_status = LINE_CROSS;
 800158e:	2301      	movs	r3, #1
 8001590:	71fb      	strb	r3, [r7, #7]
			break;
 8001592:	e020      	b.n	80015d6 <getLineStatus+0x196>
		}
		case 0b00000000:
		{
			line_status = LINE_END;
 8001594:	2300      	movs	r3, #0
 8001596:	71fb      	strb	r3, [r7, #7]
			break;
 8001598:	e01d      	b.n	80015d6 <getLineStatus+0x196>
		}
		case 0b00011000:
		{
			line_status = LINE_CENTER;
 800159a:	2302      	movs	r3, #2
 800159c:	71fb      	strb	r3, [r7, #7]
			break;
 800159e:	e01a      	b.n	80015d6 <getLineStatus+0x196>
		}

		case 0b00001100:
		case 0b00011100:
		{
			line_status = LINE_RIGHT1;
 80015a0:	2303      	movs	r3, #3
 80015a2:	71fb      	strb	r3, [r7, #7]
			break;
 80015a4:	e017      	b.n	80015d6 <getLineStatus+0x196>
		}

		case 0b00000110:
		{
			line_status = LINE_RIGHT2;
 80015a6:	2304      	movs	r3, #4
 80015a8:	71fb      	strb	r3, [r7, #7]
			break;
 80015aa:	e014      	b.n	80015d6 <getLineStatus+0x196>
		}
		case 0b00001110:
		{
			line_status = LINE_RIGHT2;
 80015ac:	2304      	movs	r3, #4
 80015ae:	71fb      	strb	r3, [r7, #7]
			break;
 80015b0:	e011      	b.n	80015d6 <getLineStatus+0x196>
		}

		case 0b00000010:
		{
			line_status = LINE_RIGHT3;
 80015b2:	2305      	movs	r3, #5
 80015b4:	71fb      	strb	r3, [r7, #7]
			break;
 80015b6:	e00e      	b.n	80015d6 <getLineStatus+0x196>
		}

		case 0b00110000:
		case 0b00111000:
		{
			line_status = LINE_LEFT1;
 80015b8:	2306      	movs	r3, #6
 80015ba:	71fb      	strb	r3, [r7, #7]
			break;
 80015bc:	e00b      	b.n	80015d6 <getLineStatus+0x196>
		}

		case 0b01100000:
		{
			line_status = LINE_LEFT2;
 80015be:	2307      	movs	r3, #7
 80015c0:	71fb      	strb	r3, [r7, #7]
			break;
 80015c2:	e008      	b.n	80015d6 <getLineStatus+0x196>
		}
		case 0b01110000:
		{
			line_status = LINE_LEFT2;
 80015c4:	2307      	movs	r3, #7
 80015c6:	71fb      	strb	r3, [r7, #7]
			break;
 80015c8:	e005      	b.n	80015d6 <getLineStatus+0x196>
		}
		case 0b01000000:
		{
			line_status = LINE_LEFT3;
 80015ca:	2308      	movs	r3, #8
 80015cc:	71fb      	strb	r3, [r7, #7]
			break;
 80015ce:	e002      	b.n	80015d6 <getLineStatus+0x196>
		}
		default:
		{
			line_status = LINE_ERROR;
 80015d0:	2309      	movs	r3, #9
 80015d2:	71fb      	strb	r3, [r7, #7]
			break;
 80015d4:	bf00      	nop
		}
		}

		return line_status;
 80015d6:	79fb      	ldrb	r3, [r7, #7]
	}
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	200001b4 	.word	0x200001b4

080015e8 <getSensorState>:

	/**
	 * @brief These function should be used for debugging line sensor
	 */
	uint8_t getSensorState()
	{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
		return sensor_states;
 80015ec:	4b02      	ldr	r3, [pc, #8]	@ (80015f8 <getSensorState+0x10>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
	}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	200001b4 	.word	0x200001b4

080015fc <getSensorCalibValue>:
	const uint16_t *getSensorCalibValue()
	{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
		return sensor_calib;
 8001600:	4b02      	ldr	r3, [pc, #8]	@ (800160c <getSensorCalibValue+0x10>)
	}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	20000194 	.word	0x20000194

08001610 <getSensorValue>:
	const uint16_t *getSensorValue()
	{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
		return sensor_buffer;
 8001614:	4b02      	ldr	r3, [pc, #8]	@ (8001620 <getSensorValue+0x10>)
	}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	200001a4 	.word	0x200001a4

08001624 <processSensorBuffer>:

	/**
	 * @brief Private function to process the sensor buffer
	 */
	uint8_t processSensorBuffer(const uint16_t *sensor_bf)
	{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
		uint8_t states = 0b00000000;
 800162c:	2300      	movs	r3, #0
 800162e:	73fb      	strb	r3, [r7, #15]

		for (int i = 0; i < NUMBER_OF_SENSORS; ++i)
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	e023      	b.n	800167e <processSensorBuffer+0x5a>
		{
			if ((sensor_bf[i] < (sensor_calib[i] - SENSOR_LINE_DELTA)) || (sensor_bf[i] > (sensor_calib[i] + SENSOR_LINE_DELTA)))
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	4619      	mov	r1, r3
 8001642:	4a13      	ldr	r2, [pc, #76]	@ (8001690 <processSensorBuffer+0x6c>)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800164a:	3bc8      	subs	r3, #200	@ 0xc8
 800164c:	4299      	cmp	r1, r3
 800164e:	db0c      	blt.n	800166a <processSensorBuffer+0x46>
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	4413      	add	r3, r2
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	4619      	mov	r1, r3
 800165c:	4a0c      	ldr	r2, [pc, #48]	@ (8001690 <processSensorBuffer+0x6c>)
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001664:	33c8      	adds	r3, #200	@ 0xc8
 8001666:	4299      	cmp	r1, r3
 8001668:	dd06      	ble.n	8001678 <processSensorBuffer+0x54>
			{
				states |= sensor_map[i];
 800166a:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <processSensorBuffer+0x70>)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	4413      	add	r3, r2
 8001670:	781a      	ldrb	r2, [r3, #0]
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	4313      	orrs	r3, r2
 8001676:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i < NUMBER_OF_SENSORS; ++i)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	3301      	adds	r3, #1
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	2b07      	cmp	r3, #7
 8001682:	ddd8      	ble.n	8001636 <processSensorBuffer+0x12>
			}
		}

		return states;
 8001684:	7bfb      	ldrb	r3, [r7, #15]
	}
 8001686:	4618      	mov	r0, r3
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	20000194 	.word	0x20000194
 8001694:	08009c20 	.word	0x08009c20

08001698 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800169c:	f002 fbb6 	bl	8003e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a0:	f000 f824 	bl	80016ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a4:	f7ff fd64 	bl	8001170 <MX_GPIO_Init>
  MX_DMA_Init();
 80016a8:	f7ff f91a 	bl	80008e0 <MX_DMA_Init>
  MX_TIM4_Init();
 80016ac:	f001 fe4c 	bl	8003348 <MX_TIM4_Init>
  MX_TIM2_Init();
 80016b0:	f001 fd88 	bl	80031c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80016b4:	f001 fdd2 	bl	800325c <MX_TIM3_Init>
  MX_TIM8_Init();
 80016b8:	f001 ff4a 	bl	8003550 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80016bc:	f002 fa1c 	bl	8003af8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80016c0:	f002 fa44 	bl	8003b4c <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80016c4:	f001 fece 	bl	8003464 <MX_TIM5_Init>
  MX_SPI1_Init();
 80016c8:	f001 fb36 	bl	8002d38 <MX_SPI1_Init>
  MX_ADC1_Init();
 80016cc:	f7fe fdb2 	bl	8000234 <MX_ADC1_Init>
  MX_I2C2_Init();
 80016d0:	f7ff fdfa 	bl	80012c8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  displayLed7Seg((uint8_t)getModeId());
 80016d4:	f000 fbb4 	bl	8001e40 <getModeId>
 80016d8:	4603      	mov	r3, r0
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff f87e 	bl	80007dc <displayLed7Seg>
  (void)setupRobot();
 80016e0:	f000 fc04 	bl	8001eec <setupRobot>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    (void)processRobot();
 80016e4:	f000 fcde 	bl	80020a4 <processRobot>
 80016e8:	bf00      	nop
 80016ea:	e7fb      	b.n	80016e4 <main+0x4c>

080016ec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b096      	sub	sp, #88	@ 0x58
 80016f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016f6:	2228      	movs	r2, #40	@ 0x28
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f008 f980 	bl	8009a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]
 800171e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001720:	2301      	movs	r3, #1
 8001722:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001724:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001728:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800172a:	2300      	movs	r3, #0
 800172c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800172e:	2301      	movs	r3, #1
 8001730:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001732:	2302      	movs	r3, #2
 8001734:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001736:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800173a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800173c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001740:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001742:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001746:	4618      	mov	r0, r3
 8001748:	f004 fe56 	bl	80063f8 <HAL_RCC_OscConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001752:	f000 f828 	bl	80017a6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001756:	230f      	movs	r3, #15
 8001758:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175a:	2302      	movs	r3, #2
 800175c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001762:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001766:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001768:	2300      	movs	r3, #0
 800176a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	2102      	movs	r1, #2
 8001772:	4618      	mov	r0, r3
 8001774:	f005 f8c2 	bl	80068fc <HAL_RCC_ClockConfig>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800177e:	f000 f812 	bl	80017a6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001782:	2302      	movs	r3, #2
 8001784:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800178a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	4618      	mov	r0, r3
 8001790:	f005 fa42 	bl	8006c18 <HAL_RCCEx_PeriphCLKConfig>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800179a:	f000 f804 	bl	80017a6 <Error_Handler>
  }
}
 800179e:	bf00      	nop
 80017a0:	3758      	adds	r7, #88	@ 0x58
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017aa:	b672      	cpsid	i
}
 80017ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ae:	bf00      	nop
 80017b0:	e7fd      	b.n	80017ae <Error_Handler+0x8>
	...

080017b4 <initModuleMKE>:

    volatile uint8_t sw_gamepad_data[SW_GAMEPAD_DATA_LEN] = {0};
    UART_HandleTypeDef *module_mke_huart = NULL;

    enum StatusCode initModuleMKE(UART_HandleTypeDef *huart)
    {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
        module_mke_huart = huart;
 80017bc:	4a06      	ldr	r2, [pc, #24]	@ (80017d8 <initModuleMKE+0x24>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]

        return initUartReceiveIT(module_mke_huart);
 80017c2:	4b05      	ldr	r3, [pc, #20]	@ (80017d8 <initModuleMKE+0x24>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f002 f8a4 	bl	8003914 <initUartReceiveIT>
 80017cc:	4603      	mov	r3, r0
    }
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200001c0 	.word	0x200001c0

080017dc <readSWGamepadData>:

    /**
     * @note This function is intergrated into get info function, you dont have to use it
     */
    enum StatusCode readSWGamepadData()
    {
 80017dc:	b598      	push	{r3, r4, r7, lr}
 80017de:	af00      	add	r7, sp, #0
        static volatile uint8_t data_index = 0;

        if (module_mke_huart == &huart1)
 80017e0:	4b23      	ldr	r3, [pc, #140]	@ (8001870 <readSWGamepadData+0x94>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a23      	ldr	r2, [pc, #140]	@ (8001874 <readSWGamepadData+0x98>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d11b      	bne.n	8001822 <readSWGamepadData+0x46>
        {
            if (getBufferUart1() == 0xFF || data_index >= SW_GAMEPAD_DATA_LEN)
 80017ea:	f002 f93f 	bl	8003a6c <getBufferUart1>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2bff      	cmp	r3, #255	@ 0xff
 80017f2:	d004      	beq.n	80017fe <readSWGamepadData+0x22>
 80017f4:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <readSWGamepadData+0x9c>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b07      	cmp	r3, #7
 80017fc:	d902      	bls.n	8001804 <readSWGamepadData+0x28>
            {
                data_index = 0;
 80017fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001878 <readSWGamepadData+0x9c>)
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
            }

            sw_gamepad_data[data_index++] = getBufferUart1();
 8001804:	4b1c      	ldr	r3, [pc, #112]	@ (8001878 <readSWGamepadData+0x9c>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	b2d1      	uxtb	r1, r2
 800180e:	4a1a      	ldr	r2, [pc, #104]	@ (8001878 <readSWGamepadData+0x9c>)
 8001810:	7011      	strb	r1, [r2, #0]
 8001812:	461c      	mov	r4, r3
 8001814:	f002 f92a 	bl	8003a6c <getBufferUart1>
 8001818:	4603      	mov	r3, r0
 800181a:	461a      	mov	r2, r3
 800181c:	4b17      	ldr	r3, [pc, #92]	@ (800187c <readSWGamepadData+0xa0>)
 800181e:	551a      	strb	r2, [r3, r4]
 8001820:	e022      	b.n	8001868 <readSWGamepadData+0x8c>
        }
        else if (module_mke_huart == &huart2 || data_index >= SW_GAMEPAD_DATA_LEN)
 8001822:	4b13      	ldr	r3, [pc, #76]	@ (8001870 <readSWGamepadData+0x94>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a16      	ldr	r2, [pc, #88]	@ (8001880 <readSWGamepadData+0xa4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d004      	beq.n	8001836 <readSWGamepadData+0x5a>
 800182c:	4b12      	ldr	r3, [pc, #72]	@ (8001878 <readSWGamepadData+0x9c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b07      	cmp	r3, #7
 8001834:	d916      	bls.n	8001864 <readSWGamepadData+0x88>
        {
            if (getBufferUart1() == 0xFF)
 8001836:	f002 f919 	bl	8003a6c <getBufferUart1>
 800183a:	4603      	mov	r3, r0
 800183c:	2bff      	cmp	r3, #255	@ 0xff
 800183e:	d102      	bne.n	8001846 <readSWGamepadData+0x6a>
            {
                data_index = 0;
 8001840:	4b0d      	ldr	r3, [pc, #52]	@ (8001878 <readSWGamepadData+0x9c>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
            }

            sw_gamepad_data[data_index++] = getBufferUart2();
 8001846:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <readSWGamepadData+0x9c>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	b2d1      	uxtb	r1, r2
 8001850:	4a09      	ldr	r2, [pc, #36]	@ (8001878 <readSWGamepadData+0x9c>)
 8001852:	7011      	strb	r1, [r2, #0]
 8001854:	461c      	mov	r4, r3
 8001856:	f002 f913 	bl	8003a80 <getBufferUart2>
 800185a:	4603      	mov	r3, r0
 800185c:	461a      	mov	r2, r3
 800185e:	4b07      	ldr	r3, [pc, #28]	@ (800187c <readSWGamepadData+0xa0>)
 8001860:	551a      	strb	r2, [r3, r4]
 8001862:	e001      	b.n	8001868 <readSWGamepadData+0x8c>
        }
        else
        {
            return STATUS_ERROR;
 8001864:	2300      	movs	r3, #0
 8001866:	e000      	b.n	800186a <readSWGamepadData+0x8e>
        }
        return STATUS_OK;
 8001868:	2301      	movs	r3, #1
    }
 800186a:	4618      	mov	r0, r3
 800186c:	bd98      	pop	{r3, r4, r7, pc}
 800186e:	bf00      	nop
 8001870:	200001c0 	.word	0x200001c0
 8001874:	200003ac 	.word	0x200003ac
 8001878:	200001c4 	.word	0x200001c4
 800187c:	200001b8 	.word	0x200001b8
 8001880:	200003f4 	.word	0x200003f4

08001884 <isSWGamepadButtonPressed>:
     * @note Uart flag should be corresponding to Uart you initialze.
     * @retval 0 if it's NOT pressed
     * @retval 1 if it IS pressed
     */
    uint8_t isSWGamepadButtonPressed(enum SoftwareGamepadButtons sw_gamepad_button_id)
    {
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
        switch (sw_gamepad_button_id)
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	2b09      	cmp	r3, #9
 8001892:	d871      	bhi.n	8001978 <isSWGamepadButtonPressed+0xf4>
 8001894:	a201      	add	r2, pc, #4	@ (adr r2, 800189c <isSWGamepadButtonPressed+0x18>)
 8001896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189a:	bf00      	nop
 800189c:	080018c5 	.word	0x080018c5
 80018a0:	080018d7 	.word	0x080018d7
 80018a4:	080018e9 	.word	0x080018e9
 80018a8:	080018fb 	.word	0x080018fb
 80018ac:	08001931 	.word	0x08001931
 80018b0:	0800191f 	.word	0x0800191f
 80018b4:	08001943 	.word	0x08001943
 80018b8:	0800190d 	.word	0x0800190d
 80018bc:	08001955 	.word	0x08001955
 80018c0:	08001967 	.word	0x08001967
        {
        case SW_BUTTON_UP:
        {
            return (sw_gamepad_data[6] == 0x01);
 80018c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001984 <isSWGamepadButtonPressed+0x100>)
 80018c6:	799b      	ldrb	r3, [r3, #6]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	bf0c      	ite	eq
 80018ce:	2301      	moveq	r3, #1
 80018d0:	2300      	movne	r3, #0
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	e051      	b.n	800197a <isSWGamepadButtonPressed+0xf6>
            break;
        }
        case SW_BUTTON_DOWN:
        {
            return (sw_gamepad_data[6] == 0x02);
 80018d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001984 <isSWGamepadButtonPressed+0x100>)
 80018d8:	799b      	ldrb	r3, [r3, #6]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	bf0c      	ite	eq
 80018e0:	2301      	moveq	r3, #1
 80018e2:	2300      	movne	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	e048      	b.n	800197a <isSWGamepadButtonPressed+0xf6>
            break;
        }
        case SW_BUTTON_LEFT:
        {
            return (sw_gamepad_data[6] == 0x04);
 80018e8:	4b26      	ldr	r3, [pc, #152]	@ (8001984 <isSWGamepadButtonPressed+0x100>)
 80018ea:	799b      	ldrb	r3, [r3, #6]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	bf0c      	ite	eq
 80018f2:	2301      	moveq	r3, #1
 80018f4:	2300      	movne	r3, #0
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	e03f      	b.n	800197a <isSWGamepadButtonPressed+0xf6>
            break;
        }
        case SW_BUTTON_RIGHT:
        {
            return (sw_gamepad_data[6] == 0x08);
 80018fa:	4b22      	ldr	r3, [pc, #136]	@ (8001984 <isSWGamepadButtonPressed+0x100>)
 80018fc:	799b      	ldrb	r3, [r3, #6]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b08      	cmp	r3, #8
 8001902:	bf0c      	ite	eq
 8001904:	2301      	moveq	r3, #1
 8001906:	2300      	movne	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	e036      	b.n	800197a <isSWGamepadButtonPressed+0xf6>
            break;
        }

        case SW_BUTTON_TRIANGLE:
        {
            return (sw_gamepad_data[5] == 0x04);
 800190c:	4b1d      	ldr	r3, [pc, #116]	@ (8001984 <isSWGamepadButtonPressed+0x100>)
 800190e:	795b      	ldrb	r3, [r3, #5]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b04      	cmp	r3, #4
 8001914:	bf0c      	ite	eq
 8001916:	2301      	moveq	r3, #1
 8001918:	2300      	movne	r3, #0
 800191a:	b2db      	uxtb	r3, r3
 800191c:	e02d      	b.n	800197a <isSWGamepadButtonPressed+0xf6>
            break;
        }
        case SW_BUTTON_CIRCLE:
        {
            return (sw_gamepad_data[5] == 0x08);
 800191e:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <isSWGamepadButtonPressed+0x100>)
 8001920:	795b      	ldrb	r3, [r3, #5]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b08      	cmp	r3, #8
 8001926:	bf0c      	ite	eq
 8001928:	2301      	moveq	r3, #1
 800192a:	2300      	movne	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	e024      	b.n	800197a <isSWGamepadButtonPressed+0xf6>
            break;
        }
        case SW_BUTTON_CROSS:
        {
            return (sw_gamepad_data[5] == 0x10);
 8001930:	4b14      	ldr	r3, [pc, #80]	@ (8001984 <isSWGamepadButtonPressed+0x100>)
 8001932:	795b      	ldrb	r3, [r3, #5]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b10      	cmp	r3, #16
 8001938:	bf0c      	ite	eq
 800193a:	2301      	moveq	r3, #1
 800193c:	2300      	movne	r3, #0
 800193e:	b2db      	uxtb	r3, r3
 8001940:	e01b      	b.n	800197a <isSWGamepadButtonPressed+0xf6>
            break;
        }
        case SW_BUTTON_SQUARE:
        {
            return (sw_gamepad_data[5] == 0x20);
 8001942:	4b10      	ldr	r3, [pc, #64]	@ (8001984 <isSWGamepadButtonPressed+0x100>)
 8001944:	795b      	ldrb	r3, [r3, #5]
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b20      	cmp	r3, #32
 800194a:	bf0c      	ite	eq
 800194c:	2301      	moveq	r3, #1
 800194e:	2300      	movne	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	e012      	b.n	800197a <isSWGamepadButtonPressed+0xf6>
            break;
        }

        case SW_BUTTON_START:
        {
            return (sw_gamepad_data[5] == 0x01);
 8001954:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <isSWGamepadButtonPressed+0x100>)
 8001956:	795b      	ldrb	r3, [r3, #5]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b01      	cmp	r3, #1
 800195c:	bf0c      	ite	eq
 800195e:	2301      	moveq	r3, #1
 8001960:	2300      	movne	r3, #0
 8001962:	b2db      	uxtb	r3, r3
 8001964:	e009      	b.n	800197a <isSWGamepadButtonPressed+0xf6>
            break;
        }
        case SW_BUTTON_SELECT:
        {
            return (sw_gamepad_data[5] == 0x02);
 8001966:	4b07      	ldr	r3, [pc, #28]	@ (8001984 <isSWGamepadButtonPressed+0x100>)
 8001968:	795b      	ldrb	r3, [r3, #5]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	bf0c      	ite	eq
 8001970:	2301      	moveq	r3, #1
 8001972:	2300      	movne	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	e000      	b.n	800197a <isSWGamepadButtonPressed+0xf6>
            break;
        }
        default:
        {
            return 0;
 8001978:	2300      	movs	r3, #0
            break;
        }
        }
    }
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	200001b8 	.word	0x200001b8

08001988 <getSWGamepadData>:
     * @note This function should be used for debug only
     * @note This function should be called in if(getFlagUart_()){isSWGamepadButtonPressed(_)}
     * @note    Uart flag should be corresponding to Uart you initialze.
     */
    const uint8_t *getSWGamepadData()
    {
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
        return  (const uint8_t *)sw_gamepad_data;
 800198c:	4b02      	ldr	r3, [pc, #8]	@ (8001998 <getSWGamepadData+0x10>)
    }
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	200001b8 	.word	0x200001b8

0800199c <initMotor>:
#endif /* __cplusplus */

	const uint32_t motor_channel[NUMBER_OF_MOTORS] = {TIM_CHANNEL_4, TIM_CHANNEL_3, TIM_CHANNEL_1, TIM_CHANNEL_2};

	enum StatusCode initMotor(const enum Motor motor_id)
	{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 80019a6:	2300      	movs	r3, #0
 80019a8:	73fb      	strb	r3, [r7, #15]
 80019aa:	e012      	b.n	80019d2 <initMotor+0x36>
		{
			if (HAL_TIM_PWM_Start(&htim8, motor_channel[motor_id]) == HAL_OK)
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	4a0d      	ldr	r2, [pc, #52]	@ (80019e4 <initMotor+0x48>)
 80019b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b4:	4619      	mov	r1, r3
 80019b6:	480c      	ldr	r0, [pc, #48]	@ (80019e8 <initMotor+0x4c>)
 80019b8:	f006 f878 	bl	8007aac <HAL_TIM_PWM_Start>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <initMotor+0x2a>
			{
				return STATUS_OK;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e009      	b.n	80019da <initMotor+0x3e>
			}
			HAL_Delay(50);
 80019c6:	2032      	movs	r0, #50	@ 0x32
 80019c8:	f002 fa82 	bl	8003ed0 <HAL_Delay>
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	3301      	adds	r3, #1
 80019d0:	73fb      	strb	r3, [r7, #15]
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d9e9      	bls.n	80019ac <initMotor+0x10>
		}
		return STATUS_ERROR;
 80019d8:	2300      	movs	r3, #0
	}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	08009c28 	.word	0x08009c28
 80019e8:	20000360 	.word	0x20000360

080019ec <setSpeed>:

	void setSpeed(const enum Motor motor_id, uint8_t duty_cycle)
	{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	460a      	mov	r2, r1
 80019f6:	71fb      	strb	r3, [r7, #7]
 80019f8:	4613      	mov	r3, r2
 80019fa:	71bb      	strb	r3, [r7, #6]
		if (duty_cycle > 100)
 80019fc:	79bb      	ldrb	r3, [r7, #6]
 80019fe:	2b64      	cmp	r3, #100	@ 0x64
 8001a00:	d901      	bls.n	8001a06 <setSpeed+0x1a>
		{
			duty_cycle = 100;
 8001a02:	2364      	movs	r3, #100	@ 0x64
 8001a04:	71bb      	strb	r3, [r7, #6]
		else if (duty_cycle < 0)
		{
			duty_cycle = 0;
		}

		__HAL_TIM_SET_COMPARE(&htim8, motor_channel[motor_id], duty_cycle);
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	4a14      	ldr	r2, [pc, #80]	@ (8001a5c <setSpeed+0x70>)
 8001a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d104      	bne.n	8001a1c <setSpeed+0x30>
 8001a12:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <setSpeed+0x74>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	79ba      	ldrb	r2, [r7, #6]
 8001a18:	635a      	str	r2, [r3, #52]	@ 0x34
	}
 8001a1a:	e019      	b.n	8001a50 <setSpeed+0x64>
		__HAL_TIM_SET_COMPARE(&htim8, motor_channel[motor_id], duty_cycle);
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001a5c <setSpeed+0x70>)
 8001a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	d104      	bne.n	8001a32 <setSpeed+0x46>
 8001a28:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <setSpeed+0x74>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	79bb      	ldrb	r3, [r7, #6]
 8001a2e:	6393      	str	r3, [r2, #56]	@ 0x38
	}
 8001a30:	e00e      	b.n	8001a50 <setSpeed+0x64>
		__HAL_TIM_SET_COMPARE(&htim8, motor_channel[motor_id], duty_cycle);
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	4a09      	ldr	r2, [pc, #36]	@ (8001a5c <setSpeed+0x70>)
 8001a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d104      	bne.n	8001a48 <setSpeed+0x5c>
 8001a3e:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <setSpeed+0x74>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	79bb      	ldrb	r3, [r7, #6]
 8001a44:	63d3      	str	r3, [r2, #60]	@ 0x3c
	}
 8001a46:	e003      	b.n	8001a50 <setSpeed+0x64>
		__HAL_TIM_SET_COMPARE(&htim8, motor_channel[motor_id], duty_cycle);
 8001a48:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <setSpeed+0x74>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	79bb      	ldrb	r3, [r7, #6]
 8001a4e:	6413      	str	r3, [r2, #64]	@ 0x40
	}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	08009c28 	.word	0x08009c28
 8001a60:	20000360 	.word	0x20000360

08001a64 <motor1Rotates>:
	 * @param	speed: -100 to 100
	 * @note	positive duty_cycle: move forward
	 * 			negative duty_cycle: move backward
	 */
	void motor1Rotates(const int speed)
	{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
		if (speed >= 0)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	db0b      	blt.n	8001a8a <motor1Rotates+0x26>
		{
			HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, UP);
 8001a72:	2201      	movs	r2, #1
 8001a74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a78:	480e      	ldr	r0, [pc, #56]	@ (8001ab4 <motor1Rotates+0x50>)
 8001a7a:	f003 fd68 	bl	800554e <HAL_GPIO_WritePin>
			setSpeed(MOTOR_1, speed);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	4619      	mov	r1, r3
 8001a84:	2000      	movs	r0, #0
 8001a86:	f7ff ffb1 	bl	80019ec <setSpeed>
		}
		if (speed < 0)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	da0d      	bge.n	8001aac <motor1Rotates+0x48>
		{
			HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, DOWN);
 8001a90:	2200      	movs	r2, #0
 8001a92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a96:	4807      	ldr	r0, [pc, #28]	@ (8001ab4 <motor1Rotates+0x50>)
 8001a98:	f003 fd59 	bl	800554e <HAL_GPIO_WritePin>
			setSpeed(MOTOR_1, -speed);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	425b      	negs	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f7ff ffa0 	bl	80019ec <setSpeed>
		}
	}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40011000 	.word	0x40011000

08001ab8 <motor2Rotates>:

	void motor2Rotates(const int speed)
	{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
		if (speed >= 0)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	db0b      	blt.n	8001ade <motor2Rotates+0x26>
		{
			HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, UP);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001acc:	480e      	ldr	r0, [pc, #56]	@ (8001b08 <motor2Rotates+0x50>)
 8001ace:	f003 fd3e 	bl	800554e <HAL_GPIO_WritePin>
			setSpeed(MOTOR_2, speed);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff87 	bl	80019ec <setSpeed>
		}
		if (speed < 0)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	da0d      	bge.n	8001b00 <motor2Rotates+0x48>
		{
			HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, DOWN);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001aea:	4807      	ldr	r0, [pc, #28]	@ (8001b08 <motor2Rotates+0x50>)
 8001aec:	f003 fd2f 	bl	800554e <HAL_GPIO_WritePin>
			setSpeed(MOTOR_2, -speed);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	425b      	negs	r3, r3
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	4619      	mov	r1, r3
 8001afa:	2001      	movs	r0, #1
 8001afc:	f7ff ff76 	bl	80019ec <setSpeed>
		}
	}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40011000 	.word	0x40011000

08001b0c <motor3Rotates>:

	void motor3Rotates(const int speed)
	{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
		if (speed >= 0)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	db0a      	blt.n	8001b30 <motor3Rotates+0x24>
		{
			HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, UP);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	2104      	movs	r1, #4
 8001b1e:	480e      	ldr	r0, [pc, #56]	@ (8001b58 <motor3Rotates+0x4c>)
 8001b20:	f003 fd15 	bl	800554e <HAL_GPIO_WritePin>
			setSpeed(MOTOR_3, speed);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	4619      	mov	r1, r3
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	f7ff ff5e 	bl	80019ec <setSpeed>
		}
		if (speed < 0)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	da0c      	bge.n	8001b50 <motor3Rotates+0x44>
		{
			HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, DOWN);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2104      	movs	r1, #4
 8001b3a:	4807      	ldr	r0, [pc, #28]	@ (8001b58 <motor3Rotates+0x4c>)
 8001b3c:	f003 fd07 	bl	800554e <HAL_GPIO_WritePin>
			setSpeed(MOTOR_3, -speed);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	425b      	negs	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	4619      	mov	r1, r3
 8001b4a:	2002      	movs	r0, #2
 8001b4c:	f7ff ff4e 	bl	80019ec <setSpeed>
		}
	}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40010c00 	.word	0x40010c00

08001b5c <motor4Rotates>:

	void motor4Rotates(const int speed)
	{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
		if (speed >= 0)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	db0a      	blt.n	8001b80 <motor4Rotates+0x24>
		{
			HAL_GPIO_WritePin(M4_DIR_GPIO_Port, M4_DIR_Pin, UP);
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	2102      	movs	r1, #2
 8001b6e:	480e      	ldr	r0, [pc, #56]	@ (8001ba8 <motor4Rotates+0x4c>)
 8001b70:	f003 fced 	bl	800554e <HAL_GPIO_WritePin>
			setSpeed(MOTOR_4, speed);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	4619      	mov	r1, r3
 8001b7a:	2003      	movs	r0, #3
 8001b7c:	f7ff ff36 	bl	80019ec <setSpeed>
		}
		if (speed < 0)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	da0c      	bge.n	8001ba0 <motor4Rotates+0x44>
		{
			HAL_GPIO_WritePin(M4_DIR_GPIO_Port, M4_DIR_Pin, DOWN);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2102      	movs	r1, #2
 8001b8a:	4807      	ldr	r0, [pc, #28]	@ (8001ba8 <motor4Rotates+0x4c>)
 8001b8c:	f003 fcdf 	bl	800554e <HAL_GPIO_WritePin>
			setSpeed(MOTOR_4, -speed);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	425b      	negs	r3, r3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	4619      	mov	r1, r3
 8001b9a:	2003      	movs	r0, #3
 8001b9c:	f7ff ff26 	bl	80019ec <setSpeed>
		}
	}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40010800 	.word	0x40010800

08001bac <motorStop>:

	void motorStop()
	{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
		motor1Rotates(0);
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f7ff ff57 	bl	8001a64 <motor1Rotates>
		motor2Rotates(0);
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f7ff ff7e 	bl	8001ab8 <motor2Rotates>
		motor3Rotates(0);
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	f7ff ffa5 	bl	8001b0c <motor3Rotates>
		motor4Rotates(0);
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f7ff ffca 	bl	8001b5c <motor4Rotates>
	}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <moveForward>:
	//         left		  ---+----     right		↻: rotateRight
	//           backLeft    |  backRight
	//                  backwards

	void moveForward(const int speed)
	{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
		motor1Rotates(speed);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff ff45 	bl	8001a64 <motor1Rotates>
		motor2Rotates(speed);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ff6c 	bl	8001ab8 <motor2Rotates>
		motor3Rotates(speed);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ff93 	bl	8001b0c <motor3Rotates>
		motor4Rotates(speed);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff ffb8 	bl	8001b5c <motor4Rotates>
	}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <moveBackward>:
	void moveBackward(const int speed)
	{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
		motor1Rotates(-speed);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	425b      	negs	r3, r3
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff2f 	bl	8001a64 <motor1Rotates>
		motor2Rotates(-speed);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	425b      	negs	r3, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff ff54 	bl	8001ab8 <motor2Rotates>
		motor3Rotates(-speed);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	425b      	negs	r3, r3
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff79 	bl	8001b0c <motor3Rotates>
		motor4Rotates(-speed);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	425b      	negs	r3, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff ff9c 	bl	8001b5c <motor4Rotates>
	}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <moveLeft>:
	void moveLeft(const int speed)
	{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
		motor1Rotates(-speed);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	425b      	negs	r3, r3
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff13 	bl	8001a64 <motor1Rotates>
		motor2Rotates(speed);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff ff3a 	bl	8001ab8 <motor2Rotates>
		motor3Rotates(speed);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ff61 	bl	8001b0c <motor3Rotates>
		motor4Rotates(-speed);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	425b      	negs	r3, r3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ff84 	bl	8001b5c <motor4Rotates>
	}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <moveRight>:
	void moveRight(const int speed)
	{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
		motor1Rotates(speed);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff fefd 	bl	8001a64 <motor1Rotates>
		motor2Rotates(-speed);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	425b      	negs	r3, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ff22 	bl	8001ab8 <motor2Rotates>
		motor3Rotates(-speed);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	425b      	negs	r3, r3
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff47 	bl	8001b0c <motor3Rotates>
		motor4Rotates(speed);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff ff6c 	bl	8001b5c <motor4Rotates>
	}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <moveFrontLeft>:

	void moveFrontLeft(const int speed)
	{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
		motor1Rotates(0);
 8001c94:	2000      	movs	r0, #0
 8001c96:	f7ff fee5 	bl	8001a64 <motor1Rotates>
		motor2Rotates(speed);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ff0c 	bl	8001ab8 <motor2Rotates>
		motor3Rotates(speed);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff33 	bl	8001b0c <motor3Rotates>
		motor4Rotates(0);
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f7ff ff58 	bl	8001b5c <motor4Rotates>
	}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <moveFrontRight>:
	void moveFrontRight(const int speed)
	{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
		motor1Rotates(speed);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff fed1 	bl	8001a64 <motor1Rotates>
		motor2Rotates(0);
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f7ff fef8 	bl	8001ab8 <motor2Rotates>
		motor3Rotates(0);
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f7ff ff1f 	bl	8001b0c <motor3Rotates>
		motor4Rotates(speed);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ff44 	bl	8001b5c <motor4Rotates>
	}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <moveBackLeft>:
	void moveBackLeft(const int speed)
	{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
		motor1Rotates(-speed);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	425b      	negs	r3, r3
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff febb 	bl	8001a64 <motor1Rotates>
		motor2Rotates(0);
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f7ff fee2 	bl	8001ab8 <motor2Rotates>
		motor3Rotates(0);
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f7ff ff09 	bl	8001b0c <motor3Rotates>
		motor4Rotates(-speed);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	425b      	negs	r3, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff ff2c 	bl	8001b5c <motor4Rotates>
	}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <moveBackRight>:
	void moveBackRight(const int speed)
	{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
		motor1Rotates(0);
 8001d14:	2000      	movs	r0, #0
 8001d16:	f7ff fea5 	bl	8001a64 <motor1Rotates>
		motor2Rotates(-speed);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	425b      	negs	r3, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff feca 	bl	8001ab8 <motor2Rotates>
		motor3Rotates(-speed);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	425b      	negs	r3, r3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff feef 	bl	8001b0c <motor3Rotates>
		motor4Rotates(0);
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f7ff ff14 	bl	8001b5c <motor4Rotates>
	}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <rotateLeft>:

	void rotateLeft(const int speed)
	{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
		motor1Rotates(-speed);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	425b      	negs	r3, r3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff fe8b 	bl	8001a64 <motor1Rotates>
		motor2Rotates(-speed);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	425b      	negs	r3, r3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff feb0 	bl	8001ab8 <motor2Rotates>
		motor3Rotates(speed);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff fed7 	bl	8001b0c <motor3Rotates>
		motor4Rotates(speed);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff fefc 	bl	8001b5c <motor4Rotates>
	}
 8001d64:	bf00      	nop
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <rotateRight>:
	void rotateRight(const int speed)
	{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
		motor1Rotates(speed);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff fe75 	bl	8001a64 <motor1Rotates>
		motor2Rotates(speed);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff fe9c 	bl	8001ab8 <motor2Rotates>
		motor3Rotates(-speed);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	425b      	negs	r3, r3
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fec1 	bl	8001b0c <motor3Rotates>
		motor4Rotates(-speed);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	425b      	negs	r3, r3
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fee4 	bl	8001b5c <motor4Rotates>
	}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <moveDirection>:

	void moveDirection(const enum Direction direction, const int speed)
	{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	6039      	str	r1, [r7, #0]
 8001da6:	71fb      	strb	r3, [r7, #7]
		if (speed == 0)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d102      	bne.n	8001db4 <moveDirection+0x18>
		{
			motorStop();
 8001dae:	f7ff fefd 	bl	8001bac <motorStop>
			return;
 8001db2:	e041      	b.n	8001e38 <moveDirection+0x9c>
		}

		switch (direction)
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	2b09      	cmp	r3, #9
 8001db8:	d83e      	bhi.n	8001e38 <moveDirection+0x9c>
 8001dba:	a201      	add	r2, pc, #4	@ (adr r2, 8001dc0 <moveDirection+0x24>)
 8001dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc0:	08001de9 	.word	0x08001de9
 8001dc4:	08001df1 	.word	0x08001df1
 8001dc8:	08001df9 	.word	0x08001df9
 8001dcc:	08001e01 	.word	0x08001e01
 8001dd0:	08001e09 	.word	0x08001e09
 8001dd4:	08001e11 	.word	0x08001e11
 8001dd8:	08001e19 	.word	0x08001e19
 8001ddc:	08001e21 	.word	0x08001e21
 8001de0:	08001e29 	.word	0x08001e29
 8001de4:	08001e31 	.word	0x08001e31
		{
		case FORWARD:
		{
			moveForward(speed);
 8001de8:	6838      	ldr	r0, [r7, #0]
 8001dea:	f7ff feef 	bl	8001bcc <moveForward>
			break;
 8001dee:	e023      	b.n	8001e38 <moveDirection+0x9c>
		}
		case BACKWARD:
		{
			moveBackward(speed);
 8001df0:	6838      	ldr	r0, [r7, #0]
 8001df2:	f7ff feff 	bl	8001bf4 <moveBackward>
			break;
 8001df6:	e01f      	b.n	8001e38 <moveDirection+0x9c>
		}
		case LEFT:
		{
			moveLeft(speed);
 8001df8:	6838      	ldr	r0, [r7, #0]
 8001dfa:	f7ff ff17 	bl	8001c2c <moveLeft>
			break;
 8001dfe:	e01b      	b.n	8001e38 <moveDirection+0x9c>
		}
		case RIGHT:
		{
			moveRight(speed);
 8001e00:	6838      	ldr	r0, [r7, #0]
 8001e02:	f7ff ff2b 	bl	8001c5c <moveRight>
			break;
 8001e06:	e017      	b.n	8001e38 <moveDirection+0x9c>
		}
		case FRONT_LEFT:
		{
			moveFrontLeft(speed);
 8001e08:	6838      	ldr	r0, [r7, #0]
 8001e0a:	f7ff ff3f 	bl	8001c8c <moveFrontLeft>
			break;
 8001e0e:	e013      	b.n	8001e38 <moveDirection+0x9c>
		}
		case FRONT_RIGHT:
		{
			moveFrontRight(speed);
 8001e10:	6838      	ldr	r0, [r7, #0]
 8001e12:	f7ff ff4f 	bl	8001cb4 <moveFrontRight>
			break;
 8001e16:	e00f      	b.n	8001e38 <moveDirection+0x9c>
		}
		case BACK_LEFT:
		{
			moveBackLeft(speed);
 8001e18:	6838      	ldr	r0, [r7, #0]
 8001e1a:	f7ff ff5f 	bl	8001cdc <moveBackLeft>
			break;
 8001e1e:	e00b      	b.n	8001e38 <moveDirection+0x9c>
		}
		case BACK_RIGHT:
		{
			moveBackRight(speed);
 8001e20:	6838      	ldr	r0, [r7, #0]
 8001e22:	f7ff ff73 	bl	8001d0c <moveBackRight>
			break;
 8001e26:	e007      	b.n	8001e38 <moveDirection+0x9c>
		}
		case ROTATE_LEFT:
		{
			rotateLeft(speed);
 8001e28:	6838      	ldr	r0, [r7, #0]
 8001e2a:	f7ff ff87 	bl	8001d3c <rotateLeft>
			break;
 8001e2e:	e003      	b.n	8001e38 <moveDirection+0x9c>
		}
		case ROTATE_RIGHT:
		{
			rotateRight(speed);
 8001e30:	6838      	ldr	r0, [r7, #0]
 8001e32:	f7ff ff9b 	bl	8001d6c <rotateRight>
			break;
 8001e36:	bf00      	nop
		}
		}
	}
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop

08001e40 <getModeId>:
#endif /* __cplusplus */

    enum Mode mode_id = MODE_IDLE;

    enum Mode getModeId()
    {
 8001e40:	b598      	push	{r3, r4, r7, lr}
 8001e42:	af00      	add	r7, sp, #0
        mode_id = (enum Mode)((getSwitchStatus(SWITCH_1) << 3) | (getSwitchStatus(SWITCH_2) << 2) | (getSwitchStatus(SWITCH_3) << 1) | getSwitchStatus(SWITCH_4));
 8001e44:	2000      	movs	r0, #0
 8001e46:	f001 f975 	bl	8003134 <getSwitchStatus>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	b25b      	sxtb	r3, r3
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	b25c      	sxtb	r4, r3
 8001e52:	2001      	movs	r0, #1
 8001e54:	f001 f96e 	bl	8003134 <getSwitchStatus>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	b25b      	sxtb	r3, r3
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	b25b      	sxtb	r3, r3
 8001e60:	4323      	orrs	r3, r4
 8001e62:	b25c      	sxtb	r4, r3
 8001e64:	2002      	movs	r0, #2
 8001e66:	f001 f965 	bl	8003134 <getSwitchStatus>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	b25b      	sxtb	r3, r3
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	b25b      	sxtb	r3, r3
 8001e72:	4323      	orrs	r3, r4
 8001e74:	b25c      	sxtb	r4, r3
 8001e76:	2003      	movs	r0, #3
 8001e78:	f001 f95c 	bl	8003134 <getSwitchStatus>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	b25b      	sxtb	r3, r3
 8001e80:	4323      	orrs	r3, r4
 8001e82:	b25b      	sxtb	r3, r3
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4b03      	ldr	r3, [pc, #12]	@ (8001e94 <getModeId+0x54>)
 8001e88:	701a      	strb	r2, [r3, #0]

        return mode_id;
 8001e8a:	4b02      	ldr	r3, [pc, #8]	@ (8001e94 <getModeId+0x54>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
    }
 8001e8e:	4618      	mov	r0, r3
 8001e90:	bd98      	pop	{r3, r4, r7, pc}
 8001e92:	bf00      	nop
 8001e94:	200001c5 	.word	0x200001c5

08001e98 <initSystem>:

    void initSystem()
    {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
        (void)initTimer2();
 8001e9c:	f000 fed2 	bl	8002c44 <initTimer2>

        (void)initServo(SERVO_1);
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f000 fe5b 	bl	8002b5c <initServo>
        (void)initServo(SERVO_2);
 8001ea6:	2001      	movs	r0, #1
 8001ea8:	f000 fe58 	bl	8002b5c <initServo>
        (void)initServo(SERVO_3);
 8001eac:	2002      	movs	r0, #2
 8001eae:	f000 fe55 	bl	8002b5c <initServo>

        (void)initMotor(MOTOR_1);
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f7ff fd72 	bl	800199c <initMotor>
        (void)initMotor(MOTOR_2);
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f7ff fd6f 	bl	800199c <initMotor>
        (void)initMotor(MOTOR_3);
 8001ebe:	2002      	movs	r0, #2
 8001ec0:	f7ff fd6c 	bl	800199c <initMotor>
        (void)initMotor(MOTOR_4);
 8001ec4:	2003      	movs	r0, #3
 8001ec6:	f7ff fd69 	bl	800199c <initMotor>

        (void)initGamepad();
 8001eca:	f7ff f861 	bl	8000f90 <initGamepad>
        (void)initModuleMKE(&huart1);
 8001ece:	4806      	ldr	r0, [pc, #24]	@ (8001ee8 <initSystem+0x50>)
 8001ed0:	f7ff fc70 	bl	80017b4 <initModuleMKE>

        (void)initButton();
 8001ed4:	f7fe fad0 	bl	8000478 <initButton>
        (void)initSwitch();
 8001ed8:	f001 f904 	bl	80030e4 <initSwitch>
        (void)initBuzzer();
 8001edc:	f7fe fb58 	bl	8000590 <initBuzzer>
        (void)initDisplay();
 8001ee0:	f7fe fbce 	bl	8000680 <initDisplay>
    }
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200003ac 	.word	0x200003ac

08001eec <setupRobot>:

    enum StatusCode setupRobot()
    {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
        switch (mode_id)
 8001ef0:	4b60      	ldr	r3, [pc, #384]	@ (8002074 <setupRobot+0x188>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b0f      	cmp	r3, #15
 8001ef6:	f200 80b8 	bhi.w	800206a <setupRobot+0x17e>
 8001efa:	a201      	add	r2, pc, #4	@ (adr r2, 8001f00 <setupRobot+0x14>)
 8001efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f00:	08001f41 	.word	0x08001f41
 8001f04:	08001f41 	.word	0x08001f41
 8001f08:	08001f41 	.word	0x08001f41
 8001f0c:	08001f41 	.word	0x08001f41
 8001f10:	08001f41 	.word	0x08001f41
 8001f14:	0800206b 	.word	0x0800206b
 8001f18:	08001f41 	.word	0x08001f41
 8001f1c:	08001f41 	.word	0x08001f41
 8001f20:	08001f41 	.word	0x08001f41
 8001f24:	08001f41 	.word	0x08001f41
 8001f28:	08001f41 	.word	0x08001f41
 8001f2c:	08001f41 	.word	0x08001f41
 8001f30:	08002037 	.word	0x08002037
 8001f34:	08002037 	.word	0x08002037
 8001f38:	08002055 	.word	0x08002055
 8001f3c:	08002055 	.word	0x08002055
        case MODE_TEST_SENSORS:
        case MODE_TEST_GAMEPAD:
        case MODE_TEST_MODULE_MKE:
        case MODE_TEST_FULL:
        {
            uartTransmitString(&huart2, "Begin initialize process\r\n");
 8001f40:	494d      	ldr	r1, [pc, #308]	@ (8002078 <setupRobot+0x18c>)
 8001f42:	484e      	ldr	r0, [pc, #312]	@ (800207c <setupRobot+0x190>)
 8001f44:	f001 fd28 	bl	8003998 <uartTransmitString>

            if (initTimer2() != STATUS_OK)
 8001f48:	f000 fe7c 	bl	8002c44 <initTimer2>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d003      	beq.n	8001f5a <setupRobot+0x6e>
            {
                uartTransmitString(&huart2, "[ERR] Timer initialized fail\r\n");
 8001f52:	494b      	ldr	r1, [pc, #300]	@ (8002080 <setupRobot+0x194>)
 8001f54:	4849      	ldr	r0, [pc, #292]	@ (800207c <setupRobot+0x190>)
 8001f56:	f001 fd1f 	bl	8003998 <uartTransmitString>
            }

            if ((initServo(SERVO_1) != STATUS_OK) || (initServo(SERVO_2) != STATUS_OK) || (initServo(SERVO_3) != STATUS_OK))
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f000 fdfe 	bl	8002b5c <initServo>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d10b      	bne.n	8001f7e <setupRobot+0x92>
 8001f66:	2001      	movs	r0, #1
 8001f68:	f000 fdf8 	bl	8002b5c <initServo>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d105      	bne.n	8001f7e <setupRobot+0x92>
 8001f72:	2002      	movs	r0, #2
 8001f74:	f000 fdf2 	bl	8002b5c <initServo>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d003      	beq.n	8001f86 <setupRobot+0x9a>
            {
                uartTransmitString(&huart2, "[ERR] Servo initialized fail\r\n");
 8001f7e:	4941      	ldr	r1, [pc, #260]	@ (8002084 <setupRobot+0x198>)
 8001f80:	483e      	ldr	r0, [pc, #248]	@ (800207c <setupRobot+0x190>)
 8001f82:	f001 fd09 	bl	8003998 <uartTransmitString>
            }

            if ((initMotor(MOTOR_1) != STATUS_OK) || (initMotor(MOTOR_2) != STATUS_OK) || (initMotor(MOTOR_3) != STATUS_OK) || (initMotor(MOTOR_4) != STATUS_OK))
 8001f86:	2000      	movs	r0, #0
 8001f88:	f7ff fd08 	bl	800199c <initMotor>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d111      	bne.n	8001fb6 <setupRobot+0xca>
 8001f92:	2001      	movs	r0, #1
 8001f94:	f7ff fd02 	bl	800199c <initMotor>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d10b      	bne.n	8001fb6 <setupRobot+0xca>
 8001f9e:	2002      	movs	r0, #2
 8001fa0:	f7ff fcfc 	bl	800199c <initMotor>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d105      	bne.n	8001fb6 <setupRobot+0xca>
 8001faa:	2003      	movs	r0, #3
 8001fac:	f7ff fcf6 	bl	800199c <initMotor>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d003      	beq.n	8001fbe <setupRobot+0xd2>
            {
                uartTransmitString(&huart2, "[ERR] Motor initialized fail\r\n");
 8001fb6:	4934      	ldr	r1, [pc, #208]	@ (8002088 <setupRobot+0x19c>)
 8001fb8:	4830      	ldr	r0, [pc, #192]	@ (800207c <setupRobot+0x190>)
 8001fba:	f001 fced 	bl	8003998 <uartTransmitString>
            }

            if (initGamepad() != STATUS_OK)
 8001fbe:	f7fe ffe7 	bl	8000f90 <initGamepad>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d003      	beq.n	8001fd0 <setupRobot+0xe4>
            {
                uartTransmitString(&huart2, "[ERR] Gamepad initialized fail\r\n");
 8001fc8:	4930      	ldr	r1, [pc, #192]	@ (800208c <setupRobot+0x1a0>)
 8001fca:	482c      	ldr	r0, [pc, #176]	@ (800207c <setupRobot+0x190>)
 8001fcc:	f001 fce4 	bl	8003998 <uartTransmitString>
            }
            if (initModuleMKE(&huart1) != STATUS_OK)
 8001fd0:	482f      	ldr	r0, [pc, #188]	@ (8002090 <setupRobot+0x1a4>)
 8001fd2:	f7ff fbef 	bl	80017b4 <initModuleMKE>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d003      	beq.n	8001fe4 <setupRobot+0xf8>
            {
                uartTransmitString(&huart2, "[ERR] Module MKE m15 initialized fail\r\n");
 8001fdc:	492d      	ldr	r1, [pc, #180]	@ (8002094 <setupRobot+0x1a8>)
 8001fde:	4827      	ldr	r0, [pc, #156]	@ (800207c <setupRobot+0x190>)
 8001fe0:	f001 fcda 	bl	8003998 <uartTransmitString>
            }

            if ((initButton() != STATUS_OK) || (initSwitch() != STATUS_OK))
 8001fe4:	f7fe fa48 	bl	8000478 <initButton>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d104      	bne.n	8001ff8 <setupRobot+0x10c>
 8001fee:	f001 f879 	bl	80030e4 <initSwitch>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d003      	beq.n	8002000 <setupRobot+0x114>
            {
                uartTransmitString(&huart2, "[ERR] Buttons & Switches initialized fail\r\n");
 8001ff8:	4927      	ldr	r1, [pc, #156]	@ (8002098 <setupRobot+0x1ac>)
 8001ffa:	4820      	ldr	r0, [pc, #128]	@ (800207c <setupRobot+0x190>)
 8001ffc:	f001 fccc 	bl	8003998 <uartTransmitString>
            }

            if ((initBuzzer() != STATUS_OK) || (initDisplay() != STATUS_OK))
 8002000:	f7fe fac6 	bl	8000590 <initBuzzer>
 8002004:	4603      	mov	r3, r0
 8002006:	2b01      	cmp	r3, #1
 8002008:	d104      	bne.n	8002014 <setupRobot+0x128>
 800200a:	f7fe fb39 	bl	8000680 <initDisplay>
 800200e:	4603      	mov	r3, r0
 8002010:	2b01      	cmp	r3, #1
 8002012:	d003      	beq.n	800201c <setupRobot+0x130>
            {
                uartTransmitString(&huart2, "[ERR] Buzzer & Display initialized fail\r\n");
 8002014:	4921      	ldr	r1, [pc, #132]	@ (800209c <setupRobot+0x1b0>)
 8002016:	4819      	ldr	r0, [pc, #100]	@ (800207c <setupRobot+0x190>)
 8002018:	f001 fcbe 	bl	8003998 <uartTransmitString>
            }

            uartTransmitString(&huart2, "\r\nFinished initialize process\r\n");
 800201c:	4920      	ldr	r1, [pc, #128]	@ (80020a0 <setupRobot+0x1b4>)
 800201e:	4817      	ldr	r0, [pc, #92]	@ (800207c <setupRobot+0x190>)
 8002020:	f001 fcba 	bl	8003998 <uartTransmitString>

            sTimer2Set(500, 50);
 8002024:	2132      	movs	r1, #50	@ 0x32
 8002026:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800202a:	f000 fe29 	bl	8002c80 <sTimer2Set>
            displayLeds(0b00000000);
 800202e:	2000      	movs	r0, #0
 8002030:	f7fe fc36 	bl	80008a0 <displayLeds>

            break;
 8002034:	e01b      	b.n	800206e <setupRobot+0x182>
        }

        case MODE_CONTEST_AUTONOMOUS_1:
        case MODE_CONTEST_AUTONOMOUS_2:
        {
            initSystem();
 8002036:	f7ff ff2f 	bl	8001e98 <initSystem>
            sTimer2Set(500, 50);
 800203a:	2132      	movs	r1, #50	@ 0x32
 800203c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002040:	f000 fe1e 	bl	8002c80 <sTimer2Set>
            displayLeds(0b00000000);
 8002044:	2000      	movs	r0, #0
 8002046:	f7fe fc2b 	bl	80008a0 <displayLeds>

            moveStepMotor(UP, 5);
 800204a:	2105      	movs	r1, #5
 800204c:	2001      	movs	r0, #1
 800204e:	f000 fef3 	bl	8002e38 <moveStepMotor>

            break;
 8002052:	e00c      	b.n	800206e <setupRobot+0x182>
        }

        case MODE_CONTEST_CONTROLLED_1:
        case MODE_CONTEST_CONTROLLED_2:
        {
            initSystem();
 8002054:	f7ff ff20 	bl	8001e98 <initSystem>
            sTimer2Set(500, 10);
 8002058:	210a      	movs	r1, #10
 800205a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800205e:	f000 fe0f 	bl	8002c80 <sTimer2Set>
            displayLeds(0b00000000);
 8002062:	2000      	movs	r0, #0
 8002064:	f7fe fc1c 	bl	80008a0 <displayLeds>

            break;
 8002068:	e001      	b.n	800206e <setupRobot+0x182>
        }

        default:
        {
            return STATUS_ERROR;
 800206a:	2300      	movs	r3, #0
 800206c:	e000      	b.n	8002070 <setupRobot+0x184>
            break;
        }
        }
        return STATUS_OK;
 800206e:	2301      	movs	r3, #1
    }
 8002070:	4618      	mov	r0, r3
 8002072:	bd80      	pop	{r7, pc}
 8002074:	200001c5 	.word	0x200001c5
 8002078:	08009a70 	.word	0x08009a70
 800207c:	200003f4 	.word	0x200003f4
 8002080:	08009a8c 	.word	0x08009a8c
 8002084:	08009aac 	.word	0x08009aac
 8002088:	08009acc 	.word	0x08009acc
 800208c:	08009aec 	.word	0x08009aec
 8002090:	200003ac 	.word	0x200003ac
 8002094:	08009b10 	.word	0x08009b10
 8002098:	08009b38 	.word	0x08009b38
 800209c:	08009b64 	.word	0x08009b64
 80020a0:	08009b90 	.word	0x08009b90

080020a4 <processRobot>:

    enum StatusCode processRobot()
    {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b092      	sub	sp, #72	@ 0x48
 80020a8:	af00      	add	r7, sp, #0
        switch (mode_id)
 80020aa:	4bcf      	ldr	r3, [pc, #828]	@ (80023e8 <processRobot+0x344>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b0f      	cmp	r3, #15
 80020b0:	f200 8532 	bhi.w	8002b18 <processRobot+0xa74>
 80020b4:	a201      	add	r2, pc, #4	@ (adr r2, 80020bc <processRobot+0x18>)
 80020b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ba:	bf00      	nop
 80020bc:	080020fd 	.word	0x080020fd
 80020c0:	08002111 	.word	0x08002111
 80020c4:	080021ab 	.word	0x080021ab
 80020c8:	08002225 	.word	0x08002225
 80020cc:	080022e9 	.word	0x080022e9
 80020d0:	08002b1d 	.word	0x08002b1d
 80020d4:	080023fd 	.word	0x080023fd
 80020d8:	080024cb 	.word	0x080024cb
 80020dc:	08002535 	.word	0x08002535
 80020e0:	080027bf 	.word	0x080027bf
 80020e4:	0800297d 	.word	0x0800297d
 80020e8:	08002b1d 	.word	0x08002b1d
 80020ec:	080025e9 	.word	0x080025e9
 80020f0:	08002b1d 	.word	0x08002b1d
 80020f4:	080027bf 	.word	0x080027bf
 80020f8:	0800297d 	.word	0x0800297d
        {
        case MODE_IDLE:
        {
            if (sTimer2GetFlag())
 80020fc:	f000 fddc 	bl	8002cb8 <sTimer2GetFlag>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 850c 	beq.w	8002b20 <processRobot+0xa7c>
            {
                toggleLedDebug();
 8002108:	f7fe fbde 	bl	80008c8 <toggleLedDebug>
            }

            break;
 800210c:	f000 bd08 	b.w	8002b20 <processRobot+0xa7c>
        }

        case MODE_TEST_DEBUG_INDICATORS:
        {
            if (sTimer2GetFlag())
 8002110:	f000 fdd2 	bl	8002cb8 <sTimer2GetFlag>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 8504 	beq.w	8002b24 <processRobot+0xa80>
            {
                toggleLedDebug();
 800211c:	f7fe fbd4 	bl	80008c8 <toggleLedDebug>
                (void)scanButton();
 8002120:	f7fe f9d2 	bl	80004c8 <scanButton>

                static uint8_t byte_displayed = 0b00000000;

                if (isButtonPressed(BUTTON_1))
 8002124:	2000      	movs	r0, #0
 8002126:	f7fe fa15 	bl	8000554 <isButtonPressed>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d011      	beq.n	8002154 <processRobot+0xb0>
                {
                    byte_displayed = (byte_displayed << 1) | 0b00000001;
 8002130:	4bae      	ldr	r3, [pc, #696]	@ (80023ec <processRobot+0x348>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	b25b      	sxtb	r3, r3
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	b25b      	sxtb	r3, r3
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	b25b      	sxtb	r3, r3
 8002140:	b2da      	uxtb	r2, r3
 8002142:	4baa      	ldr	r3, [pc, #680]	@ (80023ec <processRobot+0x348>)
 8002144:	701a      	strb	r2, [r3, #0]
                    displayLeds(byte_displayed);
 8002146:	4ba9      	ldr	r3, [pc, #676]	@ (80023ec <processRobot+0x348>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe fba8 	bl	80008a0 <displayLeds>
                else if (isButtonPressed(BUTTON_4))
                {
                    stopBuzzer();
                }
            }
            break;
 8002150:	f000 bce8 	b.w	8002b24 <processRobot+0xa80>
                else if (isButtonPressed(BUTTON_2))
 8002154:	2001      	movs	r0, #1
 8002156:	f7fe f9fd 	bl	8000554 <isButtonPressed>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00c      	beq.n	800217a <processRobot+0xd6>
                    byte_displayed = byte_displayed >> 1;
 8002160:	4ba2      	ldr	r3, [pc, #648]	@ (80023ec <processRobot+0x348>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	085b      	lsrs	r3, r3, #1
 8002166:	b2da      	uxtb	r2, r3
 8002168:	4ba0      	ldr	r3, [pc, #640]	@ (80023ec <processRobot+0x348>)
 800216a:	701a      	strb	r2, [r3, #0]
                    displayLeds(byte_displayed);
 800216c:	4b9f      	ldr	r3, [pc, #636]	@ (80023ec <processRobot+0x348>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe fb95 	bl	80008a0 <displayLeds>
            break;
 8002176:	f000 bcd5 	b.w	8002b24 <processRobot+0xa80>
                else if (isButtonPressed(BUTTON_3))
 800217a:	2002      	movs	r0, #2
 800217c:	f7fe f9ea 	bl	8000554 <isButtonPressed>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d006      	beq.n	8002194 <processRobot+0xf0>
                    setFreqBuzzer(byte_displayed);
 8002186:	4b99      	ldr	r3, [pc, #612]	@ (80023ec <processRobot+0x348>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe fa20 	bl	80005d0 <setFreqBuzzer>
            break;
 8002190:	f000 bcc8 	b.w	8002b24 <processRobot+0xa80>
                else if (isButtonPressed(BUTTON_4))
 8002194:	2003      	movs	r0, #3
 8002196:	f7fe f9dd 	bl	8000554 <isButtonPressed>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 84c1 	beq.w	8002b24 <processRobot+0xa80>
                    stopBuzzer();
 80021a2:	f7fe fa63 	bl	800066c <stopBuzzer>
            break;
 80021a6:	f000 bcbd 	b.w	8002b24 <processRobot+0xa80>
        }

        case MODE_TEST_COMM:
        {
            if (getFlagUart1())
 80021aa:	f001 fc4b 	bl	8003a44 <getFlagUart1>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <processRobot+0x114>
            {
                (void)readSWGamepadData();
 80021b4:	f7ff fb12 	bl	80017dc <readSWGamepadData>
            }

            if (sTimer2GetFlag())
 80021b8:	f000 fd7e 	bl	8002cb8 <sTimer2GetFlag>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 84b2 	beq.w	8002b28 <processRobot+0xa84>
            {
                toggleLedDebug();
 80021c4:	f7fe fb80 	bl	80008c8 <toggleLedDebug>
                (void)scanButton();
 80021c8:	f7fe f97e 	bl	80004c8 <scanButton>

                if (isButtonPressed(BUTTON_1))
 80021cc:	2000      	movs	r0, #0
 80021ce:	f7fe f9c1 	bl	8000554 <isButtonPressed>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d014      	beq.n	8002202 <processRobot+0x15e>
                {
                    if (readGamepadData() == STATUS_OK)
 80021d8:	f7fe fefc 	bl	8000fd4 <readGamepadData>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d109      	bne.n	80021f6 <processRobot+0x152>
                    {
                        (void)uartTransmit8b(&huart2, getGamepadData(), 30);
 80021e2:	f7fe ffbb 	bl	800115c <getGamepadData>
 80021e6:	4603      	mov	r3, r0
 80021e8:	221e      	movs	r2, #30
 80021ea:	4619      	mov	r1, r3
 80021ec:	4880      	ldr	r0, [pc, #512]	@ (80023f0 <processRobot+0x34c>)
 80021ee:	f001 fbfd 	bl	80039ec <uartTransmit8b>
                else if (isButtonPressed(BUTTON_2))
                {
                    (void)uartTransmit8b(&huart2, getSWGamepadData(), 8);
                }
            }
            break;
 80021f2:	f000 bc99 	b.w	8002b28 <processRobot+0xa84>
                        (void)uartTransmitString(&huart2, "[ERR] Gamepad data read error\r\n");
 80021f6:	497f      	ldr	r1, [pc, #508]	@ (80023f4 <processRobot+0x350>)
 80021f8:	487d      	ldr	r0, [pc, #500]	@ (80023f0 <processRobot+0x34c>)
 80021fa:	f001 fbcd 	bl	8003998 <uartTransmitString>
            break;
 80021fe:	f000 bc93 	b.w	8002b28 <processRobot+0xa84>
                else if (isButtonPressed(BUTTON_2))
 8002202:	2001      	movs	r0, #1
 8002204:	f7fe f9a6 	bl	8000554 <isButtonPressed>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 848c 	beq.w	8002b28 <processRobot+0xa84>
                    (void)uartTransmit8b(&huart2, getSWGamepadData(), 8);
 8002210:	f7ff fbba 	bl	8001988 <getSWGamepadData>
 8002214:	4603      	mov	r3, r0
 8002216:	2208      	movs	r2, #8
 8002218:	4619      	mov	r1, r3
 800221a:	4875      	ldr	r0, [pc, #468]	@ (80023f0 <processRobot+0x34c>)
 800221c:	f001 fbe6 	bl	80039ec <uartTransmit8b>
            break;
 8002220:	f000 bc82 	b.w	8002b28 <processRobot+0xa84>
        }

        case MODE_TEST_MOTORS:
        {
            if (sTimer2GetFlag())
 8002224:	f000 fd48 	bl	8002cb8 <sTimer2GetFlag>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 847e 	beq.w	8002b2c <processRobot+0xa88>
            {
                toggleLedDebug();
 8002230:	f7fe fb4a 	bl	80008c8 <toggleLedDebug>
                (void)scanButton();
 8002234:	f7fe f948 	bl	80004c8 <scanButton>

                static uint8_t counter = 0;

                if (counter <= 0)
 8002238:	4b6f      	ldr	r3, [pc, #444]	@ (80023f8 <processRobot+0x354>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d13c      	bne.n	80022ba <processRobot+0x216>
                {
                    if (isButtonPressed(BUTTON_1))
 8002240:	2000      	movs	r0, #0
 8002242:	f7fe f987 	bl	8000554 <isButtonPressed>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <processRobot+0x1ba>
                    {
                        moveDirection(FORWARD, 30);
 800224c:	211e      	movs	r1, #30
 800224e:	2000      	movs	r0, #0
 8002250:	f7ff fda4 	bl	8001d9c <moveDirection>
                        counter = 60;
 8002254:	4b68      	ldr	r3, [pc, #416]	@ (80023f8 <processRobot+0x354>)
 8002256:	223c      	movs	r2, #60	@ 0x3c
 8002258:	701a      	strb	r2, [r3, #0]
                        motorStop();
                        displayLeds(0b00000000);
                    }
                }
            }
            break;
 800225a:	f000 bc67 	b.w	8002b2c <processRobot+0xa88>
                    else if (isButtonPressed(BUTTON_2))
 800225e:	2001      	movs	r0, #1
 8002260:	f7fe f978 	bl	8000554 <isButtonPressed>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d008      	beq.n	800227c <processRobot+0x1d8>
                        moveDirection(BACKWARD, 30);
 800226a:	211e      	movs	r1, #30
 800226c:	2001      	movs	r0, #1
 800226e:	f7ff fd95 	bl	8001d9c <moveDirection>
                        counter = 60;
 8002272:	4b61      	ldr	r3, [pc, #388]	@ (80023f8 <processRobot+0x354>)
 8002274:	223c      	movs	r2, #60	@ 0x3c
 8002276:	701a      	strb	r2, [r3, #0]
            break;
 8002278:	f000 bc58 	b.w	8002b2c <processRobot+0xa88>
                    else if (isButtonPressed(BUTTON_3))
 800227c:	2002      	movs	r0, #2
 800227e:	f7fe f969 	bl	8000554 <isButtonPressed>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <processRobot+0x1f6>
                        moveDirection(LEFT, 30);
 8002288:	211e      	movs	r1, #30
 800228a:	2002      	movs	r0, #2
 800228c:	f7ff fd86 	bl	8001d9c <moveDirection>
                        counter = 60;
 8002290:	4b59      	ldr	r3, [pc, #356]	@ (80023f8 <processRobot+0x354>)
 8002292:	223c      	movs	r2, #60	@ 0x3c
 8002294:	701a      	strb	r2, [r3, #0]
            break;
 8002296:	f000 bc49 	b.w	8002b2c <processRobot+0xa88>
                    else if (isButtonPressed(BUTTON_4))
 800229a:	2003      	movs	r0, #3
 800229c:	f7fe f95a 	bl	8000554 <isButtonPressed>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 8442 	beq.w	8002b2c <processRobot+0xa88>
                        moveDirection(RIGHT, 30);
 80022a8:	211e      	movs	r1, #30
 80022aa:	2003      	movs	r0, #3
 80022ac:	f7ff fd76 	bl	8001d9c <moveDirection>
                        counter = 60;
 80022b0:	4b51      	ldr	r3, [pc, #324]	@ (80023f8 <processRobot+0x354>)
 80022b2:	223c      	movs	r2, #60	@ 0x3c
 80022b4:	701a      	strb	r2, [r3, #0]
            break;
 80022b6:	f000 bc39 	b.w	8002b2c <processRobot+0xa88>
                    --counter;
 80022ba:	4b4f      	ldr	r3, [pc, #316]	@ (80023f8 <processRobot+0x354>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	3b01      	subs	r3, #1
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4b4d      	ldr	r3, [pc, #308]	@ (80023f8 <processRobot+0x354>)
 80022c4:	701a      	strb	r2, [r3, #0]
                    displayLeds(counter);
 80022c6:	4b4c      	ldr	r3, [pc, #304]	@ (80023f8 <processRobot+0x354>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe fae8 	bl	80008a0 <displayLeds>
                    if (counter == 0)
 80022d0:	4b49      	ldr	r3, [pc, #292]	@ (80023f8 <processRobot+0x354>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f040 8429 	bne.w	8002b2c <processRobot+0xa88>
                        motorStop();
 80022da:	f7ff fc67 	bl	8001bac <motorStop>
                        displayLeds(0b00000000);
 80022de:	2000      	movs	r0, #0
 80022e0:	f7fe fade 	bl	80008a0 <displayLeds>
            break;
 80022e4:	f000 bc22 	b.w	8002b2c <processRobot+0xa88>
        }

        case MODE_TEST_ENCODERS:
        {
            if (sTimer2GetFlag())
 80022e8:	f000 fce6 	bl	8002cb8 <sTimer2GetFlag>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 841e 	beq.w	8002b30 <processRobot+0xa8c>
            {
                toggleLedDebug();
 80022f4:	f7fe fae8 	bl	80008c8 <toggleLedDebug>
                (void)scanButton();
 80022f8:	f7fe f8e6 	bl	80004c8 <scanButton>

                if (isButtonPressed(BUTTON_1))
 80022fc:	2000      	movs	r0, #0
 80022fe:	f7fe f929 	bl	8000554 <isButtonPressed>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d016      	beq.n	8002336 <processRobot+0x292>
                {
                    uint32_t encoder_1_pulse = getPulseCount(ENCODER_1);
 8002308:	2000      	movs	r0, #0
 800230a:	f7fe fb5d 	bl	80009c8 <getPulseCount>
 800230e:	4603      	mov	r3, r0
 8002310:	643b      	str	r3, [r7, #64]	@ 0x40
                    uint8_t transmit_buffer[4] = {0};
 8002312:	2300      	movs	r3, #0
 8002314:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    uint32_to_bytes(&encoder_1_pulse, transmit_buffer, 1);
 8002316:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800231a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800231e:	2201      	movs	r2, #1
 8002320:	4618      	mov	r0, r3
 8002322:	f001 fcd1 	bl	8003cc8 <uint32_to_bytes>
                    uartTransmit8b(&huart2, transmit_buffer, 4);
 8002326:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800232a:	2204      	movs	r2, #4
 800232c:	4619      	mov	r1, r3
 800232e:	4830      	ldr	r0, [pc, #192]	@ (80023f0 <processRobot+0x34c>)
 8002330:	f001 fb5c 	bl	80039ec <uartTransmit8b>
                    uint8_t transmit_buffer[4] = {0};
                    uint32_to_bytes(&encoder_4_pulse, transmit_buffer, 1);
                    uartTransmit8b(&huart2, transmit_buffer, 4);
                }
            }
            break;
 8002334:	e3fc      	b.n	8002b30 <processRobot+0xa8c>
                else if (isButtonPressed(BUTTON_2))
 8002336:	2001      	movs	r0, #1
 8002338:	f7fe f90c 	bl	8000554 <isButtonPressed>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d016      	beq.n	8002370 <processRobot+0x2cc>
                    uint32_t encoder_2_pulse = getPulseCount(ENCODER_2);
 8002342:	2001      	movs	r0, #1
 8002344:	f7fe fb40 	bl	80009c8 <getPulseCount>
 8002348:	4603      	mov	r3, r0
 800234a:	63bb      	str	r3, [r7, #56]	@ 0x38
                    uint8_t transmit_buffer[4] = {0};
 800234c:	2300      	movs	r3, #0
 800234e:	637b      	str	r3, [r7, #52]	@ 0x34
                    uint32_to_bytes(&encoder_2_pulse, transmit_buffer, 1);
 8002350:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8002354:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002358:	2201      	movs	r2, #1
 800235a:	4618      	mov	r0, r3
 800235c:	f001 fcb4 	bl	8003cc8 <uint32_to_bytes>
                    uartTransmit8b(&huart2, transmit_buffer, 4);
 8002360:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002364:	2204      	movs	r2, #4
 8002366:	4619      	mov	r1, r3
 8002368:	4821      	ldr	r0, [pc, #132]	@ (80023f0 <processRobot+0x34c>)
 800236a:	f001 fb3f 	bl	80039ec <uartTransmit8b>
            break;
 800236e:	e3df      	b.n	8002b30 <processRobot+0xa8c>
                else if (isButtonPressed(BUTTON_3))
 8002370:	2002      	movs	r0, #2
 8002372:	f7fe f8ef 	bl	8000554 <isButtonPressed>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d016      	beq.n	80023aa <processRobot+0x306>
                    uint32_t encoder_3_pulse = getPulseCount(ENCODER_3);
 800237c:	2002      	movs	r0, #2
 800237e:	f7fe fb23 	bl	80009c8 <getPulseCount>
 8002382:	4603      	mov	r3, r0
 8002384:	633b      	str	r3, [r7, #48]	@ 0x30
                    uint8_t transmit_buffer[4] = {0};
 8002386:	2300      	movs	r3, #0
 8002388:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    uint32_to_bytes(&encoder_3_pulse, transmit_buffer, 1);
 800238a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800238e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002392:	2201      	movs	r2, #1
 8002394:	4618      	mov	r0, r3
 8002396:	f001 fc97 	bl	8003cc8 <uint32_to_bytes>
                    uartTransmit8b(&huart2, transmit_buffer, 4);
 800239a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800239e:	2204      	movs	r2, #4
 80023a0:	4619      	mov	r1, r3
 80023a2:	4813      	ldr	r0, [pc, #76]	@ (80023f0 <processRobot+0x34c>)
 80023a4:	f001 fb22 	bl	80039ec <uartTransmit8b>
            break;
 80023a8:	e3c2      	b.n	8002b30 <processRobot+0xa8c>
                else if (isButtonPressed(BUTTON_4))
 80023aa:	2003      	movs	r0, #3
 80023ac:	f7fe f8d2 	bl	8000554 <isButtonPressed>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 83bc 	beq.w	8002b30 <processRobot+0xa8c>
                    uint32_t encoder_4_pulse = getPulseCount(ENCODER_4);
 80023b8:	2003      	movs	r0, #3
 80023ba:	f7fe fb05 	bl	80009c8 <getPulseCount>
 80023be:	4603      	mov	r3, r0
 80023c0:	62bb      	str	r3, [r7, #40]	@ 0x28
                    uint8_t transmit_buffer[4] = {0};
 80023c2:	2300      	movs	r3, #0
 80023c4:	627b      	str	r3, [r7, #36]	@ 0x24
                    uint32_to_bytes(&encoder_4_pulse, transmit_buffer, 1);
 80023c6:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80023ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023ce:	2201      	movs	r2, #1
 80023d0:	4618      	mov	r0, r3
 80023d2:	f001 fc79 	bl	8003cc8 <uint32_to_bytes>
                    uartTransmit8b(&huart2, transmit_buffer, 4);
 80023d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023da:	2204      	movs	r2, #4
 80023dc:	4619      	mov	r1, r3
 80023de:	4804      	ldr	r0, [pc, #16]	@ (80023f0 <processRobot+0x34c>)
 80023e0:	f001 fb04 	bl	80039ec <uartTransmit8b>
            break;
 80023e4:	e3a4      	b.n	8002b30 <processRobot+0xa8c>
 80023e6:	bf00      	nop
 80023e8:	200001c5 	.word	0x200001c5
 80023ec:	200001c6 	.word	0x200001c6
 80023f0:	200003f4 	.word	0x200003f4
 80023f4:	08009bb0 	.word	0x08009bb0
 80023f8:	200001c7 	.word	0x200001c7
            break;
        }

        case MODE_TEST_SERVO_MOTORS:
        {
            if (sTimer2GetFlag())
 80023fc:	f000 fc5c 	bl	8002cb8 <sTimer2GetFlag>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 8396 	beq.w	8002b34 <processRobot+0xa90>
            {
                toggleLedDebug();
 8002408:	f7fe fa5e 	bl	80008c8 <toggleLedDebug>

                (void)scanButton();
 800240c:	f7fe f85c 	bl	80004c8 <scanButton>

                if (isButtonPressed(BUTTON_1))
 8002410:	2000      	movs	r0, #0
 8002412:	f7fe f89f 	bl	8000554 <isButtonPressed>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d010      	beq.n	800243e <processRobot+0x39a>
                {
                    servoSetAngle(SERVO_1, 0);
 800241c:	2100      	movs	r1, #0
 800241e:	2000      	movs	r0, #0
 8002420:	f000 fbc4 	bl	8002bac <servoSetAngle>
                    servoSetAngle(SERVO_2, 0);
 8002424:	2100      	movs	r1, #0
 8002426:	2001      	movs	r0, #1
 8002428:	f000 fbc0 	bl	8002bac <servoSetAngle>
                    servoSetAngle(SERVO_3, 0);
 800242c:	2100      	movs	r1, #0
 800242e:	2002      	movs	r0, #2
 8002430:	f000 fbbc 	bl	8002bac <servoSetAngle>

                    (void)uartTransmitString(&huart2, "Button 1 Pressed\r\n");
 8002434:	49c4      	ldr	r1, [pc, #784]	@ (8002748 <processRobot+0x6a4>)
 8002436:	48c5      	ldr	r0, [pc, #788]	@ (800274c <processRobot+0x6a8>)
 8002438:	f001 faae 	bl	8003998 <uartTransmitString>
                    servoSetAngle(SERVO_3, MAX_SERVO_ANGLE);

                    (void)uartTransmitString(&huart2, "Button 4 Pressed\r\n");
                }
            }
            break;
 800243c:	e37a      	b.n	8002b34 <processRobot+0xa90>
                else if (isButtonPressed(BUTTON_2))
 800243e:	2001      	movs	r0, #1
 8002440:	f7fe f888 	bl	8000554 <isButtonPressed>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d010      	beq.n	800246c <processRobot+0x3c8>
                    servoSetAngle(SERVO_1, 14);
 800244a:	210e      	movs	r1, #14
 800244c:	2000      	movs	r0, #0
 800244e:	f000 fbad 	bl	8002bac <servoSetAngle>
                    servoSetAngle(SERVO_2, 14);
 8002452:	210e      	movs	r1, #14
 8002454:	2001      	movs	r0, #1
 8002456:	f000 fba9 	bl	8002bac <servoSetAngle>
                    servoSetAngle(SERVO_3, 14);
 800245a:	210e      	movs	r1, #14
 800245c:	2002      	movs	r0, #2
 800245e:	f000 fba5 	bl	8002bac <servoSetAngle>
                    (void)uartTransmitString(&huart2, "Button 2 Pressed\r\n");
 8002462:	49bb      	ldr	r1, [pc, #748]	@ (8002750 <processRobot+0x6ac>)
 8002464:	48b9      	ldr	r0, [pc, #740]	@ (800274c <processRobot+0x6a8>)
 8002466:	f001 fa97 	bl	8003998 <uartTransmitString>
            break;
 800246a:	e363      	b.n	8002b34 <processRobot+0xa90>
                else if (isButtonPressed(BUTTON_3))
 800246c:	2002      	movs	r0, #2
 800246e:	f7fe f871 	bl	8000554 <isButtonPressed>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d010      	beq.n	800249a <processRobot+0x3f6>
                    servoSetAngle(SERVO_1, 28);
 8002478:	211c      	movs	r1, #28
 800247a:	2000      	movs	r0, #0
 800247c:	f000 fb96 	bl	8002bac <servoSetAngle>
                    servoSetAngle(SERVO_2, 28);
 8002480:	211c      	movs	r1, #28
 8002482:	2001      	movs	r0, #1
 8002484:	f000 fb92 	bl	8002bac <servoSetAngle>
                    servoSetAngle(SERVO_3, 28);
 8002488:	211c      	movs	r1, #28
 800248a:	2002      	movs	r0, #2
 800248c:	f000 fb8e 	bl	8002bac <servoSetAngle>
                    (void)uartTransmitString(&huart2, "Button 3 Pressed\r\n");
 8002490:	49b0      	ldr	r1, [pc, #704]	@ (8002754 <processRobot+0x6b0>)
 8002492:	48ae      	ldr	r0, [pc, #696]	@ (800274c <processRobot+0x6a8>)
 8002494:	f001 fa80 	bl	8003998 <uartTransmitString>
            break;
 8002498:	e34c      	b.n	8002b34 <processRobot+0xa90>
                else if (isButtonPressed(BUTTON_4))
 800249a:	2003      	movs	r0, #3
 800249c:	f7fe f85a 	bl	8000554 <isButtonPressed>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 8346 	beq.w	8002b34 <processRobot+0xa90>
                    servoSetAngle(SERVO_1, MAX_SERVO_ANGLE);
 80024a8:	2137      	movs	r1, #55	@ 0x37
 80024aa:	2000      	movs	r0, #0
 80024ac:	f000 fb7e 	bl	8002bac <servoSetAngle>
                    servoSetAngle(SERVO_2, MAX_SERVO_ANGLE);
 80024b0:	2137      	movs	r1, #55	@ 0x37
 80024b2:	2001      	movs	r0, #1
 80024b4:	f000 fb7a 	bl	8002bac <servoSetAngle>
                    servoSetAngle(SERVO_3, MAX_SERVO_ANGLE);
 80024b8:	2137      	movs	r1, #55	@ 0x37
 80024ba:	2002      	movs	r0, #2
 80024bc:	f000 fb76 	bl	8002bac <servoSetAngle>
                    (void)uartTransmitString(&huart2, "Button 4 Pressed\r\n");
 80024c0:	49a5      	ldr	r1, [pc, #660]	@ (8002758 <processRobot+0x6b4>)
 80024c2:	48a2      	ldr	r0, [pc, #648]	@ (800274c <processRobot+0x6a8>)
 80024c4:	f001 fa68 	bl	8003998 <uartTransmitString>
            break;
 80024c8:	e334      	b.n	8002b34 <processRobot+0xa90>
        }

        case MODE_TEST_STEP_MOTORS:
        {
            if (sTimer2GetFlag())
 80024ca:	f000 fbf5 	bl	8002cb8 <sTimer2GetFlag>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 8331 	beq.w	8002b38 <processRobot+0xa94>
            {
                toggleLedDebug();
 80024d6:	f7fe f9f7 	bl	80008c8 <toggleLedDebug>
                (void)scanButton();
 80024da:	f7fd fff5 	bl	80004c8 <scanButton>

                if (isButtonPressed(BUTTON_1))
 80024de:	2000      	movs	r0, #0
 80024e0:	f7fe f838 	bl	8000554 <isButtonPressed>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d004      	beq.n	80024f4 <processRobot+0x450>
                {
                    moveStepMotor(UP, 1);
 80024ea:	2101      	movs	r1, #1
 80024ec:	2001      	movs	r0, #1
 80024ee:	f000 fca3 	bl	8002e38 <moveStepMotor>
                else if (isButtonPressed(BUTTON_4))
                {
                    stopStepMotor();
                }
            }
            break;
 80024f2:	e321      	b.n	8002b38 <processRobot+0xa94>
                else if (isButtonPressed(BUTTON_2))
 80024f4:	2001      	movs	r0, #1
 80024f6:	f7fe f82d 	bl	8000554 <isButtonPressed>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <processRobot+0x466>
                    moveStepMotor(DOWN, 1);
 8002500:	2101      	movs	r1, #1
 8002502:	2000      	movs	r0, #0
 8002504:	f000 fc98 	bl	8002e38 <moveStepMotor>
            break;
 8002508:	e316      	b.n	8002b38 <processRobot+0xa94>
                else if (isButtonPressed(BUTTON_3))
 800250a:	2002      	movs	r0, #2
 800250c:	f7fe f822 	bl	8000554 <isButtonPressed>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d004      	beq.n	8002520 <processRobot+0x47c>
                    moveStepMotor(UP, 5);
 8002516:	2105      	movs	r1, #5
 8002518:	2001      	movs	r0, #1
 800251a:	f000 fc8d 	bl	8002e38 <moveStepMotor>
            break;
 800251e:	e30b      	b.n	8002b38 <processRobot+0xa94>
                else if (isButtonPressed(BUTTON_4))
 8002520:	2003      	movs	r0, #3
 8002522:	f7fe f817 	bl	8000554 <isButtonPressed>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 8305 	beq.w	8002b38 <processRobot+0xa94>
                    stopStepMotor();
 800252e:	f000 fd29 	bl	8002f84 <stopStepMotor>
            break;
 8002532:	e301      	b.n	8002b38 <processRobot+0xa94>
        }

        case MODE_TEST_SENSORS:
        {
            if (sTimer2GetFlag())
 8002534:	f000 fbc0 	bl	8002cb8 <sTimer2GetFlag>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 82fe 	beq.w	8002b3c <processRobot+0xa98>
            {
                toggleLedDebug();
 8002540:	f7fe f9c2 	bl	80008c8 <toggleLedDebug>
                (void)scanButton();
 8002544:	f7fd ffc0 	bl	80004c8 <scanButton>

                if (isButtonPressed(BUTTON_1))
 8002548:	2000      	movs	r0, #0
 800254a:	f7fe f803 	bl	8000554 <isButtonPressed>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <processRobot+0x4b6>
                {
                    (void)calibSensor();
 8002554:	f7fe ff26 	bl	80013a4 <calibSensor>
                    uint8_t transmit_buffer[16] = {0};
                    uint16_to_bytes(getSensorValue(), transmit_buffer, 8);
                    (void)uartTransmit8b(&huart2, transmit_buffer, 16);
                }
            }
            break;
 8002558:	e2f0      	b.n	8002b3c <processRobot+0xa98>
                else if (isButtonPressed(BUTTON_2))
 800255a:	2001      	movs	r0, #1
 800255c:	f7fd fffa 	bl	8000554 <isButtonPressed>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d008      	beq.n	8002578 <processRobot+0x4d4>
                    (void)scanSensor();
 8002566:	f7fe ff3f 	bl	80013e8 <scanSensor>
                    displayLeds(getSensorState());
 800256a:	f7ff f83d 	bl	80015e8 <getSensorState>
 800256e:	4603      	mov	r3, r0
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe f995 	bl	80008a0 <displayLeds>
            break;
 8002576:	e2e1      	b.n	8002b3c <processRobot+0xa98>
                else if (isButtonPressed(BUTTON_3))
 8002578:	2002      	movs	r0, #2
 800257a:	f7fd ffeb 	bl	8000554 <isButtonPressed>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d016      	beq.n	80025b2 <processRobot+0x50e>
                    uint8_t transmit_buffer[16] = {0};
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
                    uint16_to_bytes(getSensorCalibValue(), transmit_buffer, 8);
 8002592:	f7ff f833 	bl	80015fc <getSensorCalibValue>
 8002596:	f107 0314 	add.w	r3, r7, #20
 800259a:	2208      	movs	r2, #8
 800259c:	4619      	mov	r1, r3
 800259e:	f001 fbdd 	bl	8003d5c <uint16_to_bytes>
                    (void)uartTransmit8b(&huart2, transmit_buffer, 16);
 80025a2:	f107 0314 	add.w	r3, r7, #20
 80025a6:	2210      	movs	r2, #16
 80025a8:	4619      	mov	r1, r3
 80025aa:	4868      	ldr	r0, [pc, #416]	@ (800274c <processRobot+0x6a8>)
 80025ac:	f001 fa1e 	bl	80039ec <uartTransmit8b>
            break;
 80025b0:	e2c4      	b.n	8002b3c <processRobot+0xa98>
                else if (isButtonPressed(BUTTON_4))
 80025b2:	2003      	movs	r0, #3
 80025b4:	f7fd ffce 	bl	8000554 <isButtonPressed>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 82be 	beq.w	8002b3c <processRobot+0xa98>
                    uint8_t transmit_buffer[16] = {0};
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	60da      	str	r2, [r3, #12]
                    uint16_to_bytes(getSensorValue(), transmit_buffer, 8);
 80025cc:	f7ff f820 	bl	8001610 <getSensorValue>
 80025d0:	1d3b      	adds	r3, r7, #4
 80025d2:	2208      	movs	r2, #8
 80025d4:	4619      	mov	r1, r3
 80025d6:	f001 fbc1 	bl	8003d5c <uint16_to_bytes>
                    (void)uartTransmit8b(&huart2, transmit_buffer, 16);
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	2210      	movs	r2, #16
 80025de:	4619      	mov	r1, r3
 80025e0:	485a      	ldr	r0, [pc, #360]	@ (800274c <processRobot+0x6a8>)
 80025e2:	f001 fa03 	bl	80039ec <uartTransmit8b>
            break;
 80025e6:	e2a9      	b.n	8002b3c <processRobot+0xa98>
            break;
        }

        case MODE_CONTEST_AUTONOMOUS_1:
        {
            if (sTimer2GetFlag())
 80025e8:	f000 fb66 	bl	8002cb8 <sTimer2GetFlag>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 82a6 	beq.w	8002b40 <processRobot+0xa9c>
            {
                static enum StatusCode is_robot_ready = STATUS_ERROR;

                (void)scanButton();
 80025f4:	f7fd ff68 	bl	80004c8 <scanButton>

                if (isButtonPressed(BUTTON_1))
 80025f8:	2000      	movs	r0, #0
 80025fa:	f7fd ffab 	bl	8000554 <isButtonPressed>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <processRobot+0x566>
                {
                    (void)calibSensor();
 8002604:	f7fe fece 	bl	80013a4 <calibSensor>
 8002608:	e00c      	b.n	8002624 <processRobot+0x580>
                }
                else if (isButtonPressed(BUTTON_2))
 800260a:	2001      	movs	r0, #1
 800260c:	f7fd ffa2 	bl	8000554 <isButtonPressed>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d006      	beq.n	8002624 <processRobot+0x580>
                {
                    servoSetAngle(SERVO_3, 55);
 8002616:	2137      	movs	r1, #55	@ 0x37
 8002618:	2002      	movs	r0, #2
 800261a:	f000 fac7 	bl	8002bac <servoSetAngle>
                    is_robot_ready = STATUS_OK;
 800261e:	4b4f      	ldr	r3, [pc, #316]	@ (800275c <processRobot+0x6b8>)
 8002620:	2201      	movs	r2, #1
 8002622:	701a      	strb	r2, [r3, #0]
                }

                (void)scanSensor();
 8002624:	f7fe fee0 	bl	80013e8 <scanSensor>
                displayLeds(getSensorState());
 8002628:	f7fe ffde 	bl	80015e8 <getSensorState>
 800262c:	4603      	mov	r3, r0
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe f936 	bl	80008a0 <displayLeds>

                if (is_robot_ready == STATUS_OK)
 8002634:	4b49      	ldr	r3, [pc, #292]	@ (800275c <processRobot+0x6b8>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b01      	cmp	r3, #1
 800263a:	f040 8281 	bne.w	8002b40 <processRobot+0xa9c>
                {
                    toggleLedDebug();
 800263e:	f7fe f943 	bl	80008c8 <toggleLedDebug>

                    static uint16_t previous_cross_count = 0;
                    static uint16_t counter = 0;

                    followLine();
 8002642:	f7fe f9d1 	bl	80009e8 <followLine>
                    turnRightAtCross(1);
 8002646:	2001      	movs	r0, #1
 8002648:	f7fe fa62 	bl	8000b10 <turnRightAtCross>
                    turnLeftAtCross(2);
 800264c:	2002      	movs	r0, #2
 800264e:	f7fe fb31 	bl	8000cb4 <turnLeftAtCross>
                    turnRightAtCross(4);
 8002652:	2004      	movs	r0, #4
 8002654:	f7fe fa5c 	bl	8000b10 <turnRightAtCross>
                    turnLeftAtCross(5);
 8002658:	2005      	movs	r0, #5
 800265a:	f7fe fb2b 	bl	8000cb4 <turnLeftAtCross>
                    turnRightAtCross(10);
 800265e:	200a      	movs	r0, #10
 8002660:	f7fe fa56 	bl	8000b10 <turnRightAtCross>

                    switch (getCrossCount())
 8002664:	f7fe fc88 	bl	8000f78 <getCrossCount>
 8002668:	4603      	mov	r3, r0
 800266a:	2b09      	cmp	r3, #9
 800266c:	d055      	beq.n	800271a <processRobot+0x676>
 800266e:	2b09      	cmp	r3, #9
 8002670:	f300 809f 	bgt.w	80027b2 <processRobot+0x70e>
 8002674:	2b07      	cmp	r3, #7
 8002676:	d002      	beq.n	800267e <processRobot+0x5da>
 8002678:	2b08      	cmp	r3, #8
 800267a:	d018      	beq.n	80026ae <processRobot+0x60a>
                        }
                        break;
                    }

                    default:
                        break;
 800267c:	e099      	b.n	80027b2 <processRobot+0x70e>
                        if (previous_cross_count != getCrossCount())
 800267e:	f7fe fc7b 	bl	8000f78 <getCrossCount>
 8002682:	4603      	mov	r3, r0
 8002684:	461a      	mov	r2, r3
 8002686:	4b36      	ldr	r3, [pc, #216]	@ (8002760 <processRobot+0x6bc>)
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	f000 8093 	beq.w	80027b6 <processRobot+0x712>
                            previous_cross_count = getCrossCount();
 8002690:	f7fe fc72 	bl	8000f78 <getCrossCount>
 8002694:	4603      	mov	r3, r0
 8002696:	461a      	mov	r2, r3
 8002698:	4b31      	ldr	r3, [pc, #196]	@ (8002760 <processRobot+0x6bc>)
 800269a:	801a      	strh	r2, [r3, #0]
                            servoSetAngle(SERVO_3, 0);
 800269c:	2100      	movs	r1, #0
 800269e:	2002      	movs	r0, #2
 80026a0:	f000 fa84 	bl	8002bac <servoSetAngle>
                            moveStepMotor(DOWN, 10);
 80026a4:	210a      	movs	r1, #10
 80026a6:	2000      	movs	r0, #0
 80026a8:	f000 fbc6 	bl	8002e38 <moveStepMotor>
                        break;
 80026ac:	e083      	b.n	80027b6 <processRobot+0x712>
                        if (previous_cross_count != getCrossCount())
 80026ae:	f7fe fc63 	bl	8000f78 <getCrossCount>
 80026b2:	4603      	mov	r3, r0
 80026b4:	461a      	mov	r2, r3
 80026b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002760 <processRobot+0x6bc>)
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d012      	beq.n	80026e4 <processRobot+0x640>
                            previous_cross_count = getCrossCount();
 80026be:	f7fe fc5b 	bl	8000f78 <getCrossCount>
 80026c2:	4603      	mov	r3, r0
 80026c4:	461a      	mov	r2, r3
 80026c6:	4b26      	ldr	r3, [pc, #152]	@ (8002760 <processRobot+0x6bc>)
 80026c8:	801a      	strh	r2, [r3, #0]
                            disableFollowLine();
 80026ca:	f7fe fc3d 	bl	8000f48 <disableFollowLine>
                            motorStop();
 80026ce:	f7ff fa6d 	bl	8001bac <motorStop>
                            servoSetAngle(SERVO_3, 55);
 80026d2:	2137      	movs	r1, #55	@ 0x37
 80026d4:	2002      	movs	r0, #2
 80026d6:	f000 fa69 	bl	8002bac <servoSetAngle>
                            moveStepMotor(UP, 5);
 80026da:	2105      	movs	r1, #5
 80026dc:	2001      	movs	r0, #1
 80026de:	f000 fbab 	bl	8002e38 <moveStepMotor>
                        break;
 80026e2:	e06a      	b.n	80027ba <processRobot+0x716>
                            counter = (counter + 1) % 40;
 80026e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002764 <processRobot+0x6c0>)
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002768 <processRobot+0x6c4>)
 80026ec:	fb83 1302 	smull	r1, r3, r3, r2
 80026f0:	1119      	asrs	r1, r3, #4
 80026f2:	17d3      	asrs	r3, r2, #31
 80026f4:	1ac9      	subs	r1, r1, r3
 80026f6:	460b      	mov	r3, r1
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	1ad1      	subs	r1, r2, r3
 8002700:	b28a      	uxth	r2, r1
 8002702:	4b18      	ldr	r3, [pc, #96]	@ (8002764 <processRobot+0x6c0>)
 8002704:	801a      	strh	r2, [r3, #0]
                            if (counter == 0)
 8002706:	4b17      	ldr	r3, [pc, #92]	@ (8002764 <processRobot+0x6c0>)
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d155      	bne.n	80027ba <processRobot+0x716>
                                enableFollowLine();
 800270e:	f7fe fc27 	bl	8000f60 <enableFollowLine>
                                moveForward(20);
 8002712:	2014      	movs	r0, #20
 8002714:	f7ff fa5a 	bl	8001bcc <moveForward>
                        break;
 8002718:	e04f      	b.n	80027ba <processRobot+0x716>
                        if (previous_cross_count != getCrossCount())
 800271a:	f7fe fc2d 	bl	8000f78 <getCrossCount>
 800271e:	4603      	mov	r3, r0
 8002720:	461a      	mov	r2, r3
 8002722:	4b0f      	ldr	r3, [pc, #60]	@ (8002760 <processRobot+0x6bc>)
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d020      	beq.n	800276c <processRobot+0x6c8>
                            previous_cross_count = getCrossCount();
 800272a:	f7fe fc25 	bl	8000f78 <getCrossCount>
 800272e:	4603      	mov	r3, r0
 8002730:	461a      	mov	r2, r3
 8002732:	4b0b      	ldr	r3, [pc, #44]	@ (8002760 <processRobot+0x6bc>)
 8002734:	801a      	strh	r2, [r3, #0]
                            disableFollowLine();
 8002736:	f7fe fc07 	bl	8000f48 <disableFollowLine>
                            motorStop();
 800273a:	f7ff fa37 	bl	8001bac <motorStop>
                            moveStepMotor(DOWN, 5);
 800273e:	2105      	movs	r1, #5
 8002740:	2000      	movs	r0, #0
 8002742:	f000 fb79 	bl	8002e38 <moveStepMotor>
                        break;
 8002746:	e039      	b.n	80027bc <processRobot+0x718>
 8002748:	08009bd0 	.word	0x08009bd0
 800274c:	200003f4 	.word	0x200003f4
 8002750:	08009be4 	.word	0x08009be4
 8002754:	08009bf8 	.word	0x08009bf8
 8002758:	08009c0c 	.word	0x08009c0c
 800275c:	200001c8 	.word	0x200001c8
 8002760:	200001ca 	.word	0x200001ca
 8002764:	200001cc 	.word	0x200001cc
 8002768:	66666667 	.word	0x66666667
                            counter = (counter + 1) % 20; // 1 seconds
 800276c:	4bbe      	ldr	r3, [pc, #760]	@ (8002a68 <processRobot+0x9c4>)
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	4bbe      	ldr	r3, [pc, #760]	@ (8002a6c <processRobot+0x9c8>)
 8002774:	fb83 1302 	smull	r1, r3, r3, r2
 8002778:	10d9      	asrs	r1, r3, #3
 800277a:	17d3      	asrs	r3, r2, #31
 800277c:	1ac9      	subs	r1, r1, r3
 800277e:	460b      	mov	r3, r1
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	1ad1      	subs	r1, r2, r3
 8002788:	b28a      	uxth	r2, r1
 800278a:	4bb7      	ldr	r3, [pc, #732]	@ (8002a68 <processRobot+0x9c4>)
 800278c:	801a      	strh	r2, [r3, #0]
                            if (counter == 0)
 800278e:	4bb6      	ldr	r3, [pc, #728]	@ (8002a68 <processRobot+0x9c4>)
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d103      	bne.n	800279e <processRobot+0x6fa>
                                servoSetAngle(SERVO_3, 0);
 8002796:	2100      	movs	r1, #0
 8002798:	2002      	movs	r0, #2
 800279a:	f000 fa07 	bl	8002bac <servoSetAngle>
                            moveStepMotor(UP, 10);
 800279e:	210a      	movs	r1, #10
 80027a0:	2001      	movs	r0, #1
 80027a2:	f000 fb49 	bl	8002e38 <moveStepMotor>
                            enableFollowLine();
 80027a6:	f7fe fbdb 	bl	8000f60 <enableFollowLine>
                            turnAroundAtCross(10);
 80027aa:	200a      	movs	r0, #10
 80027ac:	f7fe fb54 	bl	8000e58 <turnAroundAtCross>
                        break;
 80027b0:	e004      	b.n	80027bc <processRobot+0x718>
                        break;
 80027b2:	bf00      	nop
 80027b4:	e1c4      	b.n	8002b40 <processRobot+0xa9c>
                        break;
 80027b6:	bf00      	nop
 80027b8:	e1c2      	b.n	8002b40 <processRobot+0xa9c>
                        break;
 80027ba:	bf00      	nop
                    // {
                    //     setFreqBuzzer(1000);
                    // }
                }
            }
            break;
 80027bc:	e1c0      	b.n	8002b40 <processRobot+0xa9c>
        }

        case MODE_TEST_GAMEPAD:
        case MODE_CONTEST_CONTROLLED_1:
        {
            if (sTimer2GetFlag())
 80027be:	f000 fa7b 	bl	8002cb8 <sTimer2GetFlag>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 81bd 	beq.w	8002b44 <processRobot+0xaa0>
            {
                toggleLedDebug();
 80027ca:	f7fe f87d 	bl	80008c8 <toggleLedDebug>

                if (readGamepadData() == STATUS_OK)
 80027ce:	f7fe fc01 	bl	8000fd4 <readGamepadData>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	f040 81b5 	bne.w	8002b44 <processRobot+0xaa0>
                {
                    uint8_t speed = 25;
 80027da:	2319      	movs	r3, #25
 80027dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

                    if (isGamepadButtonPressed(BUTTON_TRIANGLE))
 80027e0:	2007      	movs	r0, #7
 80027e2:	f7fe fc11 	bl	8001008 <isGamepadButtonPressed>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <processRobot+0x754>
                    {
                        speed *= 2;
 80027ec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80027f6:	e00a      	b.n	800280e <processRobot+0x76a>
                    }
                    else if (isGamepadButtonPressed(BUTTON_CROSS))
 80027f8:	2004      	movs	r0, #4
 80027fa:	f7fe fc05 	bl	8001008 <isGamepadButtonPressed>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d004      	beq.n	800280e <processRobot+0x76a>
                    {
                        speed /= 2;
 8002804:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002808:	085b      	lsrs	r3, r3, #1
 800280a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                    }

                    if (isGamepadButtonPressed(BUTTON_UP))
 800280e:	2000      	movs	r0, #0
 8002810:	f7fe fbfa 	bl	8001008 <isGamepadButtonPressed>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d006      	beq.n	8002828 <processRobot+0x784>
                    {
                        moveDirection(FORWARD, speed);
 800281a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800281e:	4619      	mov	r1, r3
 8002820:	2000      	movs	r0, #0
 8002822:	f7ff fabb 	bl	8001d9c <moveDirection>
 8002826:	e042      	b.n	80028ae <processRobot+0x80a>
                    }
                    else if (isGamepadButtonPressed(BUTTON_DOWN))
 8002828:	2001      	movs	r0, #1
 800282a:	f7fe fbed 	bl	8001008 <isGamepadButtonPressed>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d006      	beq.n	8002842 <processRobot+0x79e>
                    {
                        moveDirection(BACKWARD, speed);
 8002834:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002838:	4619      	mov	r1, r3
 800283a:	2001      	movs	r0, #1
 800283c:	f7ff faae 	bl	8001d9c <moveDirection>
 8002840:	e035      	b.n	80028ae <processRobot+0x80a>
                    }
                    else if (isGamepadButtonPressed(BUTTON_LEFT))
 8002842:	2003      	movs	r0, #3
 8002844:	f7fe fbe0 	bl	8001008 <isGamepadButtonPressed>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d006      	beq.n	800285c <processRobot+0x7b8>
                    {
                        moveDirection(LEFT, speed);
 800284e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002852:	4619      	mov	r1, r3
 8002854:	2002      	movs	r0, #2
 8002856:	f7ff faa1 	bl	8001d9c <moveDirection>
 800285a:	e028      	b.n	80028ae <processRobot+0x80a>
                    }
                    else if (isGamepadButtonPressed(BUTTON_RIGHT))
 800285c:	2002      	movs	r0, #2
 800285e:	f7fe fbd3 	bl	8001008 <isGamepadButtonPressed>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d006      	beq.n	8002876 <processRobot+0x7d2>
                    {
                        moveDirection(RIGHT, speed);
 8002868:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800286c:	4619      	mov	r1, r3
 800286e:	2003      	movs	r0, #3
 8002870:	f7ff fa94 	bl	8001d9c <moveDirection>
 8002874:	e01b      	b.n	80028ae <processRobot+0x80a>
                    }
                    else if (isGamepadButtonPressed(BUTTON_SQUARE))
 8002876:	2006      	movs	r0, #6
 8002878:	f7fe fbc6 	bl	8001008 <isGamepadButtonPressed>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d006      	beq.n	8002890 <processRobot+0x7ec>
                    {
                        moveDirection(ROTATE_LEFT, speed);
 8002882:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002886:	4619      	mov	r1, r3
 8002888:	2008      	movs	r0, #8
 800288a:	f7ff fa87 	bl	8001d9c <moveDirection>
 800288e:	e00e      	b.n	80028ae <processRobot+0x80a>
                    }
                    else if (isGamepadButtonPressed(BUTTON_CIRCLE))
 8002890:	2005      	movs	r0, #5
 8002892:	f7fe fbb9 	bl	8001008 <isGamepadButtonPressed>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d006      	beq.n	80028aa <processRobot+0x806>
                    {
                        moveDirection(ROTATE_RIGHT, speed);
 800289c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80028a0:	4619      	mov	r1, r3
 80028a2:	2009      	movs	r0, #9
 80028a4:	f7ff fa7a 	bl	8001d9c <moveDirection>
 80028a8:	e001      	b.n	80028ae <processRobot+0x80a>
                    }
                    else
                    {
                        motorStop();
 80028aa:	f7ff f97f 	bl	8001bac <motorStop>
                    }

                    if (isGamepadButtonPressed(BUTTON_L1))
 80028ae:	2008      	movs	r0, #8
 80028b0:	f7fe fbaa 	bl	8001008 <isGamepadButtonPressed>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d004      	beq.n	80028c4 <processRobot+0x820>
                    {
                        moveStepMotor(UP, 1);
 80028ba:	2101      	movs	r1, #1
 80028bc:	2001      	movs	r0, #1
 80028be:	f000 fabb 	bl	8002e38 <moveStepMotor>
 80028c2:	e00c      	b.n	80028de <processRobot+0x83a>
                    }
                    else if (isGamepadButtonPressed(BUTTON_L2))
 80028c4:	2009      	movs	r0, #9
 80028c6:	f7fe fb9f 	bl	8001008 <isGamepadButtonPressed>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d004      	beq.n	80028da <processRobot+0x836>
                    {
                        moveStepMotor(DOWN, 1);
 80028d0:	2101      	movs	r1, #1
 80028d2:	2000      	movs	r0, #0
 80028d4:	f000 fab0 	bl	8002e38 <moveStepMotor>
 80028d8:	e001      	b.n	80028de <processRobot+0x83a>
                    }
                    else
                    {
                        stopStepMotor();
 80028da:	f000 fb53 	bl	8002f84 <stopStepMotor>
                    }

                    static uint8_t angle = 0;
                    static uint8_t angle_step = 5;
                    if (isGamepadButtonPressed(BUTTON_R1))
 80028de:	200a      	movs	r0, #10
 80028e0:	f7fe fb92 	bl	8001008 <isGamepadButtonPressed>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d020      	beq.n	800292c <processRobot+0x888>
                    {
                        angle = (angle < MAX_SERVO_ANGLE) ? (angle + angle_step) : MAX_SERVO_ANGLE;
 80028ea:	4b61      	ldr	r3, [pc, #388]	@ (8002a70 <processRobot+0x9cc>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b36      	cmp	r3, #54	@ 0x36
 80028f0:	d806      	bhi.n	8002900 <processRobot+0x85c>
 80028f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002a70 <processRobot+0x9cc>)
 80028f4:	781a      	ldrb	r2, [r3, #0]
 80028f6:	4b5f      	ldr	r3, [pc, #380]	@ (8002a74 <processRobot+0x9d0>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	4413      	add	r3, r2
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	e000      	b.n	8002902 <processRobot+0x85e>
 8002900:	2337      	movs	r3, #55	@ 0x37
 8002902:	4a5b      	ldr	r2, [pc, #364]	@ (8002a70 <processRobot+0x9cc>)
 8002904:	7013      	strb	r3, [r2, #0]

                        servoSetAngle(SERVO_1, angle);
 8002906:	4b5a      	ldr	r3, [pc, #360]	@ (8002a70 <processRobot+0x9cc>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	4619      	mov	r1, r3
 800290c:	2000      	movs	r0, #0
 800290e:	f000 f94d 	bl	8002bac <servoSetAngle>
                        servoSetAngle(SERVO_2, angle);
 8002912:	4b57      	ldr	r3, [pc, #348]	@ (8002a70 <processRobot+0x9cc>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	4619      	mov	r1, r3
 8002918:	2001      	movs	r0, #1
 800291a:	f000 f947 	bl	8002bac <servoSetAngle>
                        servoSetAngle(SERVO_3, angle);
 800291e:	4b54      	ldr	r3, [pc, #336]	@ (8002a70 <processRobot+0x9cc>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	4619      	mov	r1, r3
 8002924:	2002      	movs	r0, #2
 8002926:	f000 f941 	bl	8002bac <servoSetAngle>
                        servoSetAngle(SERVO_3, angle);
                    }
                }
            }

            break;
 800292a:	e10b      	b.n	8002b44 <processRobot+0xaa0>
                    else if (isGamepadButtonPressed(BUTTON_R2))
 800292c:	200b      	movs	r0, #11
 800292e:	f7fe fb6b 	bl	8001008 <isGamepadButtonPressed>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 8105 	beq.w	8002b44 <processRobot+0xaa0>
                        angle = (angle > 0) ? (angle - angle_step) : 0;
 800293a:	4b4d      	ldr	r3, [pc, #308]	@ (8002a70 <processRobot+0x9cc>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d006      	beq.n	8002950 <processRobot+0x8ac>
 8002942:	4b4b      	ldr	r3, [pc, #300]	@ (8002a70 <processRobot+0x9cc>)
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	4b4b      	ldr	r3, [pc, #300]	@ (8002a74 <processRobot+0x9d0>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	e000      	b.n	8002952 <processRobot+0x8ae>
 8002950:	2300      	movs	r3, #0
 8002952:	4a47      	ldr	r2, [pc, #284]	@ (8002a70 <processRobot+0x9cc>)
 8002954:	7013      	strb	r3, [r2, #0]
                        servoSetAngle(SERVO_1, angle);
 8002956:	4b46      	ldr	r3, [pc, #280]	@ (8002a70 <processRobot+0x9cc>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	4619      	mov	r1, r3
 800295c:	2000      	movs	r0, #0
 800295e:	f000 f925 	bl	8002bac <servoSetAngle>
                        servoSetAngle(SERVO_2, angle);
 8002962:	4b43      	ldr	r3, [pc, #268]	@ (8002a70 <processRobot+0x9cc>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	4619      	mov	r1, r3
 8002968:	2001      	movs	r0, #1
 800296a:	f000 f91f 	bl	8002bac <servoSetAngle>
                        servoSetAngle(SERVO_3, angle);
 800296e:	4b40      	ldr	r3, [pc, #256]	@ (8002a70 <processRobot+0x9cc>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	4619      	mov	r1, r3
 8002974:	2002      	movs	r0, #2
 8002976:	f000 f919 	bl	8002bac <servoSetAngle>
            break;
 800297a:	e0e3      	b.n	8002b44 <processRobot+0xaa0>
        }

        case MODE_TEST_MODULE_MKE:
        case MODE_CONTEST_CONTROLLED_2:
        {
            if (getFlagUart1())
 800297c:	f001 f862 	bl	8003a44 <getFlagUart1>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <processRobot+0x8e6>
            {
                (void)readSWGamepadData();
 8002986:	f7fe ff29 	bl	80017dc <readSWGamepadData>
            }
            if (sTimer2GetFlag())
 800298a:	f000 f995 	bl	8002cb8 <sTimer2GetFlag>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80d9 	beq.w	8002b48 <processRobot+0xaa4>
            {
                toggleLedDebug();
 8002996:	f7fd ff97 	bl	80008c8 <toggleLedDebug>

                uint8_t speed = 25;
 800299a:	2319      	movs	r3, #25
 800299c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

                if (isSWGamepadButtonPressed(SW_BUTTON_START))
 80029a0:	2008      	movs	r0, #8
 80029a2:	f7fe ff6f 	bl	8001884 <isSWGamepadButtonPressed>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <processRobot+0x914>
                {
                    speed *= 2;
 80029ac:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80029b6:	e00a      	b.n	80029ce <processRobot+0x92a>
                }
                else if (isSWGamepadButtonPressed(SW_BUTTON_SELECT))
 80029b8:	2009      	movs	r0, #9
 80029ba:	f7fe ff63 	bl	8001884 <isSWGamepadButtonPressed>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d004      	beq.n	80029ce <processRobot+0x92a>
                {
                    speed /= 2;
 80029c4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80029c8:	085b      	lsrs	r3, r3, #1
 80029ca:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
                }

                if (isSWGamepadButtonPressed(SW_BUTTON_UP))
 80029ce:	2000      	movs	r0, #0
 80029d0:	f7fe ff58 	bl	8001884 <isSWGamepadButtonPressed>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d006      	beq.n	80029e8 <processRobot+0x944>
                {
                    moveDirection(FORWARD, speed);
 80029da:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80029de:	4619      	mov	r1, r3
 80029e0:	2000      	movs	r0, #0
 80029e2:	f7ff f9db 	bl	8001d9c <moveDirection>
 80029e6:	e028      	b.n	8002a3a <processRobot+0x996>
                }
                else if (isSWGamepadButtonPressed(SW_BUTTON_DOWN))
 80029e8:	2001      	movs	r0, #1
 80029ea:	f7fe ff4b 	bl	8001884 <isSWGamepadButtonPressed>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d006      	beq.n	8002a02 <processRobot+0x95e>
                {
                    moveDirection(BACKWARD, speed);
 80029f4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80029f8:	4619      	mov	r1, r3
 80029fa:	2001      	movs	r0, #1
 80029fc:	f7ff f9ce 	bl	8001d9c <moveDirection>
 8002a00:	e01b      	b.n	8002a3a <processRobot+0x996>
                }
                else if (isSWGamepadButtonPressed(SW_BUTTON_LEFT))
 8002a02:	2002      	movs	r0, #2
 8002a04:	f7fe ff3e 	bl	8001884 <isSWGamepadButtonPressed>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d006      	beq.n	8002a1c <processRobot+0x978>
                {
                    moveDirection(LEFT, speed);
 8002a0e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002a12:	4619      	mov	r1, r3
 8002a14:	2002      	movs	r0, #2
 8002a16:	f7ff f9c1 	bl	8001d9c <moveDirection>
 8002a1a:	e00e      	b.n	8002a3a <processRobot+0x996>
                }
                else if (isSWGamepadButtonPressed(SW_BUTTON_RIGHT))
 8002a1c:	2003      	movs	r0, #3
 8002a1e:	f7fe ff31 	bl	8001884 <isSWGamepadButtonPressed>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d006      	beq.n	8002a36 <processRobot+0x992>
                {
                    moveDirection(RIGHT, speed);
 8002a28:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	2003      	movs	r0, #3
 8002a30:	f7ff f9b4 	bl	8001d9c <moveDirection>
 8002a34:	e001      	b.n	8002a3a <processRobot+0x996>
                }
                else
                {
                    motorStop();
 8002a36:	f7ff f8b9 	bl	8001bac <motorStop>
                }

                if (isSWGamepadButtonPressed(SW_BUTTON_CROSS))
 8002a3a:	2004      	movs	r0, #4
 8002a3c:	f7fe ff22 	bl	8001884 <isSWGamepadButtonPressed>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d004      	beq.n	8002a50 <processRobot+0x9ac>
                {
                    moveStepMotor(DOWN, 1);
 8002a46:	2101      	movs	r1, #1
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f000 f9f5 	bl	8002e38 <moveStepMotor>
 8002a4e:	e015      	b.n	8002a7c <processRobot+0x9d8>
                }
                else if (isSWGamepadButtonPressed(SW_BUTTON_TRIANGLE))
 8002a50:	2007      	movs	r0, #7
 8002a52:	f7fe ff17 	bl	8001884 <isSWGamepadButtonPressed>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00d      	beq.n	8002a78 <processRobot+0x9d4>
                {
                    moveStepMotor(UP, 1);
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	2001      	movs	r0, #1
 8002a60:	f000 f9ea 	bl	8002e38 <moveStepMotor>
 8002a64:	e00a      	b.n	8002a7c <processRobot+0x9d8>
 8002a66:	bf00      	nop
 8002a68:	200001cc 	.word	0x200001cc
 8002a6c:	66666667 	.word	0x66666667
 8002a70:	200001ce 	.word	0x200001ce
 8002a74:	20000026 	.word	0x20000026
                }
                else
                {
                    stopStepMotor();
 8002a78:	f000 fa84 	bl	8002f84 <stopStepMotor>
                }

                static uint8_t angle = 0;
                static uint8_t angle_step = 5;
                if (isSWGamepadButtonPressed(SW_BUTTON_CIRCLE))
 8002a7c:	2005      	movs	r0, #5
 8002a7e:	f7fe ff01 	bl	8001884 <isSWGamepadButtonPressed>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d020      	beq.n	8002aca <processRobot+0xa26>
                {
                    angle = (angle < MAX_SERVO_ANGLE) ? (angle + angle_step) : MAX_SERVO_ANGLE;
 8002a88:	4b32      	ldr	r3, [pc, #200]	@ (8002b54 <processRobot+0xab0>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b36      	cmp	r3, #54	@ 0x36
 8002a8e:	d806      	bhi.n	8002a9e <processRobot+0x9fa>
 8002a90:	4b30      	ldr	r3, [pc, #192]	@ (8002b54 <processRobot+0xab0>)
 8002a92:	781a      	ldrb	r2, [r3, #0]
 8002a94:	4b30      	ldr	r3, [pc, #192]	@ (8002b58 <processRobot+0xab4>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	4413      	add	r3, r2
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	e000      	b.n	8002aa0 <processRobot+0x9fc>
 8002a9e:	2337      	movs	r3, #55	@ 0x37
 8002aa0:	4a2c      	ldr	r2, [pc, #176]	@ (8002b54 <processRobot+0xab0>)
 8002aa2:	7013      	strb	r3, [r2, #0]

                    servoSetAngle(SERVO_1, angle);
 8002aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b54 <processRobot+0xab0>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f000 f87e 	bl	8002bac <servoSetAngle>
                    servoSetAngle(SERVO_2, angle);
 8002ab0:	4b28      	ldr	r3, [pc, #160]	@ (8002b54 <processRobot+0xab0>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	2001      	movs	r0, #1
 8002ab8:	f000 f878 	bl	8002bac <servoSetAngle>
                    servoSetAngle(SERVO_3, angle);
 8002abc:	4b25      	ldr	r3, [pc, #148]	@ (8002b54 <processRobot+0xab0>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	2002      	movs	r0, #2
 8002ac4:	f000 f872 	bl	8002bac <servoSetAngle>
                    servoSetAngle(SERVO_1, angle);
                    servoSetAngle(SERVO_2, angle);
                    servoSetAngle(SERVO_3, angle);
                }
            }
            break;
 8002ac8:	e03e      	b.n	8002b48 <processRobot+0xaa4>
                else if (isSWGamepadButtonPressed(SW_BUTTON_SQUARE))
 8002aca:	2006      	movs	r0, #6
 8002acc:	f7fe feda 	bl	8001884 <isSWGamepadButtonPressed>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d038      	beq.n	8002b48 <processRobot+0xaa4>
                    angle = (angle > 0) ? (angle - angle_step) : 0;
 8002ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8002b54 <processRobot+0xab0>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d006      	beq.n	8002aec <processRobot+0xa48>
 8002ade:	4b1d      	ldr	r3, [pc, #116]	@ (8002b54 <processRobot+0xab0>)
 8002ae0:	781a      	ldrb	r2, [r3, #0]
 8002ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8002b58 <processRobot+0xab4>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	e000      	b.n	8002aee <processRobot+0xa4a>
 8002aec:	2300      	movs	r3, #0
 8002aee:	4a19      	ldr	r2, [pc, #100]	@ (8002b54 <processRobot+0xab0>)
 8002af0:	7013      	strb	r3, [r2, #0]
                    servoSetAngle(SERVO_1, angle);
 8002af2:	4b18      	ldr	r3, [pc, #96]	@ (8002b54 <processRobot+0xab0>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	4619      	mov	r1, r3
 8002af8:	2000      	movs	r0, #0
 8002afa:	f000 f857 	bl	8002bac <servoSetAngle>
                    servoSetAngle(SERVO_2, angle);
 8002afe:	4b15      	ldr	r3, [pc, #84]	@ (8002b54 <processRobot+0xab0>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	4619      	mov	r1, r3
 8002b04:	2001      	movs	r0, #1
 8002b06:	f000 f851 	bl	8002bac <servoSetAngle>
                    servoSetAngle(SERVO_3, angle);
 8002b0a:	4b12      	ldr	r3, [pc, #72]	@ (8002b54 <processRobot+0xab0>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	2002      	movs	r0, #2
 8002b12:	f000 f84b 	bl	8002bac <servoSetAngle>
            break;
 8002b16:	e017      	b.n	8002b48 <processRobot+0xaa4>
        }

        default:
        {
            return STATUS_ERROR;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	e017      	b.n	8002b4c <processRobot+0xaa8>
            break;
 8002b1c:	bf00      	nop
 8002b1e:	e014      	b.n	8002b4a <processRobot+0xaa6>
            break;
 8002b20:	bf00      	nop
 8002b22:	e012      	b.n	8002b4a <processRobot+0xaa6>
            break;
 8002b24:	bf00      	nop
 8002b26:	e010      	b.n	8002b4a <processRobot+0xaa6>
            break;
 8002b28:	bf00      	nop
 8002b2a:	e00e      	b.n	8002b4a <processRobot+0xaa6>
            break;
 8002b2c:	bf00      	nop
 8002b2e:	e00c      	b.n	8002b4a <processRobot+0xaa6>
            break;
 8002b30:	bf00      	nop
 8002b32:	e00a      	b.n	8002b4a <processRobot+0xaa6>
            break;
 8002b34:	bf00      	nop
 8002b36:	e008      	b.n	8002b4a <processRobot+0xaa6>
            break;
 8002b38:	bf00      	nop
 8002b3a:	e006      	b.n	8002b4a <processRobot+0xaa6>
            break;
 8002b3c:	bf00      	nop
 8002b3e:	e004      	b.n	8002b4a <processRobot+0xaa6>
            break;
 8002b40:	bf00      	nop
 8002b42:	e002      	b.n	8002b4a <processRobot+0xaa6>
            break;
 8002b44:	bf00      	nop
 8002b46:	e000      	b.n	8002b4a <processRobot+0xaa6>
            break;
 8002b48:	bf00      	nop
            break;
        }
        }
        return STATUS_OK;
 8002b4a:	2301      	movs	r3, #1
    }
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3748      	adds	r7, #72	@ 0x48
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	200001cf 	.word	0x200001cf
 8002b58:	20000027 	.word	0x20000027

08002b5c <initServo>:
	 * SERVO1: TIM_CHANNEL_3
	 * SERVO2: TIM_CHANNEL_2
	 * SERVO3: TIM_CHANNEL_1
	 */
	enum StatusCode initServo(const enum Servo servo_id)
	{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	71fb      	strb	r3, [r7, #7]
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8002b66:	2300      	movs	r3, #0
 8002b68:	73fb      	strb	r3, [r7, #15]
 8002b6a:	e012      	b.n	8002b92 <initServo+0x36>
		{
			if (HAL_TIM_PWM_Start(&htim4, servo_channel[servo_id]) == HAL_OK)
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	4a0d      	ldr	r2, [pc, #52]	@ (8002ba4 <initServo+0x48>)
 8002b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b74:	4619      	mov	r1, r3
 8002b76:	480c      	ldr	r0, [pc, #48]	@ (8002ba8 <initServo+0x4c>)
 8002b78:	f004 ff98 	bl	8007aac <HAL_TIM_PWM_Start>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <initServo+0x2a>
			{
				return STATUS_OK;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e009      	b.n	8002b9a <initServo+0x3e>
			}

			HAL_Delay(50);
 8002b86:	2032      	movs	r0, #50	@ 0x32
 8002b88:	f001 f9a2 	bl	8003ed0 <HAL_Delay>
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	73fb      	strb	r3, [r7, #15]
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d9e9      	bls.n	8002b6c <initServo+0x10>
		}
		return STATUS_ERROR;
 8002b98:	2300      	movs	r3, #0
	}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	08009c38 	.word	0x08009c38
 8002ba8:	200002d0 	.word	0x200002d0

08002bac <servoSetAngle>:
	 * SERVO1: TIM_CHANNEL_3
	 * SERVO2: TIM_CHANNEL_2
	 * SERVO3: TIM_CHANNEL_1
	 */
	void servoSetAngle(const enum Servo servo_id, uint8_t angle)
	{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	460a      	mov	r2, r1
 8002bb6:	71fb      	strb	r3, [r7, #7]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	71bb      	strb	r3, [r7, #6]
		if (angle < 0)
		{
			angle = 0;
		}
		else if (angle > MAX_SERVO_ANGLE)
 8002bbc:	79bb      	ldrb	r3, [r7, #6]
 8002bbe:	2b37      	cmp	r3, #55	@ 0x37
 8002bc0:	d901      	bls.n	8002bc6 <servoSetAngle+0x1a>
		{
			angle = MAX_SERVO_ANGLE;
 8002bc2:	2337      	movs	r3, #55	@ 0x37
 8002bc4:	71bb      	strb	r3, [r7, #6]
		}

		uint16_t duty_cycle = (angle * 110) / 180 + 20;
 8002bc6:	79bb      	ldrb	r3, [r7, #6]
 8002bc8:	226e      	movs	r2, #110	@ 0x6e
 8002bca:	fb02 f303 	mul.w	r3, r2, r3
 8002bce:	4a1a      	ldr	r2, [pc, #104]	@ (8002c38 <servoSetAngle+0x8c>)
 8002bd0:	fb82 1203 	smull	r1, r2, r2, r3
 8002bd4:	441a      	add	r2, r3
 8002bd6:	11d2      	asrs	r2, r2, #7
 8002bd8:	17db      	asrs	r3, r3, #31
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	3314      	adds	r3, #20
 8002be0:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COMPARE(&htim4, servo_channel[servo_id], duty_cycle);
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	4a15      	ldr	r2, [pc, #84]	@ (8002c3c <servoSetAngle+0x90>)
 8002be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d104      	bne.n	8002bf8 <servoSetAngle+0x4c>
 8002bee:	4b14      	ldr	r3, [pc, #80]	@ (8002c40 <servoSetAngle+0x94>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	89fa      	ldrh	r2, [r7, #14]
 8002bf4:	635a      	str	r2, [r3, #52]	@ 0x34
	}
 8002bf6:	e019      	b.n	8002c2c <servoSetAngle+0x80>
		__HAL_TIM_SET_COMPARE(&htim4, servo_channel[servo_id], duty_cycle);
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	4a10      	ldr	r2, [pc, #64]	@ (8002c3c <servoSetAngle+0x90>)
 8002bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d104      	bne.n	8002c0e <servoSetAngle+0x62>
 8002c04:	4b0e      	ldr	r3, [pc, #56]	@ (8002c40 <servoSetAngle+0x94>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	89fb      	ldrh	r3, [r7, #14]
 8002c0a:	6393      	str	r3, [r2, #56]	@ 0x38
	}
 8002c0c:	e00e      	b.n	8002c2c <servoSetAngle+0x80>
		__HAL_TIM_SET_COMPARE(&htim4, servo_channel[servo_id], duty_cycle);
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	4a0a      	ldr	r2, [pc, #40]	@ (8002c3c <servoSetAngle+0x90>)
 8002c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d104      	bne.n	8002c24 <servoSetAngle+0x78>
 8002c1a:	4b09      	ldr	r3, [pc, #36]	@ (8002c40 <servoSetAngle+0x94>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	89fb      	ldrh	r3, [r7, #14]
 8002c20:	63d3      	str	r3, [r2, #60]	@ 0x3c
	}
 8002c22:	e003      	b.n	8002c2c <servoSetAngle+0x80>
		__HAL_TIM_SET_COMPARE(&htim4, servo_channel[servo_id], duty_cycle);
 8002c24:	4b06      	ldr	r3, [pc, #24]	@ (8002c40 <servoSetAngle+0x94>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	89fb      	ldrh	r3, [r7, #14]
 8002c2a:	6413      	str	r3, [r2, #64]	@ 0x40
	}
 8002c2c:	bf00      	nop
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	b60b60b7 	.word	0xb60b60b7
 8002c3c:	08009c38 	.word	0x08009c38
 8002c40:	200002d0 	.word	0x200002d0

08002c44 <initTimer2>:

	/**
	 * @brief	init timer function
	 */
	enum StatusCode initTimer2()
	{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	71fb      	strb	r3, [r7, #7]
 8002c4e:	e00d      	b.n	8002c6c <initTimer2+0x28>
		{
			if (HAL_TIM_Base_Start_IT(&htim2) == HAL_OK)
 8002c50:	480a      	ldr	r0, [pc, #40]	@ (8002c7c <initTimer2+0x38>)
 8002c52:	f004 fe7b 	bl	800794c <HAL_TIM_Base_Start_IT>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <initTimer2+0x1c>
			{
				return STATUS_OK;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e009      	b.n	8002c74 <initTimer2+0x30>
			}

			HAL_Delay(50);
 8002c60:	2032      	movs	r0, #50	@ 0x32
 8002c62:	f001 f935 	bl	8003ed0 <HAL_Delay>
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	71fb      	strb	r3, [r7, #7]
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d9ee      	bls.n	8002c50 <initTimer2+0xc>
		}
		return STATUS_ERROR;
 8002c72:	2300      	movs	r3, #0
	}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000240 	.word	0x20000240

08002c80 <sTimer2Set>:
	 * @brief	set timer duration(ms)
	 * @param	delay(ms)
	 * @param	period(ms)
	 */
	void sTimer2Set(uint16_t delay, uint16_t period)
	{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	460a      	mov	r2, r1
 8002c8a:	80fb      	strh	r3, [r7, #6]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	80bb      	strh	r3, [r7, #4]
		timer_2_mul = period / TIMER_2_CYCLES;
 8002c90:	4a06      	ldr	r2, [pc, #24]	@ (8002cac <sTimer2Set+0x2c>)
 8002c92:	88bb      	ldrh	r3, [r7, #4]
 8002c94:	8013      	strh	r3, [r2, #0]
		timer_2_counter = delay / TIMER_2_CYCLES;
 8002c96:	4a06      	ldr	r2, [pc, #24]	@ (8002cb0 <sTimer2Set+0x30>)
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	8013      	strh	r3, [r2, #0]
		timer_2_flag = 0;
 8002c9c:	4b05      	ldr	r3, [pc, #20]	@ (8002cb4 <sTimer2Set+0x34>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
	}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr
 8002cac:	200001d4 	.word	0x200001d4
 8002cb0:	200001d2 	.word	0x200001d2
 8002cb4:	200001d0 	.word	0x200001d0

08002cb8 <sTimer2GetFlag>:
	/**
	 * @brief	get flag timer fuction and auto reset flags and timer counter
	 * @return	timer flag
	 */
	uint8_t sTimer2GetFlag()
	{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
		if (timer_2_flag)
 8002cbc:	4b08      	ldr	r3, [pc, #32]	@ (8002ce0 <sTimer2GetFlag+0x28>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d008      	beq.n	8002cd6 <sTimer2GetFlag+0x1e>
		{
			timer_2_flag = 0;
 8002cc4:	4b06      	ldr	r3, [pc, #24]	@ (8002ce0 <sTimer2GetFlag+0x28>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
			timer_2_counter = timer_2_mul;
 8002cca:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <sTimer2GetFlag+0x2c>)
 8002ccc:	881a      	ldrh	r2, [r3, #0]
 8002cce:	4b06      	ldr	r3, [pc, #24]	@ (8002ce8 <sTimer2GetFlag+0x30>)
 8002cd0:	801a      	strh	r2, [r3, #0]
			return 1;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <sTimer2GetFlag+0x20>
		}
		return 0;
 8002cd6:	2300      	movs	r3, #0
	}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr
 8002ce0:	200001d0 	.word	0x200001d0
 8002ce4:	200001d4 	.word	0x200001d4
 8002ce8:	200001d2 	.word	0x200001d2

08002cec <HAL_TIM_PeriodElapsedCallback>:

	/**
	 * @brief	callback function call every 1ms
	 */
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
		if (htim->Instance == TIM2)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cfc:	d114      	bne.n	8002d28 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			if (timer_2_counter > 0)
 8002cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8002d30 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_TIM_PeriodElapsedCallback+0x26>
			{
				--timer_2_counter;
 8002d06:	4b0a      	ldr	r3, [pc, #40]	@ (8002d30 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	4b08      	ldr	r3, [pc, #32]	@ (8002d30 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002d10:	801a      	strh	r2, [r3, #0]
			}
			if (timer_2_counter <= 0)
 8002d12:	4b07      	ldr	r3, [pc, #28]	@ (8002d30 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d102      	bne.n	8002d20 <HAL_TIM_PeriodElapsedCallback+0x34>
			{
				timer_2_flag = 1;
 8002d1a:	4b06      	ldr	r3, [pc, #24]	@ (8002d34 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]
			}

			displayScan();
 8002d20:	f7fd fcdc 	bl	80006dc <displayScan>
			scanEncoder();
 8002d24:	f7fd fdfa 	bl	800091c <scanEncoder>
		}
	}
 8002d28:	bf00      	nop
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	200001d2 	.word	0x200001d2
 8002d34:	200001d0 	.word	0x200001d0

08002d38 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002d3c:	4b17      	ldr	r3, [pc, #92]	@ (8002d9c <MX_SPI1_Init+0x64>)
 8002d3e:	4a18      	ldr	r2, [pc, #96]	@ (8002da0 <MX_SPI1_Init+0x68>)
 8002d40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d42:	4b16      	ldr	r3, [pc, #88]	@ (8002d9c <MX_SPI1_Init+0x64>)
 8002d44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d4a:	4b14      	ldr	r3, [pc, #80]	@ (8002d9c <MX_SPI1_Init+0x64>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d50:	4b12      	ldr	r3, [pc, #72]	@ (8002d9c <MX_SPI1_Init+0x64>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d56:	4b11      	ldr	r3, [pc, #68]	@ (8002d9c <MX_SPI1_Init+0x64>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d9c <MX_SPI1_Init+0x64>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002d62:	4b0e      	ldr	r3, [pc, #56]	@ (8002d9c <MX_SPI1_Init+0x64>)
 8002d64:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002d68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d9c <MX_SPI1_Init+0x64>)
 8002d6c:	2208      	movs	r2, #8
 8002d6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d70:	4b0a      	ldr	r3, [pc, #40]	@ (8002d9c <MX_SPI1_Init+0x64>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d76:	4b09      	ldr	r3, [pc, #36]	@ (8002d9c <MX_SPI1_Init+0x64>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d7c:	4b07      	ldr	r3, [pc, #28]	@ (8002d9c <MX_SPI1_Init+0x64>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d82:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <MX_SPI1_Init+0x64>)
 8002d84:	220a      	movs	r2, #10
 8002d86:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d88:	4804      	ldr	r0, [pc, #16]	@ (8002d9c <MX_SPI1_Init+0x64>)
 8002d8a:	f003 fffb 	bl	8006d84 <HAL_SPI_Init>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002d94:	f7fe fd07 	bl	80017a6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d98:	bf00      	nop
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	200001d8 	.word	0x200001d8
 8002da0:	40013000 	.word	0x40013000

08002da4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b088      	sub	sp, #32
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dac:	f107 0310 	add.w	r3, r7, #16
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a1b      	ldr	r2, [pc, #108]	@ (8002e2c <HAL_SPI_MspInit+0x88>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d12f      	bne.n	8002e24 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e30 <HAL_SPI_MspInit+0x8c>)
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	4a19      	ldr	r2, [pc, #100]	@ (8002e30 <HAL_SPI_MspInit+0x8c>)
 8002dca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002dce:	6193      	str	r3, [r2, #24]
 8002dd0:	4b17      	ldr	r3, [pc, #92]	@ (8002e30 <HAL_SPI_MspInit+0x8c>)
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ddc:	4b14      	ldr	r3, [pc, #80]	@ (8002e30 <HAL_SPI_MspInit+0x8c>)
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	4a13      	ldr	r2, [pc, #76]	@ (8002e30 <HAL_SPI_MspInit+0x8c>)
 8002de2:	f043 0304 	orr.w	r3, r3, #4
 8002de6:	6193      	str	r3, [r2, #24]
 8002de8:	4b11      	ldr	r3, [pc, #68]	@ (8002e30 <HAL_SPI_MspInit+0x8c>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8002df4:	23b0      	movs	r3, #176	@ 0xb0
 8002df6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e00:	f107 0310 	add.w	r3, r7, #16
 8002e04:	4619      	mov	r1, r3
 8002e06:	480b      	ldr	r0, [pc, #44]	@ (8002e34 <HAL_SPI_MspInit+0x90>)
 8002e08:	f002 f9f6 	bl	80051f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e0c:	2340      	movs	r3, #64	@ 0x40
 8002e0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e18:	f107 0310 	add.w	r3, r7, #16
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4805      	ldr	r0, [pc, #20]	@ (8002e34 <HAL_SPI_MspInit+0x90>)
 8002e20:	f002 f9ea 	bl	80051f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002e24:	bf00      	nop
 8002e26:	3720      	adds	r7, #32
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40013000 	.word	0x40013000
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40010800 	.word	0x40010800

08002e38 <moveStepMotor>:
	 * @param	: direction: DOWN or UP
	 * @param	: cycle: number of revolution 10 is safe enough
	 */

	enum StatusCode moveStepMotor(enum Step_Direction direction, uint8_t cycle)
	{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	460a      	mov	r2, r1
 8002e42:	71fb      	strb	r3, [r7, #7]
 8002e44:	4613      	mov	r3, r2
 8002e46:	71bb      	strb	r3, [r7, #6]
		if (cycle == 0)
 8002e48:	79bb      	ldrb	r3, [r7, #6]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <moveStepMotor+0x1a>
		{
			return STATUS_ERROR;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e033      	b.n	8002eba <moveStepMotor+0x82>
		}

		switch (direction)
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d009      	beq.n	8002e6c <moveStepMotor+0x34>
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d111      	bne.n	8002e80 <moveStepMotor+0x48>
		{
		case UP:
		{
			if (current_step >= MAX_REVOLUTIONS * SPR)
 8002e5c:	4b19      	ldr	r3, [pc, #100]	@ (8002ec4 <moveStepMotor+0x8c>)
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002e66:	d308      	bcc.n	8002e7a <moveStepMotor+0x42>
			{
				return STATUS_ERROR;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	e026      	b.n	8002eba <moveStepMotor+0x82>
			break;
		}

		case DOWN:
		{
			if (current_step <= 0)
 8002e6c:	4b15      	ldr	r3, [pc, #84]	@ (8002ec4 <moveStepMotor+0x8c>)
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d103      	bne.n	8002e7e <moveStepMotor+0x46>
			{
				return STATUS_ERROR;
 8002e76:	2300      	movs	r3, #0
 8002e78:	e01f      	b.n	8002eba <moveStepMotor+0x82>
			break;
 8002e7a:	bf00      	nop
 8002e7c:	e000      	b.n	8002e80 <moveStepMotor+0x48>
				break;
			}
			break;
 8002e7e:	bf00      	nop
		}
		}

		HAL_GPIO_WritePin(SM_DIR_GPIO_Port, SM_DIR_Pin, direction);
 8002e80:	79fb      	ldrb	r3, [r7, #7]
 8002e82:	461a      	mov	r2, r3
 8002e84:	2120      	movs	r1, #32
 8002e86:	4810      	ldr	r0, [pc, #64]	@ (8002ec8 <moveStepMotor+0x90>)
 8002e88:	f002 fb61 	bl	800554e <HAL_GPIO_WritePin>
		current_direction = direction;
 8002e8c:	4a0f      	ldr	r2, [pc, #60]	@ (8002ecc <moveStepMotor+0x94>)
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	7013      	strb	r3, [r2, #0]

		spr_counter = SPR * cycle;
 8002e92:	79bb      	ldrb	r3, [r7, #6]
 8002e94:	22c8      	movs	r2, #200	@ 0xc8
 8002e96:	fb02 f303 	mul.w	r3, r2, r3
 8002e9a:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed0 <moveStepMotor+0x98>)
 8002e9c:	6013      	str	r3, [r2, #0]

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DUTY_CYCLE);
 8002e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed4 <moveStepMotor+0x9c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2232      	movs	r2, #50	@ 0x32
 8002ea4:	635a      	str	r2, [r3, #52]	@ 0x34

		if (HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	480a      	ldr	r0, [pc, #40]	@ (8002ed4 <moveStepMotor+0x9c>)
 8002eaa:	f004 ff29 	bl	8007d00 <HAL_TIM_PWM_Start_IT>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <moveStepMotor+0x80>
		{
			return STATUS_ERROR;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	e000      	b.n	8002eba <moveStepMotor+0x82>
		}
		return STATUS_OK;
 8002eb8:	2301      	movs	r3, #1
	}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000234 	.word	0x20000234
 8002ec8:	40010c00 	.word	0x40010c00
 8002ecc:	20000236 	.word	0x20000236
 8002ed0:	20000230 	.word	0x20000230
 8002ed4:	20000288 	.word	0x20000288

08002ed8 <HAL_TIM_PWM_PulseFinishedCallback>:

	void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
	{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
		if (htim->Instance == TIM3)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a22      	ldr	r2, [pc, #136]	@ (8002f70 <HAL_TIM_PWM_PulseFinishedCallback+0x98>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d13e      	bne.n	8002f68 <HAL_TIM_PWM_PulseFinishedCallback+0x90>
		{
			if (spr_counter > 0)
 8002eea:	4b22      	ldr	r3, [pc, #136]	@ (8002f74 <HAL_TIM_PWM_PulseFinishedCallback+0x9c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	dd32      	ble.n	8002f58 <HAL_TIM_PWM_PulseFinishedCallback+0x80>
			{
				switch (current_direction)
 8002ef2:	4b21      	ldr	r3, [pc, #132]	@ (8002f78 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d018      	beq.n	8002f2c <HAL_TIM_PWM_PulseFinishedCallback+0x54>
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d12c      	bne.n	8002f58 <HAL_TIM_PWM_PulseFinishedCallback+0x80>
				{
				case UP:
					if (current_step < MAX_REVOLUTIONS * SPR)
 8002efe:	4b1f      	ldr	r3, [pc, #124]	@ (8002f7c <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002f08:	d20c      	bcs.n	8002f24 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>
					{
						++current_step;
 8002f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002f7c <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3301      	adds	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	4b19      	ldr	r3, [pc, #100]	@ (8002f7c <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8002f16:	801a      	strh	r2, [r3, #0]
						--spr_counter;
 8002f18:	4b16      	ldr	r3, [pc, #88]	@ (8002f74 <HAL_TIM_PWM_PulseFinishedCallback+0x9c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	4a15      	ldr	r2, [pc, #84]	@ (8002f74 <HAL_TIM_PWM_PulseFinishedCallback+0x9c>)
 8002f20:	6013      	str	r3, [r2, #0]
					else
					{
						spr_counter = 0;
					}

					break;
 8002f22:	e019      	b.n	8002f58 <HAL_TIM_PWM_PulseFinishedCallback+0x80>
						spr_counter = 0;
 8002f24:	4b13      	ldr	r3, [pc, #76]	@ (8002f74 <HAL_TIM_PWM_PulseFinishedCallback+0x9c>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
					break;
 8002f2a:	e015      	b.n	8002f58 <HAL_TIM_PWM_PulseFinishedCallback+0x80>
				case DOWN:
					if (current_step > 0)
 8002f2c:	4b13      	ldr	r3, [pc, #76]	@ (8002f7c <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00c      	beq.n	8002f50 <HAL_TIM_PWM_PulseFinishedCallback+0x78>
					{
						--current_step;
 8002f36:	4b11      	ldr	r3, [pc, #68]	@ (8002f7c <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	4b0e      	ldr	r3, [pc, #56]	@ (8002f7c <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8002f42:	801a      	strh	r2, [r3, #0]
						--spr_counter;
 8002f44:	4b0b      	ldr	r3, [pc, #44]	@ (8002f74 <HAL_TIM_PWM_PulseFinishedCallback+0x9c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f74 <HAL_TIM_PWM_PulseFinishedCallback+0x9c>)
 8002f4c:	6013      	str	r3, [r2, #0]
					}
					else
					{
						spr_counter = 0;
					}
					break;
 8002f4e:	e002      	b.n	8002f56 <HAL_TIM_PWM_PulseFinishedCallback+0x7e>
						spr_counter = 0;
 8002f50:	4b08      	ldr	r3, [pc, #32]	@ (8002f74 <HAL_TIM_PWM_PulseFinishedCallback+0x9c>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
					break;
 8002f56:	bf00      	nop
				}
			}

			if (spr_counter <= 0)
 8002f58:	4b06      	ldr	r3, [pc, #24]	@ (8002f74 <HAL_TIM_PWM_PulseFinishedCallback+0x9c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	dc03      	bgt.n	8002f68 <HAL_TIM_PWM_PulseFinishedCallback+0x90>
			{
				HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8002f60:	2100      	movs	r1, #0
 8002f62:	4807      	ldr	r0, [pc, #28]	@ (8002f80 <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 8002f64:	f004 ffd4 	bl	8007f10 <HAL_TIM_PWM_Stop_IT>
			}
		}
	}
 8002f68:	bf00      	nop
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40000400 	.word	0x40000400
 8002f74:	20000230 	.word	0x20000230
 8002f78:	20000236 	.word	0x20000236
 8002f7c:	20000234 	.word	0x20000234
 8002f80:	20000288 	.word	0x20000288

08002f84 <stopStepMotor>:

	enum StatusCode stopStepMotor()
	{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
		spr_counter = 0;
 8002f88:	4b07      	ldr	r3, [pc, #28]	@ (8002fa8 <stopStepMotor+0x24>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]

		if (HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4806      	ldr	r0, [pc, #24]	@ (8002fac <stopStepMotor+0x28>)
 8002f92:	f004 ffbd 	bl	8007f10 <HAL_TIM_PWM_Stop_IT>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <stopStepMotor+0x1c>
		{
			return STATUS_ERROR;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e000      	b.n	8002fa2 <stopStepMotor+0x1e>
		}

		return STATUS_OK;
 8002fa0:	2301      	movs	r3, #1
	}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000230 	.word	0x20000230
 8002fac:	20000288 	.word	0x20000288

08002fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002fb6:	4b15      	ldr	r3, [pc, #84]	@ (800300c <HAL_MspInit+0x5c>)
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	4a14      	ldr	r2, [pc, #80]	@ (800300c <HAL_MspInit+0x5c>)
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	6193      	str	r3, [r2, #24]
 8002fc2:	4b12      	ldr	r3, [pc, #72]	@ (800300c <HAL_MspInit+0x5c>)
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fce:	4b0f      	ldr	r3, [pc, #60]	@ (800300c <HAL_MspInit+0x5c>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	4a0e      	ldr	r2, [pc, #56]	@ (800300c <HAL_MspInit+0x5c>)
 8002fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fd8:	61d3      	str	r3, [r2, #28]
 8002fda:	4b0c      	ldr	r3, [pc, #48]	@ (800300c <HAL_MspInit+0x5c>)
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe2:	607b      	str	r3, [r7, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8003010 <HAL_MspInit+0x60>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	4a04      	ldr	r2, [pc, #16]	@ (8003010 <HAL_MspInit+0x60>)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003002:	bf00      	nop
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr
 800300c:	40021000 	.word	0x40021000
 8003010:	40010000 	.word	0x40010000

08003014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003018:	bf00      	nop
 800301a:	e7fd      	b.n	8003018 <NMI_Handler+0x4>

0800301c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003020:	bf00      	nop
 8003022:	e7fd      	b.n	8003020 <HardFault_Handler+0x4>

08003024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003028:	bf00      	nop
 800302a:	e7fd      	b.n	8003028 <MemManage_Handler+0x4>

0800302c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003030:	bf00      	nop
 8003032:	e7fd      	b.n	8003030 <BusFault_Handler+0x4>

08003034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003038:	bf00      	nop
 800303a:	e7fd      	b.n	8003038 <UsageFault_Handler+0x4>

0800303c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr

08003048 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800304c:	bf00      	nop
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003058:	bf00      	nop
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr

08003060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003064:	f000 ff18 	bl	8003e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003068:	bf00      	nop
 800306a:	bd80      	pop	{r7, pc}

0800306c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003070:	4802      	ldr	r0, [pc, #8]	@ (800307c <DMA1_Channel1_IRQHandler+0x10>)
 8003072:	f001 fe57 	bl	8004d24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000080 	.word	0x20000080

08003080 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003084:	4802      	ldr	r0, [pc, #8]	@ (8003090 <TIM2_IRQHandler+0x10>)
 8003086:	f005 f801 	bl	800808c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800308a:	bf00      	nop
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20000240 	.word	0x20000240

08003094 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003098:	4802      	ldr	r0, [pc, #8]	@ (80030a4 <TIM3_IRQHandler+0x10>)
 800309a:	f004 fff7 	bl	800808c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20000288 	.word	0x20000288

080030a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80030ac:	4802      	ldr	r0, [pc, #8]	@ (80030b8 <TIM4_IRQHandler+0x10>)
 80030ae:	f004 ffed 	bl	800808c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	200002d0 	.word	0x200002d0

080030bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80030c0:	4802      	ldr	r0, [pc, #8]	@ (80030cc <USART1_IRQHandler+0x10>)
 80030c2:	f005 ff33 	bl	8008f2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	200003ac 	.word	0x200003ac

080030d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80030d4:	4802      	ldr	r0, [pc, #8]	@ (80030e0 <USART2_IRQHandler+0x10>)
 80030d6:	f005 ff29 	bl	8008f2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	200003f4 	.word	0x200003f4

080030e4 <initSwitch>:

    uint8_t switch_status[NUMBER_OF_SWITCH] = {0};
    uint8_t switch_buffer = 0b00000000;

    enum StatusCode initSwitch()
    {
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
        HAL_GPIO_WritePin(INPUT_LOAD_GPIO_Port, INPUT_LOAD_Pin, 1);
 80030e8:	2201      	movs	r2, #1
 80030ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030ee:	480e      	ldr	r0, [pc, #56]	@ (8003128 <initSwitch+0x44>)
 80030f0:	f002 fa2d 	bl	800554e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(INPUT_LOAD_GPIO_Port, INPUT_LOAD_Pin, 0);
 80030f4:	2200      	movs	r2, #0
 80030f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030fa:	480b      	ldr	r0, [pc, #44]	@ (8003128 <initSwitch+0x44>)
 80030fc:	f002 fa27 	bl	800554e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(INPUT_LOAD_GPIO_Port, INPUT_LOAD_Pin, 1);
 8003100:	2201      	movs	r2, #1
 8003102:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003106:	4808      	ldr	r0, [pc, #32]	@ (8003128 <initSwitch+0x44>)
 8003108:	f002 fa21 	bl	800554e <HAL_GPIO_WritePin>
        if (HAL_SPI_Receive(&hspi1, (void *)&switch_buffer, 1, 10) == HAL_OK)
 800310c:	230a      	movs	r3, #10
 800310e:	2201      	movs	r2, #1
 8003110:	4906      	ldr	r1, [pc, #24]	@ (800312c <initSwitch+0x48>)
 8003112:	4807      	ldr	r0, [pc, #28]	@ (8003130 <initSwitch+0x4c>)
 8003114:	f003 fffe 	bl	8007114 <HAL_SPI_Receive>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <initSwitch+0x3e>
        {
            return STATUS_OK;
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <initSwitch+0x40>
        }
        return STATUS_ERROR;
 8003122:	2300      	movs	r3, #0
    }
 8003124:	4618      	mov	r0, r3
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40010800 	.word	0x40010800
 800312c:	2000023c 	.word	0x2000023c
 8003130:	200001d8 	.word	0x200001d8

08003134 <getSwitchStatus>:
     * @param switch_id correspond to switch that needs to know status
     * @retval 0 if switch is OFF
     * @retval 1 if switch is OFF
     */
    uint8_t getSwitchStatus(const enum Switch switch_id)
    {
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	71fb      	strb	r3, [r7, #7]
        HAL_GPIO_WritePin(INPUT_LOAD_GPIO_Port, INPUT_LOAD_Pin, 0);
 800313e:	2200      	movs	r2, #0
 8003140:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003144:	4818      	ldr	r0, [pc, #96]	@ (80031a8 <getSwitchStatus+0x74>)
 8003146:	f002 fa02 	bl	800554e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(INPUT_LOAD_GPIO_Port, INPUT_LOAD_Pin, 1);
 800314a:	2201      	movs	r2, #1
 800314c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003150:	4815      	ldr	r0, [pc, #84]	@ (80031a8 <getSwitchStatus+0x74>)
 8003152:	f002 f9fc 	bl	800554e <HAL_GPIO_WritePin>
        HAL_SPI_Receive(&hspi1, (void *)&switch_buffer, 1, 10);
 8003156:	230a      	movs	r3, #10
 8003158:	2201      	movs	r2, #1
 800315a:	4914      	ldr	r1, [pc, #80]	@ (80031ac <getSwitchStatus+0x78>)
 800315c:	4814      	ldr	r0, [pc, #80]	@ (80031b0 <getSwitchStatus+0x7c>)
 800315e:	f003 ffd9 	bl	8007114 <HAL_SPI_Receive>

        for (uint8_t i = 0; i < NUMBER_OF_SWITCH; ++i)
 8003162:	2300      	movs	r3, #0
 8003164:	73fb      	strb	r3, [r7, #15]
 8003166:	e015      	b.n	8003194 <getSwitchStatus+0x60>
        {
            if (switch_buffer & (0b00010000 << i))
 8003168:	4b10      	ldr	r3, [pc, #64]	@ (80031ac <getSwitchStatus+0x78>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	4619      	mov	r1, r3
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	2210      	movs	r2, #16
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	400b      	ands	r3, r1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d004      	beq.n	8003186 <getSwitchStatus+0x52>
            {
                switch_status[i] = 0;
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	4a0d      	ldr	r2, [pc, #52]	@ (80031b4 <getSwitchStatus+0x80>)
 8003180:	2100      	movs	r1, #0
 8003182:	54d1      	strb	r1, [r2, r3]
 8003184:	e003      	b.n	800318e <getSwitchStatus+0x5a>
            }
            else
            {
                switch_status[i] = 1;
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	4a0a      	ldr	r2, [pc, #40]	@ (80031b4 <getSwitchStatus+0x80>)
 800318a:	2101      	movs	r1, #1
 800318c:	54d1      	strb	r1, [r2, r3]
        for (uint8_t i = 0; i < NUMBER_OF_SWITCH; ++i)
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	3301      	adds	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	2b03      	cmp	r3, #3
 8003198:	d9e6      	bls.n	8003168 <getSwitchStatus+0x34>
            }
        }

        return switch_status[switch_id];
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	4a05      	ldr	r2, [pc, #20]	@ (80031b4 <getSwitchStatus+0x80>)
 800319e:	5cd3      	ldrb	r3, [r2, r3]
    }
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40010800 	.word	0x40010800
 80031ac:	2000023c 	.word	0x2000023c
 80031b0:	200001d8 	.word	0x200001d8
 80031b4:	20000238 	.word	0x20000238

080031b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031bc:	bf00      	nop
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031ca:	f107 0308 	add.w	r3, r7, #8
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	605a      	str	r2, [r3, #4]
 80031d4:	609a      	str	r2, [r3, #8]
 80031d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031d8:	463b      	mov	r3, r7
 80031da:	2200      	movs	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80031e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003258 <MX_TIM2_Init+0x94>)
 80031e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80031e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80031e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003258 <MX_TIM2_Init+0x94>)
 80031ea:	2247      	movs	r2, #71	@ 0x47
 80031ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003258 <MX_TIM2_Init+0x94>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80031f4:	4b18      	ldr	r3, [pc, #96]	@ (8003258 <MX_TIM2_Init+0x94>)
 80031f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80031fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031fc:	4b16      	ldr	r3, [pc, #88]	@ (8003258 <MX_TIM2_Init+0x94>)
 80031fe:	2200      	movs	r2, #0
 8003200:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003202:	4b15      	ldr	r3, [pc, #84]	@ (8003258 <MX_TIM2_Init+0x94>)
 8003204:	2200      	movs	r2, #0
 8003206:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003208:	4813      	ldr	r0, [pc, #76]	@ (8003258 <MX_TIM2_Init+0x94>)
 800320a:	f004 fb50 	bl	80078ae <HAL_TIM_Base_Init>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003214:	f7fe fac7 	bl	80017a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003218:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800321c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800321e:	f107 0308 	add.w	r3, r7, #8
 8003222:	4619      	mov	r1, r3
 8003224:	480c      	ldr	r0, [pc, #48]	@ (8003258 <MX_TIM2_Init+0x94>)
 8003226:	f005 f8e3 	bl	80083f0 <HAL_TIM_ConfigClockSource>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003230:	f7fe fab9 	bl	80017a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003234:	2300      	movs	r3, #0
 8003236:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003238:	2300      	movs	r3, #0
 800323a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800323c:	463b      	mov	r3, r7
 800323e:	4619      	mov	r1, r3
 8003240:	4805      	ldr	r0, [pc, #20]	@ (8003258 <MX_TIM2_Init+0x94>)
 8003242:	f005 fca3 	bl	8008b8c <HAL_TIMEx_MasterConfigSynchronization>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800324c:	f7fe faab 	bl	80017a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003250:	bf00      	nop
 8003252:	3718      	adds	r7, #24
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20000240 	.word	0x20000240

0800325c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08e      	sub	sp, #56	@ 0x38
 8003260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003262:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	605a      	str	r2, [r3, #4]
 800326c:	609a      	str	r2, [r3, #8]
 800326e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003270:	f107 0320 	add.w	r3, r7, #32
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800327a:	1d3b      	adds	r3, r7, #4
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	611a      	str	r2, [r3, #16]
 8003288:	615a      	str	r2, [r3, #20]
 800328a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800328c:	4b2c      	ldr	r3, [pc, #176]	@ (8003340 <MX_TIM3_Init+0xe4>)
 800328e:	4a2d      	ldr	r2, [pc, #180]	@ (8003344 <MX_TIM3_Init+0xe8>)
 8003290:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 8003292:	4b2b      	ldr	r3, [pc, #172]	@ (8003340 <MX_TIM3_Init+0xe4>)
 8003294:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8003298:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800329a:	4b29      	ldr	r3, [pc, #164]	@ (8003340 <MX_TIM3_Init+0xe4>)
 800329c:	2200      	movs	r2, #0
 800329e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80032a0:	4b27      	ldr	r3, [pc, #156]	@ (8003340 <MX_TIM3_Init+0xe4>)
 80032a2:	2263      	movs	r2, #99	@ 0x63
 80032a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032a6:	4b26      	ldr	r3, [pc, #152]	@ (8003340 <MX_TIM3_Init+0xe4>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032ac:	4b24      	ldr	r3, [pc, #144]	@ (8003340 <MX_TIM3_Init+0xe4>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80032b2:	4823      	ldr	r0, [pc, #140]	@ (8003340 <MX_TIM3_Init+0xe4>)
 80032b4:	f004 fafb 	bl	80078ae <HAL_TIM_Base_Init>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80032be:	f7fe fa72 	bl	80017a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80032c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032cc:	4619      	mov	r1, r3
 80032ce:	481c      	ldr	r0, [pc, #112]	@ (8003340 <MX_TIM3_Init+0xe4>)
 80032d0:	f005 f88e 	bl	80083f0 <HAL_TIM_ConfigClockSource>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80032da:	f7fe fa64 	bl	80017a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80032de:	4818      	ldr	r0, [pc, #96]	@ (8003340 <MX_TIM3_Init+0xe4>)
 80032e0:	f004 fb94 	bl	8007a0c <HAL_TIM_PWM_Init>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80032ea:	f7fe fa5c 	bl	80017a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032ee:	2300      	movs	r3, #0
 80032f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032f6:	f107 0320 	add.w	r3, r7, #32
 80032fa:	4619      	mov	r1, r3
 80032fc:	4810      	ldr	r0, [pc, #64]	@ (8003340 <MX_TIM3_Init+0xe4>)
 80032fe:	f005 fc45 	bl	8008b8c <HAL_TIMEx_MasterConfigSynchronization>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003308:	f7fe fa4d 	bl	80017a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800330c:	2360      	movs	r3, #96	@ 0x60
 800330e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003314:	2300      	movs	r3, #0
 8003316:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800331c:	1d3b      	adds	r3, r7, #4
 800331e:	2200      	movs	r2, #0
 8003320:	4619      	mov	r1, r3
 8003322:	4807      	ldr	r0, [pc, #28]	@ (8003340 <MX_TIM3_Init+0xe4>)
 8003324:	f004 ffa2 	bl	800826c <HAL_TIM_PWM_ConfigChannel>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800332e:	f7fe fa3a 	bl	80017a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003332:	4803      	ldr	r0, [pc, #12]	@ (8003340 <MX_TIM3_Init+0xe4>)
 8003334:	f000 fa42 	bl	80037bc <HAL_TIM_MspPostInit>

}
 8003338:	bf00      	nop
 800333a:	3738      	adds	r7, #56	@ 0x38
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20000288 	.word	0x20000288
 8003344:	40000400 	.word	0x40000400

08003348 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08e      	sub	sp, #56	@ 0x38
 800334c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800334e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	605a      	str	r2, [r3, #4]
 8003358:	609a      	str	r2, [r3, #8]
 800335a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800335c:	f107 0320 	add.w	r3, r7, #32
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003366:	1d3b      	adds	r3, r7, #4
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	605a      	str	r2, [r3, #4]
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	60da      	str	r2, [r3, #12]
 8003372:	611a      	str	r2, [r3, #16]
 8003374:	615a      	str	r2, [r3, #20]
 8003376:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003378:	4b38      	ldr	r3, [pc, #224]	@ (800345c <MX_TIM4_Init+0x114>)
 800337a:	4a39      	ldr	r2, [pc, #228]	@ (8003460 <MX_TIM4_Init+0x118>)
 800337c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1440-1;
 800337e:	4b37      	ldr	r3, [pc, #220]	@ (800345c <MX_TIM4_Init+0x114>)
 8003380:	f240 529f 	movw	r2, #1439	@ 0x59f
 8003384:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003386:	4b35      	ldr	r3, [pc, #212]	@ (800345c <MX_TIM4_Init+0x114>)
 8003388:	2200      	movs	r2, #0
 800338a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800338c:	4b33      	ldr	r3, [pc, #204]	@ (800345c <MX_TIM4_Init+0x114>)
 800338e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003392:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003394:	4b31      	ldr	r3, [pc, #196]	@ (800345c <MX_TIM4_Init+0x114>)
 8003396:	2200      	movs	r2, #0
 8003398:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800339a:	4b30      	ldr	r3, [pc, #192]	@ (800345c <MX_TIM4_Init+0x114>)
 800339c:	2200      	movs	r2, #0
 800339e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80033a0:	482e      	ldr	r0, [pc, #184]	@ (800345c <MX_TIM4_Init+0x114>)
 80033a2:	f004 fa84 	bl	80078ae <HAL_TIM_Base_Init>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80033ac:	f7fe f9fb 	bl	80017a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80033b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80033ba:	4619      	mov	r1, r3
 80033bc:	4827      	ldr	r0, [pc, #156]	@ (800345c <MX_TIM4_Init+0x114>)
 80033be:	f005 f817 	bl	80083f0 <HAL_TIM_ConfigClockSource>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80033c8:	f7fe f9ed 	bl	80017a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80033cc:	4823      	ldr	r0, [pc, #140]	@ (800345c <MX_TIM4_Init+0x114>)
 80033ce:	f004 fb1d 	bl	8007a0c <HAL_TIM_PWM_Init>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80033d8:	f7fe f9e5 	bl	80017a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033dc:	2300      	movs	r3, #0
 80033de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033e0:	2300      	movs	r3, #0
 80033e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80033e4:	f107 0320 	add.w	r3, r7, #32
 80033e8:	4619      	mov	r1, r3
 80033ea:	481c      	ldr	r0, [pc, #112]	@ (800345c <MX_TIM4_Init+0x114>)
 80033ec:	f005 fbce 	bl	8008b8c <HAL_TIMEx_MasterConfigSynchronization>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80033f6:	f7fe f9d6 	bl	80017a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033fa:	2360      	movs	r3, #96	@ 0x60
 80033fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80033fe:	2300      	movs	r3, #0
 8003400:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800340a:	1d3b      	adds	r3, r7, #4
 800340c:	2200      	movs	r2, #0
 800340e:	4619      	mov	r1, r3
 8003410:	4812      	ldr	r0, [pc, #72]	@ (800345c <MX_TIM4_Init+0x114>)
 8003412:	f004 ff2b 	bl	800826c <HAL_TIM_PWM_ConfigChannel>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800341c:	f7fe f9c3 	bl	80017a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003420:	1d3b      	adds	r3, r7, #4
 8003422:	2204      	movs	r2, #4
 8003424:	4619      	mov	r1, r3
 8003426:	480d      	ldr	r0, [pc, #52]	@ (800345c <MX_TIM4_Init+0x114>)
 8003428:	f004 ff20 	bl	800826c <HAL_TIM_PWM_ConfigChannel>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8003432:	f7fe f9b8 	bl	80017a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003436:	1d3b      	adds	r3, r7, #4
 8003438:	2208      	movs	r2, #8
 800343a:	4619      	mov	r1, r3
 800343c:	4807      	ldr	r0, [pc, #28]	@ (800345c <MX_TIM4_Init+0x114>)
 800343e:	f004 ff15 	bl	800826c <HAL_TIM_PWM_ConfigChannel>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8003448:	f7fe f9ad 	bl	80017a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800344c:	4803      	ldr	r0, [pc, #12]	@ (800345c <MX_TIM4_Init+0x114>)
 800344e:	f000 f9b5 	bl	80037bc <HAL_TIM_MspPostInit>

}
 8003452:	bf00      	nop
 8003454:	3738      	adds	r7, #56	@ 0x38
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	200002d0 	.word	0x200002d0
 8003460:	40000800 	.word	0x40000800

08003464 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08e      	sub	sp, #56	@ 0x38
 8003468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800346a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	605a      	str	r2, [r3, #4]
 8003474:	609a      	str	r2, [r3, #8]
 8003476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003478:	f107 0320 	add.w	r3, r7, #32
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003482:	1d3b      	adds	r3, r7, #4
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	60da      	str	r2, [r3, #12]
 800348e:	611a      	str	r2, [r3, #16]
 8003490:	615a      	str	r2, [r3, #20]
 8003492:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003494:	4b2c      	ldr	r3, [pc, #176]	@ (8003548 <MX_TIM5_Init+0xe4>)
 8003496:	4a2d      	ldr	r2, [pc, #180]	@ (800354c <MX_TIM5_Init+0xe8>)
 8003498:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 720-1;
 800349a:	4b2b      	ldr	r3, [pc, #172]	@ (8003548 <MX_TIM5_Init+0xe4>)
 800349c:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80034a0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034a2:	4b29      	ldr	r3, [pc, #164]	@ (8003548 <MX_TIM5_Init+0xe4>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 80034a8:	4b27      	ldr	r3, [pc, #156]	@ (8003548 <MX_TIM5_Init+0xe4>)
 80034aa:	2263      	movs	r2, #99	@ 0x63
 80034ac:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034ae:	4b26      	ldr	r3, [pc, #152]	@ (8003548 <MX_TIM5_Init+0xe4>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034b4:	4b24      	ldr	r3, [pc, #144]	@ (8003548 <MX_TIM5_Init+0xe4>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80034ba:	4823      	ldr	r0, [pc, #140]	@ (8003548 <MX_TIM5_Init+0xe4>)
 80034bc:	f004 f9f7 	bl	80078ae <HAL_TIM_Base_Init>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80034c6:	f7fe f96e 	bl	80017a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80034d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80034d4:	4619      	mov	r1, r3
 80034d6:	481c      	ldr	r0, [pc, #112]	@ (8003548 <MX_TIM5_Init+0xe4>)
 80034d8:	f004 ff8a 	bl	80083f0 <HAL_TIM_ConfigClockSource>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80034e2:	f7fe f960 	bl	80017a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80034e6:	4818      	ldr	r0, [pc, #96]	@ (8003548 <MX_TIM5_Init+0xe4>)
 80034e8:	f004 fa90 	bl	8007a0c <HAL_TIM_PWM_Init>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80034f2:	f7fe f958 	bl	80017a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034f6:	2300      	movs	r3, #0
 80034f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80034fe:	f107 0320 	add.w	r3, r7, #32
 8003502:	4619      	mov	r1, r3
 8003504:	4810      	ldr	r0, [pc, #64]	@ (8003548 <MX_TIM5_Init+0xe4>)
 8003506:	f005 fb41 	bl	8008b8c <HAL_TIMEx_MasterConfigSynchronization>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8003510:	f7fe f949 	bl	80017a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003514:	2360      	movs	r3, #96	@ 0x60
 8003516:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003524:	1d3b      	adds	r3, r7, #4
 8003526:	2200      	movs	r2, #0
 8003528:	4619      	mov	r1, r3
 800352a:	4807      	ldr	r0, [pc, #28]	@ (8003548 <MX_TIM5_Init+0xe4>)
 800352c:	f004 fe9e 	bl	800826c <HAL_TIM_PWM_ConfigChannel>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8003536:	f7fe f936 	bl	80017a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800353a:	4803      	ldr	r0, [pc, #12]	@ (8003548 <MX_TIM5_Init+0xe4>)
 800353c:	f000 f93e 	bl	80037bc <HAL_TIM_MspPostInit>

}
 8003540:	bf00      	nop
 8003542:	3738      	adds	r7, #56	@ 0x38
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20000318 	.word	0x20000318
 800354c:	40000c00 	.word	0x40000c00

08003550 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b092      	sub	sp, #72	@ 0x48
 8003554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003556:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003560:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	605a      	str	r2, [r3, #4]
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	60da      	str	r2, [r3, #12]
 800356e:	611a      	str	r2, [r3, #16]
 8003570:	615a      	str	r2, [r3, #20]
 8003572:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003574:	1d3b      	adds	r3, r7, #4
 8003576:	2220      	movs	r2, #32
 8003578:	2100      	movs	r1, #0
 800357a:	4618      	mov	r0, r3
 800357c:	f006 fa40 	bl	8009a00 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003580:	4b45      	ldr	r3, [pc, #276]	@ (8003698 <MX_TIM8_Init+0x148>)
 8003582:	4a46      	ldr	r2, [pc, #280]	@ (800369c <MX_TIM8_Init+0x14c>)
 8003584:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 720-1;
 8003586:	4b44      	ldr	r3, [pc, #272]	@ (8003698 <MX_TIM8_Init+0x148>)
 8003588:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800358c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800358e:	4b42      	ldr	r3, [pc, #264]	@ (8003698 <MX_TIM8_Init+0x148>)
 8003590:	2200      	movs	r2, #0
 8003592:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8003594:	4b40      	ldr	r3, [pc, #256]	@ (8003698 <MX_TIM8_Init+0x148>)
 8003596:	2263      	movs	r2, #99	@ 0x63
 8003598:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800359a:	4b3f      	ldr	r3, [pc, #252]	@ (8003698 <MX_TIM8_Init+0x148>)
 800359c:	2200      	movs	r2, #0
 800359e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80035a0:	4b3d      	ldr	r3, [pc, #244]	@ (8003698 <MX_TIM8_Init+0x148>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035a6:	4b3c      	ldr	r3, [pc, #240]	@ (8003698 <MX_TIM8_Init+0x148>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80035ac:	483a      	ldr	r0, [pc, #232]	@ (8003698 <MX_TIM8_Init+0x148>)
 80035ae:	f004 fa2d 	bl	8007a0c <HAL_TIM_PWM_Init>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80035b8:	f7fe f8f5 	bl	80017a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035bc:	2300      	movs	r3, #0
 80035be:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035c0:	2300      	movs	r3, #0
 80035c2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80035c4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80035c8:	4619      	mov	r1, r3
 80035ca:	4833      	ldr	r0, [pc, #204]	@ (8003698 <MX_TIM8_Init+0x148>)
 80035cc:	f005 fade 	bl	8008b8c <HAL_TIMEx_MasterConfigSynchronization>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80035d6:	f7fe f8e6 	bl	80017a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035da:	2360      	movs	r3, #96	@ 0x60
 80035dc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80035de:	2300      	movs	r3, #0
 80035e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035e2:	2300      	movs	r3, #0
 80035e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80035e6:	2300      	movs	r3, #0
 80035e8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035ea:	2300      	movs	r3, #0
 80035ec:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80035ee:	2300      	movs	r3, #0
 80035f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80035f2:	2300      	movs	r3, #0
 80035f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035fa:	2200      	movs	r2, #0
 80035fc:	4619      	mov	r1, r3
 80035fe:	4826      	ldr	r0, [pc, #152]	@ (8003698 <MX_TIM8_Init+0x148>)
 8003600:	f004 fe34 	bl	800826c <HAL_TIM_PWM_ConfigChannel>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800360a:	f7fe f8cc 	bl	80017a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800360e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003612:	2204      	movs	r2, #4
 8003614:	4619      	mov	r1, r3
 8003616:	4820      	ldr	r0, [pc, #128]	@ (8003698 <MX_TIM8_Init+0x148>)
 8003618:	f004 fe28 	bl	800826c <HAL_TIM_PWM_ConfigChannel>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8003622:	f7fe f8c0 	bl	80017a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800362a:	2208      	movs	r2, #8
 800362c:	4619      	mov	r1, r3
 800362e:	481a      	ldr	r0, [pc, #104]	@ (8003698 <MX_TIM8_Init+0x148>)
 8003630:	f004 fe1c 	bl	800826c <HAL_TIM_PWM_ConfigChannel>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 800363a:	f7fe f8b4 	bl	80017a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800363e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003642:	220c      	movs	r2, #12
 8003644:	4619      	mov	r1, r3
 8003646:	4814      	ldr	r0, [pc, #80]	@ (8003698 <MX_TIM8_Init+0x148>)
 8003648:	f004 fe10 	bl	800826c <HAL_TIM_PWM_ConfigChannel>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8003652:	f7fe f8a8 	bl	80017a6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003656:	2300      	movs	r3, #0
 8003658:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800365a:	2300      	movs	r3, #0
 800365c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800366a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800366e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003670:	2300      	movs	r3, #0
 8003672:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003674:	1d3b      	adds	r3, r7, #4
 8003676:	4619      	mov	r1, r3
 8003678:	4807      	ldr	r0, [pc, #28]	@ (8003698 <MX_TIM8_Init+0x148>)
 800367a:	f005 faf3 	bl	8008c64 <HAL_TIMEx_ConfigBreakDeadTime>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 8003684:	f7fe f88f 	bl	80017a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003688:	4803      	ldr	r0, [pc, #12]	@ (8003698 <MX_TIM8_Init+0x148>)
 800368a:	f000 f897 	bl	80037bc <HAL_TIM_MspPostInit>

}
 800368e:	bf00      	nop
 8003690:	3748      	adds	r7, #72	@ 0x48
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000360 	.word	0x20000360
 800369c:	40013400 	.word	0x40013400

080036a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b0:	d114      	bne.n	80036dc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036b2:	4b2f      	ldr	r3, [pc, #188]	@ (8003770 <HAL_TIM_Base_MspInit+0xd0>)
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	4a2e      	ldr	r2, [pc, #184]	@ (8003770 <HAL_TIM_Base_MspInit+0xd0>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	61d3      	str	r3, [r2, #28]
 80036be:	4b2c      	ldr	r3, [pc, #176]	@ (8003770 <HAL_TIM_Base_MspInit+0xd0>)
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80036ca:	2200      	movs	r2, #0
 80036cc:	2100      	movs	r1, #0
 80036ce:	201c      	movs	r0, #28
 80036d0:	f001 f8d7 	bl	8004882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036d4:	201c      	movs	r0, #28
 80036d6:	f001 f8f0 	bl	80048ba <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80036da:	e044      	b.n	8003766 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a24      	ldr	r2, [pc, #144]	@ (8003774 <HAL_TIM_Base_MspInit+0xd4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d114      	bne.n	8003710 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036e6:	4b22      	ldr	r3, [pc, #136]	@ (8003770 <HAL_TIM_Base_MspInit+0xd0>)
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	4a21      	ldr	r2, [pc, #132]	@ (8003770 <HAL_TIM_Base_MspInit+0xd0>)
 80036ec:	f043 0302 	orr.w	r3, r3, #2
 80036f0:	61d3      	str	r3, [r2, #28]
 80036f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003770 <HAL_TIM_Base_MspInit+0xd0>)
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80036fe:	2200      	movs	r2, #0
 8003700:	2100      	movs	r1, #0
 8003702:	201d      	movs	r0, #29
 8003704:	f001 f8bd 	bl	8004882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003708:	201d      	movs	r0, #29
 800370a:	f001 f8d6 	bl	80048ba <HAL_NVIC_EnableIRQ>
}
 800370e:	e02a      	b.n	8003766 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a18      	ldr	r2, [pc, #96]	@ (8003778 <HAL_TIM_Base_MspInit+0xd8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d114      	bne.n	8003744 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800371a:	4b15      	ldr	r3, [pc, #84]	@ (8003770 <HAL_TIM_Base_MspInit+0xd0>)
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	4a14      	ldr	r2, [pc, #80]	@ (8003770 <HAL_TIM_Base_MspInit+0xd0>)
 8003720:	f043 0304 	orr.w	r3, r3, #4
 8003724:	61d3      	str	r3, [r2, #28]
 8003726:	4b12      	ldr	r3, [pc, #72]	@ (8003770 <HAL_TIM_Base_MspInit+0xd0>)
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003732:	2200      	movs	r2, #0
 8003734:	2100      	movs	r1, #0
 8003736:	201e      	movs	r0, #30
 8003738:	f001 f8a3 	bl	8004882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800373c:	201e      	movs	r0, #30
 800373e:	f001 f8bc 	bl	80048ba <HAL_NVIC_EnableIRQ>
}
 8003742:	e010      	b.n	8003766 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM5)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a0c      	ldr	r2, [pc, #48]	@ (800377c <HAL_TIM_Base_MspInit+0xdc>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d10b      	bne.n	8003766 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800374e:	4b08      	ldr	r3, [pc, #32]	@ (8003770 <HAL_TIM_Base_MspInit+0xd0>)
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	4a07      	ldr	r2, [pc, #28]	@ (8003770 <HAL_TIM_Base_MspInit+0xd0>)
 8003754:	f043 0308 	orr.w	r3, r3, #8
 8003758:	61d3      	str	r3, [r2, #28]
 800375a:	4b05      	ldr	r3, [pc, #20]	@ (8003770 <HAL_TIM_Base_MspInit+0xd0>)
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]
}
 8003766:	bf00      	nop
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40021000 	.word	0x40021000
 8003774:	40000400 	.word	0x40000400
 8003778:	40000800 	.word	0x40000800
 800377c:	40000c00 	.word	0x40000c00

08003780 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a09      	ldr	r2, [pc, #36]	@ (80037b4 <HAL_TIM_PWM_MspInit+0x34>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d10b      	bne.n	80037aa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003792:	4b09      	ldr	r3, [pc, #36]	@ (80037b8 <HAL_TIM_PWM_MspInit+0x38>)
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	4a08      	ldr	r2, [pc, #32]	@ (80037b8 <HAL_TIM_PWM_MspInit+0x38>)
 8003798:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800379c:	6193      	str	r3, [r2, #24]
 800379e:	4b06      	ldr	r3, [pc, #24]	@ (80037b8 <HAL_TIM_PWM_MspInit+0x38>)
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80037aa:	bf00      	nop
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr
 80037b4:	40013400 	.word	0x40013400
 80037b8:	40021000 	.word	0x40021000

080037bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08c      	sub	sp, #48	@ 0x30
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c4:	f107 031c 	add.w	r3, r7, #28
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	605a      	str	r2, [r3, #4]
 80037ce:	609a      	str	r2, [r3, #8]
 80037d0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a46      	ldr	r2, [pc, #280]	@ (80038f0 <HAL_TIM_MspPostInit+0x134>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d12a      	bne.n	8003832 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037dc:	4b45      	ldr	r3, [pc, #276]	@ (80038f4 <HAL_TIM_MspPostInit+0x138>)
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	4a44      	ldr	r2, [pc, #272]	@ (80038f4 <HAL_TIM_MspPostInit+0x138>)
 80037e2:	f043 0308 	orr.w	r3, r3, #8
 80037e6:	6193      	str	r3, [r2, #24]
 80037e8:	4b42      	ldr	r3, [pc, #264]	@ (80038f4 <HAL_TIM_MspPostInit+0x138>)
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	61bb      	str	r3, [r7, #24]
 80037f2:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = SM_STEP_Pin;
 80037f4:	2310      	movs	r3, #16
 80037f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f8:	2302      	movs	r3, #2
 80037fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037fc:	2302      	movs	r3, #2
 80037fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(SM_STEP_GPIO_Port, &GPIO_InitStruct);
 8003800:	f107 031c 	add.w	r3, r7, #28
 8003804:	4619      	mov	r1, r3
 8003806:	483c      	ldr	r0, [pc, #240]	@ (80038f8 <HAL_TIM_MspPostInit+0x13c>)
 8003808:	f001 fcf6 	bl	80051f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800380c:	4b3b      	ldr	r3, [pc, #236]	@ (80038fc <HAL_TIM_MspPostInit+0x140>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003814:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003818:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800381a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003824:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003828:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800382a:	4a34      	ldr	r2, [pc, #208]	@ (80038fc <HAL_TIM_MspPostInit+0x140>)
 800382c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800382e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003830:	e05a      	b.n	80038e8 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a32      	ldr	r2, [pc, #200]	@ (8003900 <HAL_TIM_MspPostInit+0x144>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d119      	bne.n	8003870 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800383c:	4b2d      	ldr	r3, [pc, #180]	@ (80038f4 <HAL_TIM_MspPostInit+0x138>)
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	4a2c      	ldr	r2, [pc, #176]	@ (80038f4 <HAL_TIM_MspPostInit+0x138>)
 8003842:	f043 0308 	orr.w	r3, r3, #8
 8003846:	6193      	str	r3, [r2, #24]
 8003848:	4b2a      	ldr	r3, [pc, #168]	@ (80038f4 <HAL_TIM_MspPostInit+0x138>)
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RC_SERVO_3_Pin|RC_SERVO_2_Pin|RC_SERVO_1_Pin;
 8003854:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8003858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385a:	2302      	movs	r3, #2
 800385c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800385e:	2302      	movs	r3, #2
 8003860:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003862:	f107 031c 	add.w	r3, r7, #28
 8003866:	4619      	mov	r1, r3
 8003868:	4823      	ldr	r0, [pc, #140]	@ (80038f8 <HAL_TIM_MspPostInit+0x13c>)
 800386a:	f001 fcc5 	bl	80051f8 <HAL_GPIO_Init>
}
 800386e:	e03b      	b.n	80038e8 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM5)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a23      	ldr	r2, [pc, #140]	@ (8003904 <HAL_TIM_MspPostInit+0x148>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d118      	bne.n	80038ac <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800387a:	4b1e      	ldr	r3, [pc, #120]	@ (80038f4 <HAL_TIM_MspPostInit+0x138>)
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	4a1d      	ldr	r2, [pc, #116]	@ (80038f4 <HAL_TIM_MspPostInit+0x138>)
 8003880:	f043 0304 	orr.w	r3, r3, #4
 8003884:	6193      	str	r3, [r2, #24]
 8003886:	4b1b      	ldr	r3, [pc, #108]	@ (80038f4 <HAL_TIM_MspPostInit+0x138>)
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8003892:	2301      	movs	r3, #1
 8003894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003896:	2302      	movs	r3, #2
 8003898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800389a:	2302      	movs	r3, #2
 800389c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800389e:	f107 031c 	add.w	r3, r7, #28
 80038a2:	4619      	mov	r1, r3
 80038a4:	4818      	ldr	r0, [pc, #96]	@ (8003908 <HAL_TIM_MspPostInit+0x14c>)
 80038a6:	f001 fca7 	bl	80051f8 <HAL_GPIO_Init>
}
 80038aa:	e01d      	b.n	80038e8 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM8)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a16      	ldr	r2, [pc, #88]	@ (800390c <HAL_TIM_MspPostInit+0x150>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d118      	bne.n	80038e8 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038b6:	4b0f      	ldr	r3, [pc, #60]	@ (80038f4 <HAL_TIM_MspPostInit+0x138>)
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	4a0e      	ldr	r2, [pc, #56]	@ (80038f4 <HAL_TIM_MspPostInit+0x138>)
 80038bc:	f043 0310 	orr.w	r3, r3, #16
 80038c0:	6193      	str	r3, [r2, #24]
 80038c2:	4b0c      	ldr	r3, [pc, #48]	@ (80038f4 <HAL_TIM_MspPostInit+0x138>)
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	f003 0310 	and.w	r3, r3, #16
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80038ce:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80038d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d4:	2302      	movs	r3, #2
 80038d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d8:	2302      	movs	r3, #2
 80038da:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038dc:	f107 031c 	add.w	r3, r7, #28
 80038e0:	4619      	mov	r1, r3
 80038e2:	480b      	ldr	r0, [pc, #44]	@ (8003910 <HAL_TIM_MspPostInit+0x154>)
 80038e4:	f001 fc88 	bl	80051f8 <HAL_GPIO_Init>
}
 80038e8:	bf00      	nop
 80038ea:	3730      	adds	r7, #48	@ 0x30
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40000400 	.word	0x40000400
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40010c00 	.word	0x40010c00
 80038fc:	40010000 	.word	0x40010000
 8003900:	40000800 	.word	0x40000800
 8003904:	40000c00 	.word	0x40000c00
 8003908:	40010800 	.word	0x40010800
 800390c:	40013400 	.word	0x40013400
 8003910:	40011000 	.word	0x40011000

08003914 <initUartReceiveIT>:
	/**
	 * @brief UART receive function
	 * @param huart &huart1 or // &huart2
	 */
	enum StatusCode initUartReceiveIT(UART_HandleTypeDef *huart)
	{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 800391c:	2300      	movs	r3, #0
 800391e:	73fb      	strb	r3, [r7, #15]
 8003920:	e025      	b.n	800396e <initUartReceiveIT+0x5a>
		{
			if (huart->Instance == USART1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a16      	ldr	r2, [pc, #88]	@ (8003980 <initUartReceiveIT+0x6c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d109      	bne.n	8003940 <initUartReceiveIT+0x2c>
			{
				if (HAL_UART_Receive_IT(&huart1, &receive_buffer_1, 1) == HAL_OK)
 800392c:	2201      	movs	r2, #1
 800392e:	4915      	ldr	r1, [pc, #84]	@ (8003984 <initUartReceiveIT+0x70>)
 8003930:	4815      	ldr	r0, [pc, #84]	@ (8003988 <initUartReceiveIT+0x74>)
 8003932:	f005 fad5 	bl	8008ee0 <HAL_UART_Receive_IT>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d112      	bne.n	8003962 <initUartReceiveIT+0x4e>
				{
					return STATUS_OK;
 800393c:	2301      	movs	r3, #1
 800393e:	e01a      	b.n	8003976 <initUartReceiveIT+0x62>
				}
			}
			else if (huart->Instance == USART2)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a11      	ldr	r2, [pc, #68]	@ (800398c <initUartReceiveIT+0x78>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d109      	bne.n	800395e <initUartReceiveIT+0x4a>
			{
				if (HAL_UART_Receive_IT(&huart2, &receive_buffer_2, 1) == HAL_OK)
 800394a:	2201      	movs	r2, #1
 800394c:	4910      	ldr	r1, [pc, #64]	@ (8003990 <initUartReceiveIT+0x7c>)
 800394e:	4811      	ldr	r0, [pc, #68]	@ (8003994 <initUartReceiveIT+0x80>)
 8003950:	f005 fac6 	bl	8008ee0 <HAL_UART_Receive_IT>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d103      	bne.n	8003962 <initUartReceiveIT+0x4e>
				{
					return STATUS_OK;
 800395a:	2301      	movs	r3, #1
 800395c:	e00b      	b.n	8003976 <initUartReceiveIT+0x62>
				}
			}
			else
			{
				return STATUS_ERROR;
 800395e:	2300      	movs	r3, #0
 8003960:	e009      	b.n	8003976 <initUartReceiveIT+0x62>
			}

			HAL_Delay(50);
 8003962:	2032      	movs	r0, #50	@ 0x32
 8003964:	f000 fab4 	bl	8003ed0 <HAL_Delay>
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	3301      	adds	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
 800396e:	7bfb      	ldrb	r3, [r7, #15]
 8003970:	2b02      	cmp	r3, #2
 8003972:	d9d6      	bls.n	8003922 <initUartReceiveIT+0xe>
		}
		return STATUS_ERROR;
 8003974:	2300      	movs	r3, #0
	}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40013800 	.word	0x40013800
 8003984:	200003a8 	.word	0x200003a8
 8003988:	200003ac 	.word	0x200003ac
 800398c:	40004400 	.word	0x40004400
 8003990:	200003aa 	.word	0x200003aa
 8003994:	200003f4 	.word	0x200003f4

08003998 <uartTransmitString>:
	 * @param huart &huart1 or // &huart2
	 * @param str The string to be transmitted
	 * @note str sould be < 100 character
	 */
	enum StatusCode uartTransmitString(UART_HandleTypeDef *huart, const char *str)
	{
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 80039a2:	2300      	movs	r3, #0
 80039a4:	73fb      	strb	r3, [r7, #15]
 80039a6:	e019      	b.n	80039dc <uartTransmitString+0x44>
		{
			if (HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), strlen(str) * 2) == HAL_OK)
 80039a8:	6838      	ldr	r0, [r7, #0]
 80039aa:	f7fc fc3b 	bl	8000224 <strlen>
 80039ae:	4603      	mov	r3, r0
 80039b0:	b29c      	uxth	r4, r3
 80039b2:	6838      	ldr	r0, [r7, #0]
 80039b4:	f7fc fc36 	bl	8000224 <strlen>
 80039b8:	4603      	mov	r3, r0
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	4622      	mov	r2, r4
 80039be:	6839      	ldr	r1, [r7, #0]
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f005 fa02 	bl	8008dca <HAL_UART_Transmit>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <uartTransmitString+0x38>
			{
				return STATUS_OK;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e009      	b.n	80039e4 <uartTransmitString+0x4c>
			}
			HAL_Delay(50);
 80039d0:	2032      	movs	r0, #50	@ 0x32
 80039d2:	f000 fa7d 	bl	8003ed0 <HAL_Delay>
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	3301      	adds	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d9e2      	bls.n	80039a8 <uartTransmitString+0x10>
		}
		return STATUS_ERROR;
 80039e2:	2300      	movs	r3, #0
	}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd90      	pop	{r4, r7, pc}

080039ec <uartTransmit8b>:

	enum StatusCode uartTransmit8b(UART_HandleTypeDef *huart, const uint8_t *array, const uint16_t size)
	{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	4613      	mov	r3, r2
 80039f8:	80fb      	strh	r3, [r7, #6]
		if (array == NULL || size == 0)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <uartTransmit8b+0x1a>
 8003a00:	88fb      	ldrh	r3, [r7, #6]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <uartTransmit8b+0x1e>
		{
			return STATUS_ERROR;
 8003a06:	2300      	movs	r3, #0
 8003a08:	e018      	b.n	8003a3c <uartTransmit8b+0x50>
		}

		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	75fb      	strb	r3, [r7, #23]
 8003a0e:	e011      	b.n	8003a34 <uartTransmit8b+0x48>
		{
			if (HAL_UART_Transmit(huart, array, size, size * 2) == HAL_OK)
 8003a10:	88fb      	ldrh	r3, [r7, #6]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	88fa      	ldrh	r2, [r7, #6]
 8003a16:	68b9      	ldr	r1, [r7, #8]
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f005 f9d6 	bl	8008dca <HAL_UART_Transmit>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <uartTransmit8b+0x3c>
			{
				return STATUS_OK;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e009      	b.n	8003a3c <uartTransmit8b+0x50>
			}
			HAL_Delay(50);
 8003a28:	2032      	movs	r0, #50	@ 0x32
 8003a2a:	f000 fa51 	bl	8003ed0 <HAL_Delay>
		for (uint8_t attempt = 0; attempt < MAX_RETRY_COUNT; ++attempt)
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
 8003a30:	3301      	adds	r3, #1
 8003a32:	75fb      	strb	r3, [r7, #23]
 8003a34:	7dfb      	ldrb	r3, [r7, #23]
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d9ea      	bls.n	8003a10 <uartTransmit8b+0x24>
		}
		return STATUS_ERROR;
 8003a3a:	2300      	movs	r3, #0
	}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <getFlagUart1>:

	uint8_t getFlagUart1()
	{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
		if (uart_1_flag)
 8003a48:	4b07      	ldr	r3, [pc, #28]	@ (8003a68 <getFlagUart1+0x24>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d004      	beq.n	8003a5c <getFlagUart1+0x18>
		{
			uart_1_flag = 0;
 8003a52:	4b05      	ldr	r3, [pc, #20]	@ (8003a68 <getFlagUart1+0x24>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
			return 1;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <getFlagUart1+0x1a>
		}
		return 0;
 8003a5c:	2300      	movs	r3, #0
	}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc80      	pop	{r7}
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	200003a9 	.word	0x200003a9

08003a6c <getBufferUart1>:
		}
		return 0;
	}

	uint8_t getBufferUart1()
	{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
		return receive_buffer_1;
 8003a70:	4b02      	ldr	r3, [pc, #8]	@ (8003a7c <getBufferUart1+0x10>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
	}
 8003a74:	4618      	mov	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr
 8003a7c:	200003a8 	.word	0x200003a8

08003a80 <getBufferUart2>:

	uint8_t getBufferUart2()
	{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
		return receive_buffer_2;
 8003a84:	4b02      	ldr	r3, [pc, #8]	@ (8003a90 <getBufferUart2+0x10>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
	}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr
 8003a90:	200003aa 	.word	0x200003aa

08003a94 <HAL_UART_RxCpltCallback>:
	 * @brief This function is evoked automatically when the UART peripheral received data send through uart and echo its back
	 *
	 * @param huart The UART handle
	 */
	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
		if (huart->Instance == USART1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8003ad8 <HAL_UART_RxCpltCallback+0x44>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d107      	bne.n	8003ab6 <HAL_UART_RxCpltCallback+0x22>
		{
			uart_1_flag = 1;
 8003aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8003adc <HAL_UART_RxCpltCallback+0x48>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	701a      	strb	r2, [r3, #0]
			// turn back on the receice interrupt
			HAL_UART_Receive_IT(&huart1, &receive_buffer_1, 1);
 8003aac:	2201      	movs	r2, #1
 8003aae:	490c      	ldr	r1, [pc, #48]	@ (8003ae0 <HAL_UART_RxCpltCallback+0x4c>)
 8003ab0:	480c      	ldr	r0, [pc, #48]	@ (8003ae4 <HAL_UART_RxCpltCallback+0x50>)
 8003ab2:	f005 fa15 	bl	8008ee0 <HAL_UART_Receive_IT>
		}
		if (huart->Instance == USART2)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a0b      	ldr	r2, [pc, #44]	@ (8003ae8 <HAL_UART_RxCpltCallback+0x54>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d107      	bne.n	8003ad0 <HAL_UART_RxCpltCallback+0x3c>
		{
			uart_2_flag = 1;
 8003ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8003aec <HAL_UART_RxCpltCallback+0x58>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	701a      	strb	r2, [r3, #0]
			// turn back on the receice interrupt
			HAL_UART_Receive_IT(&huart2, &receive_buffer_2, 1);
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	4909      	ldr	r1, [pc, #36]	@ (8003af0 <HAL_UART_RxCpltCallback+0x5c>)
 8003aca:	480a      	ldr	r0, [pc, #40]	@ (8003af4 <HAL_UART_RxCpltCallback+0x60>)
 8003acc:	f005 fa08 	bl	8008ee0 <HAL_UART_Receive_IT>
		}
	}
 8003ad0:	bf00      	nop
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40013800 	.word	0x40013800
 8003adc:	200003a9 	.word	0x200003a9
 8003ae0:	200003a8 	.word	0x200003a8
 8003ae4:	200003ac 	.word	0x200003ac
 8003ae8:	40004400 	.word	0x40004400
 8003aec:	200003ab 	.word	0x200003ab
 8003af0:	200003aa 	.word	0x200003aa
 8003af4:	200003f4 	.word	0x200003f4

08003af8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003afc:	4b11      	ldr	r3, [pc, #68]	@ (8003b44 <MX_USART1_UART_Init+0x4c>)
 8003afe:	4a12      	ldr	r2, [pc, #72]	@ (8003b48 <MX_USART1_UART_Init+0x50>)
 8003b00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003b02:	4b10      	ldr	r3, [pc, #64]	@ (8003b44 <MX_USART1_UART_Init+0x4c>)
 8003b04:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003b08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b44 <MX_USART1_UART_Init+0x4c>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b10:	4b0c      	ldr	r3, [pc, #48]	@ (8003b44 <MX_USART1_UART_Init+0x4c>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b16:	4b0b      	ldr	r3, [pc, #44]	@ (8003b44 <MX_USART1_UART_Init+0x4c>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b1c:	4b09      	ldr	r3, [pc, #36]	@ (8003b44 <MX_USART1_UART_Init+0x4c>)
 8003b1e:	220c      	movs	r2, #12
 8003b20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b22:	4b08      	ldr	r3, [pc, #32]	@ (8003b44 <MX_USART1_UART_Init+0x4c>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b28:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <MX_USART1_UART_Init+0x4c>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b2e:	4805      	ldr	r0, [pc, #20]	@ (8003b44 <MX_USART1_UART_Init+0x4c>)
 8003b30:	f005 f8fb 	bl	8008d2a <HAL_UART_Init>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003b3a:	f7fd fe34 	bl	80017a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b3e:	bf00      	nop
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	200003ac 	.word	0x200003ac
 8003b48:	40013800 	.word	0x40013800

08003b4c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b50:	4b11      	ldr	r3, [pc, #68]	@ (8003b98 <MX_USART2_UART_Init+0x4c>)
 8003b52:	4a12      	ldr	r2, [pc, #72]	@ (8003b9c <MX_USART2_UART_Init+0x50>)
 8003b54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003b56:	4b10      	ldr	r3, [pc, #64]	@ (8003b98 <MX_USART2_UART_Init+0x4c>)
 8003b58:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003b5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003b98 <MX_USART2_UART_Init+0x4c>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b64:	4b0c      	ldr	r3, [pc, #48]	@ (8003b98 <MX_USART2_UART_Init+0x4c>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b98 <MX_USART2_UART_Init+0x4c>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b70:	4b09      	ldr	r3, [pc, #36]	@ (8003b98 <MX_USART2_UART_Init+0x4c>)
 8003b72:	220c      	movs	r2, #12
 8003b74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b76:	4b08      	ldr	r3, [pc, #32]	@ (8003b98 <MX_USART2_UART_Init+0x4c>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b7c:	4b06      	ldr	r3, [pc, #24]	@ (8003b98 <MX_USART2_UART_Init+0x4c>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b82:	4805      	ldr	r0, [pc, #20]	@ (8003b98 <MX_USART2_UART_Init+0x4c>)
 8003b84:	f005 f8d1 	bl	8008d2a <HAL_UART_Init>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003b8e:	f7fd fe0a 	bl	80017a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b92:	bf00      	nop
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	200003f4 	.word	0x200003f4
 8003b9c:	40004400 	.word	0x40004400

08003ba0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08a      	sub	sp, #40	@ 0x28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba8:	f107 0318 	add.w	r3, r7, #24
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	605a      	str	r2, [r3, #4]
 8003bb2:	609a      	str	r2, [r3, #8]
 8003bb4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a3f      	ldr	r2, [pc, #252]	@ (8003cb8 <HAL_UART_MspInit+0x118>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d13a      	bne.n	8003c36 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bc0:	4b3e      	ldr	r3, [pc, #248]	@ (8003cbc <HAL_UART_MspInit+0x11c>)
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	4a3d      	ldr	r2, [pc, #244]	@ (8003cbc <HAL_UART_MspInit+0x11c>)
 8003bc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bca:	6193      	str	r3, [r2, #24]
 8003bcc:	4b3b      	ldr	r3, [pc, #236]	@ (8003cbc <HAL_UART_MspInit+0x11c>)
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bd8:	4b38      	ldr	r3, [pc, #224]	@ (8003cbc <HAL_UART_MspInit+0x11c>)
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	4a37      	ldr	r2, [pc, #220]	@ (8003cbc <HAL_UART_MspInit+0x11c>)
 8003bde:	f043 0304 	orr.w	r3, r3, #4
 8003be2:	6193      	str	r3, [r2, #24]
 8003be4:	4b35      	ldr	r3, [pc, #212]	@ (8003cbc <HAL_UART_MspInit+0x11c>)
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003bf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bfe:	f107 0318 	add.w	r3, r7, #24
 8003c02:	4619      	mov	r1, r3
 8003c04:	482e      	ldr	r0, [pc, #184]	@ (8003cc0 <HAL_UART_MspInit+0x120>)
 8003c06:	f001 faf7 	bl	80051f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c14:	2300      	movs	r3, #0
 8003c16:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c18:	f107 0318 	add.w	r3, r7, #24
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4828      	ldr	r0, [pc, #160]	@ (8003cc0 <HAL_UART_MspInit+0x120>)
 8003c20:	f001 faea 	bl	80051f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c24:	2200      	movs	r2, #0
 8003c26:	2100      	movs	r1, #0
 8003c28:	2025      	movs	r0, #37	@ 0x25
 8003c2a:	f000 fe2a 	bl	8004882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c2e:	2025      	movs	r0, #37	@ 0x25
 8003c30:	f000 fe43 	bl	80048ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003c34:	e03c      	b.n	8003cb0 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a22      	ldr	r2, [pc, #136]	@ (8003cc4 <HAL_UART_MspInit+0x124>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d137      	bne.n	8003cb0 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c40:	4b1e      	ldr	r3, [pc, #120]	@ (8003cbc <HAL_UART_MspInit+0x11c>)
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	4a1d      	ldr	r2, [pc, #116]	@ (8003cbc <HAL_UART_MspInit+0x11c>)
 8003c46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c4a:	61d3      	str	r3, [r2, #28]
 8003c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cbc <HAL_UART_MspInit+0x11c>)
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c58:	4b18      	ldr	r3, [pc, #96]	@ (8003cbc <HAL_UART_MspInit+0x11c>)
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	4a17      	ldr	r2, [pc, #92]	@ (8003cbc <HAL_UART_MspInit+0x11c>)
 8003c5e:	f043 0304 	orr.w	r3, r3, #4
 8003c62:	6193      	str	r3, [r2, #24]
 8003c64:	4b15      	ldr	r3, [pc, #84]	@ (8003cbc <HAL_UART_MspInit+0x11c>)
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c70:	2304      	movs	r3, #4
 8003c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c74:	2302      	movs	r3, #2
 8003c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c7c:	f107 0318 	add.w	r3, r7, #24
 8003c80:	4619      	mov	r1, r3
 8003c82:	480f      	ldr	r0, [pc, #60]	@ (8003cc0 <HAL_UART_MspInit+0x120>)
 8003c84:	f001 fab8 	bl	80051f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003c88:	2308      	movs	r3, #8
 8003c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c90:	2300      	movs	r3, #0
 8003c92:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c94:	f107 0318 	add.w	r3, r7, #24
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4809      	ldr	r0, [pc, #36]	@ (8003cc0 <HAL_UART_MspInit+0x120>)
 8003c9c:	f001 faac 	bl	80051f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	2026      	movs	r0, #38	@ 0x26
 8003ca6:	f000 fdec 	bl	8004882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003caa:	2026      	movs	r0, #38	@ 0x26
 8003cac:	f000 fe05 	bl	80048ba <HAL_NVIC_EnableIRQ>
}
 8003cb0:	bf00      	nop
 8003cb2:	3728      	adds	r7, #40	@ 0x28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40013800 	.word	0x40013800
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	40010800 	.word	0x40010800
 8003cc4:	40004400 	.word	0x40004400

08003cc8 <uint32_to_bytes>:
 * @note The output array should be at least 4*input_size bytes long
 * uint32_t input_32[] = {0x12345678, 0x9ABCDEF0};
 * uint32_to_bytes → [0x12, 0x34, 0x56, 0x78, 0x9A, 0xBC, 0xDE, 0xF0]
 */
void uint32_to_bytes(const uint32_t *input_32b, uint8_t *output_8b, const uint8_t input_size)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b087      	sub	sp, #28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < input_size; i++)
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	75fb      	strb	r3, [r7, #23]
 8003cda:	e035      	b.n	8003d48 <uint32_to_bytes+0x80>
    {
        output_8b[4 * i] = (input_32b[i] >> 24) & 0x000000FF;
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	0e1a      	lsrs	r2, r3, #24
 8003ce8:	7dfb      	ldrb	r3, [r7, #23]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4619      	mov	r1, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	440b      	add	r3, r1
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	701a      	strb	r2, [r3, #0]
        output_8b[4 * i + 1] = (input_32b[i] >> 16) & 0x000000FF;
 8003cf6:	7dfb      	ldrb	r3, [r7, #23]
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	0c19      	lsrs	r1, r3, #16
 8003d02:	7dfb      	ldrb	r3, [r7, #23]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	3301      	adds	r3, #1
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	b2ca      	uxtb	r2, r1
 8003d0e:	701a      	strb	r2, [r3, #0]
        output_8b[4 * i + 2] = (input_32b[i] >> 8) & 0x000000FF;
 8003d10:	7dfb      	ldrb	r3, [r7, #23]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4413      	add	r3, r2
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	0a19      	lsrs	r1, r3, #8
 8003d1c:	7dfb      	ldrb	r3, [r7, #23]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	3302      	adds	r3, #2
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	4413      	add	r3, r2
 8003d26:	b2ca      	uxtb	r2, r1
 8003d28:	701a      	strb	r2, [r3, #0]
        output_8b[4 * i + 3] = input_32b[i] & 0x000000FF;
 8003d2a:	7dfb      	ldrb	r3, [r7, #23]
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	4413      	add	r3, r2
 8003d32:	6819      	ldr	r1, [r3, #0]
 8003d34:	7dfb      	ldrb	r3, [r7, #23]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	3303      	adds	r3, #3
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	b2ca      	uxtb	r2, r1
 8003d40:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < input_size; i++)
 8003d42:	7dfb      	ldrb	r3, [r7, #23]
 8003d44:	3301      	adds	r3, #1
 8003d46:	75fb      	strb	r3, [r7, #23]
 8003d48:	7dfa      	ldrb	r2, [r7, #23]
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d3c5      	bcc.n	8003cdc <uint32_to_bytes+0x14>
    }
}
 8003d50:	bf00      	nop
 8003d52:	bf00      	nop
 8003d54:	371c      	adds	r7, #28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr

08003d5c <uint16_to_bytes>:
 * @note The output array should be at least 2*input_size bytes long
 * uint16_t input_16[] = {0x1234, 0x5678};
 * uint16_to_bytes → [0x12, 0x34, 0x56, 0x78]
 */
void uint16_to_bytes(const uint16_t *input_16b, uint8_t *output_8b, const uint8_t input_size)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	4613      	mov	r3, r2
 8003d68:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < input_size; i++)
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	75fb      	strb	r3, [r7, #23]
 8003d6e:	e01c      	b.n	8003daa <uint16_to_bytes+0x4e>
    {
        output_8b[2 * i] = (input_16b[i] >> 8) & 0x00FF;
 8003d70:	7dfb      	ldrb	r3, [r7, #23]
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4413      	add	r3, r2
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	0a1b      	lsrs	r3, r3, #8
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	7dfb      	ldrb	r3, [r7, #23]
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	4619      	mov	r1, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	440b      	add	r3, r1
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	701a      	strb	r2, [r3, #0]
        output_8b[2 * i + 1] = input_16b[i] & 0x00FF;
 8003d8c:	7dfb      	ldrb	r3, [r7, #23]
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	8819      	ldrh	r1, [r3, #0]
 8003d96:	7dfb      	ldrb	r3, [r7, #23]
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	4413      	add	r3, r2
 8003da0:	b2ca      	uxtb	r2, r1
 8003da2:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < input_size; i++)
 8003da4:	7dfb      	ldrb	r3, [r7, #23]
 8003da6:	3301      	adds	r3, #1
 8003da8:	75fb      	strb	r3, [r7, #23]
 8003daa:	7dfa      	ldrb	r2, [r7, #23]
 8003dac:	79fb      	ldrb	r3, [r7, #7]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d3de      	bcc.n	8003d70 <uint16_to_bytes+0x14>
    }
}
 8003db2:	bf00      	nop
 8003db4:	bf00      	nop
 8003db6:	371c      	adds	r7, #28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr
	...

08003dc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003dc0:	f7ff f9fa 	bl	80031b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003dc4:	480b      	ldr	r0, [pc, #44]	@ (8003df4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003dc6:	490c      	ldr	r1, [pc, #48]	@ (8003df8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8003dfc <LoopFillZerobss+0x16>)
  movs r3, #0
 8003dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003dcc:	e002      	b.n	8003dd4 <LoopCopyDataInit>

08003dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dd2:	3304      	adds	r3, #4

08003dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003dd8:	d3f9      	bcc.n	8003dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dda:	4a09      	ldr	r2, [pc, #36]	@ (8003e00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003ddc:	4c09      	ldr	r4, [pc, #36]	@ (8003e04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003de0:	e001      	b.n	8003de6 <LoopFillZerobss>

08003de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003de4:	3204      	adds	r2, #4

08003de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003de8:	d3fb      	bcc.n	8003de2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003dea:	f005 fe11 	bl	8009a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003dee:	f7fd fc53 	bl	8001698 <main>
  bx lr
 8003df2:	4770      	bx	lr
  ldr r0, =_sdata
 8003df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003df8:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8003dfc:	08009c80 	.word	0x08009c80
  ldr r2, =_sbss
 8003e00:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8003e04:	20000440 	.word	0x20000440

08003e08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e08:	e7fe      	b.n	8003e08 <ADC1_2_IRQHandler>
	...

08003e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e10:	4b08      	ldr	r3, [pc, #32]	@ (8003e34 <HAL_Init+0x28>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a07      	ldr	r2, [pc, #28]	@ (8003e34 <HAL_Init+0x28>)
 8003e16:	f043 0310 	orr.w	r3, r3, #16
 8003e1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e1c:	2003      	movs	r0, #3
 8003e1e:	f000 fd25 	bl	800486c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e22:	200f      	movs	r0, #15
 8003e24:	f000 f808 	bl	8003e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e28:	f7ff f8c2 	bl	8002fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40022000 	.word	0x40022000

08003e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e40:	4b12      	ldr	r3, [pc, #72]	@ (8003e8c <HAL_InitTick+0x54>)
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4b12      	ldr	r3, [pc, #72]	@ (8003e90 <HAL_InitTick+0x58>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	4619      	mov	r1, r3
 8003e4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fd3d 	bl	80048d6 <HAL_SYSTICK_Config>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e00e      	b.n	8003e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b0f      	cmp	r3, #15
 8003e6a:	d80a      	bhi.n	8003e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e74:	f000 fd05 	bl	8004882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e78:	4a06      	ldr	r2, [pc, #24]	@ (8003e94 <HAL_InitTick+0x5c>)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e000      	b.n	8003e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	20000028 	.word	0x20000028
 8003e90:	20000030 	.word	0x20000030
 8003e94:	2000002c 	.word	0x2000002c

08003e98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e9c:	4b05      	ldr	r3, [pc, #20]	@ (8003eb4 <HAL_IncTick+0x1c>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4b05      	ldr	r3, [pc, #20]	@ (8003eb8 <HAL_IncTick+0x20>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	4a03      	ldr	r2, [pc, #12]	@ (8003eb8 <HAL_IncTick+0x20>)
 8003eaa:	6013      	str	r3, [r2, #0]
}
 8003eac:	bf00      	nop
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr
 8003eb4:	20000030 	.word	0x20000030
 8003eb8:	2000043c 	.word	0x2000043c

08003ebc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8003ec0:	4b02      	ldr	r3, [pc, #8]	@ (8003ecc <HAL_GetTick+0x10>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr
 8003ecc:	2000043c 	.word	0x2000043c

08003ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ed8:	f7ff fff0 	bl	8003ebc <HAL_GetTick>
 8003edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ee8:	d005      	beq.n	8003ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003eea:	4b0a      	ldr	r3, [pc, #40]	@ (8003f14 <HAL_Delay+0x44>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ef6:	bf00      	nop
 8003ef8:	f7ff ffe0 	bl	8003ebc <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d8f7      	bhi.n	8003ef8 <HAL_Delay+0x28>
  {
  }
}
 8003f08:	bf00      	nop
 8003f0a:	bf00      	nop
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20000030 	.word	0x20000030

08003f18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e0ce      	b.n	80040d8 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d109      	bne.n	8003f5c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7fc fa0e 	bl	8000378 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 fb11 	bl	8004584 <ADC_ConversionStop_Disable>
 8003f62:	4603      	mov	r3, r0
 8003f64:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6a:	f003 0310 	and.w	r3, r3, #16
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f040 80a9 	bne.w	80040c6 <HAL_ADC_Init+0x1ae>
 8003f74:	7dfb      	ldrb	r3, [r7, #23]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f040 80a5 	bne.w	80040c6 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f80:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003f84:	f023 0302 	bic.w	r3, r3, #2
 8003f88:	f043 0202 	orr.w	r2, r3, #2
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4951      	ldr	r1, [pc, #324]	@ (80040e0 <HAL_ADC_Init+0x1c8>)
 8003f9a:	428b      	cmp	r3, r1
 8003f9c:	d10a      	bne.n	8003fb4 <HAL_ADC_Init+0x9c>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003fa6:	d002      	beq.n	8003fae <HAL_ADC_Init+0x96>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	e004      	b.n	8003fb8 <HAL_ADC_Init+0xa0>
 8003fae:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003fb2:	e001      	b.n	8003fb8 <HAL_ADC_Init+0xa0>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003fb8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	7b1b      	ldrb	r3, [r3, #12]
 8003fbe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003fc0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fd0:	d003      	beq.n	8003fda <HAL_ADC_Init+0xc2>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d102      	bne.n	8003fe0 <HAL_ADC_Init+0xc8>
 8003fda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fde:	e000      	b.n	8003fe2 <HAL_ADC_Init+0xca>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	7d1b      	ldrb	r3, [r3, #20]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d119      	bne.n	8004024 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	7b1b      	ldrb	r3, [r3, #12]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d109      	bne.n	800400c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	035a      	lsls	r2, r3, #13
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004008:	613b      	str	r3, [r7, #16]
 800400a:	e00b      	b.n	8004024 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004010:	f043 0220 	orr.w	r2, r3, #32
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401c:	f043 0201 	orr.w	r2, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	430a      	orrs	r2, r1
 8004036:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	4b29      	ldr	r3, [pc, #164]	@ (80040e4 <HAL_ADC_Init+0x1cc>)
 8004040:	4013      	ands	r3, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6812      	ldr	r2, [r2, #0]
 8004046:	68b9      	ldr	r1, [r7, #8]
 8004048:	430b      	orrs	r3, r1
 800404a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004054:	d003      	beq.n	800405e <HAL_ADC_Init+0x146>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d104      	bne.n	8004068 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	3b01      	subs	r3, #1
 8004064:	051b      	lsls	r3, r3, #20
 8004066:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	430a      	orrs	r2, r1
 800407a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	4b19      	ldr	r3, [pc, #100]	@ (80040e8 <HAL_ADC_Init+0x1d0>)
 8004084:	4013      	ands	r3, r2
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	429a      	cmp	r2, r3
 800408a:	d10b      	bne.n	80040a4 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004096:	f023 0303 	bic.w	r3, r3, #3
 800409a:	f043 0201 	orr.w	r2, r3, #1
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80040a2:	e018      	b.n	80040d6 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a8:	f023 0312 	bic.w	r3, r3, #18
 80040ac:	f043 0210 	orr.w	r2, r3, #16
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b8:	f043 0201 	orr.w	r2, r3, #1
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80040c4:	e007      	b.n	80040d6 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ca:	f043 0210 	orr.w	r2, r3, #16
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80040d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40013c00 	.word	0x40013c00
 80040e4:	ffe1f7fd 	.word	0xffe1f7fd
 80040e8:	ff1f0efe 	.word	0xff1f0efe

080040ec <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a64      	ldr	r2, [pc, #400]	@ (8004294 <HAL_ADC_Start_DMA+0x1a8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d004      	beq.n	8004110 <HAL_ADC_Start_DMA+0x24>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a63      	ldr	r2, [pc, #396]	@ (8004298 <HAL_ADC_Start_DMA+0x1ac>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d106      	bne.n	800411e <HAL_ADC_Start_DMA+0x32>
 8004110:	4b60      	ldr	r3, [pc, #384]	@ (8004294 <HAL_ADC_Start_DMA+0x1a8>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8004118:	2b00      	cmp	r3, #0
 800411a:	f040 80b3 	bne.w	8004284 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_ADC_Start_DMA+0x40>
 8004128:	2302      	movs	r3, #2
 800412a:	e0ae      	b.n	800428a <HAL_ADC_Start_DMA+0x19e>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 f9cb 	bl	80044d0 <ADC_Enable>
 800413a:	4603      	mov	r3, r0
 800413c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800413e:	7dfb      	ldrb	r3, [r7, #23]
 8004140:	2b00      	cmp	r3, #0
 8004142:	f040 809a 	bne.w	800427a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800414e:	f023 0301 	bic.w	r3, r3, #1
 8004152:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a4e      	ldr	r2, [pc, #312]	@ (8004298 <HAL_ADC_Start_DMA+0x1ac>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d105      	bne.n	8004170 <HAL_ADC_Start_DMA+0x84>
 8004164:	4b4b      	ldr	r3, [pc, #300]	@ (8004294 <HAL_ADC_Start_DMA+0x1a8>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d115      	bne.n	800419c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004174:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004186:	2b00      	cmp	r3, #0
 8004188:	d026      	beq.n	80041d8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004192:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800419a:	e01d      	b.n	80041d8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a39      	ldr	r2, [pc, #228]	@ (8004294 <HAL_ADC_Start_DMA+0x1a8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d004      	beq.n	80041bc <HAL_ADC_Start_DMA+0xd0>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a38      	ldr	r2, [pc, #224]	@ (8004298 <HAL_ADC_Start_DMA+0x1ac>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d10d      	bne.n	80041d8 <HAL_ADC_Start_DMA+0xec>
 80041bc:	4b35      	ldr	r3, [pc, #212]	@ (8004294 <HAL_ADC_Start_DMA+0x1a8>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d007      	beq.n	80041d8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041cc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80041d0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d006      	beq.n	80041f2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e8:	f023 0206 	bic.w	r2, r3, #6
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	62da      	str	r2, [r3, #44]	@ 0x2c
 80041f0:	e002      	b.n	80041f8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	4a25      	ldr	r2, [pc, #148]	@ (800429c <HAL_ADC_Start_DMA+0x1b0>)
 8004206:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	4a24      	ldr	r2, [pc, #144]	@ (80042a0 <HAL_ADC_Start_DMA+0x1b4>)
 800420e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	4a23      	ldr	r2, [pc, #140]	@ (80042a4 <HAL_ADC_Start_DMA+0x1b8>)
 8004216:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f06f 0202 	mvn.w	r2, #2
 8004220:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004230:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a18      	ldr	r0, [r3, #32]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	334c      	adds	r3, #76	@ 0x4c
 800423c:	4619      	mov	r1, r3
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f000 fbcb 	bl	80049dc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004250:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004254:	d108      	bne.n	8004268 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8004264:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004266:	e00f      	b.n	8004288 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004276:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004278:	e006      	b.n	8004288 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8004282:	e001      	b.n	8004288 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004288:	7dfb      	ldrb	r3, [r7, #23]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40012400 	.word	0x40012400
 8004298:	40012800 	.word	0x40012800
 800429c:	08004607 	.word	0x08004607
 80042a0:	08004683 	.word	0x08004683
 80042a4:	0800469f 	.word	0x0800469f

080042a8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr

080042ba <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr
	...

080042e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d101      	bne.n	8004300 <HAL_ADC_ConfigChannel+0x20>
 80042fc:	2302      	movs	r3, #2
 80042fe:	e0dc      	b.n	80044ba <HAL_ADC_ConfigChannel+0x1da>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b06      	cmp	r3, #6
 800430e:	d81c      	bhi.n	800434a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	4613      	mov	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	3b05      	subs	r3, #5
 8004322:	221f      	movs	r2, #31
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	43db      	mvns	r3, r3
 800432a:	4019      	ands	r1, r3
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	6818      	ldr	r0, [r3, #0]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	3b05      	subs	r3, #5
 800433c:	fa00 f203 	lsl.w	r2, r0, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	635a      	str	r2, [r3, #52]	@ 0x34
 8004348:	e03c      	b.n	80043c4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b0c      	cmp	r3, #12
 8004350:	d81c      	bhi.n	800438c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	4613      	mov	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	3b23      	subs	r3, #35	@ 0x23
 8004364:	221f      	movs	r2, #31
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	43db      	mvns	r3, r3
 800436c:	4019      	ands	r1, r3
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	4613      	mov	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	3b23      	subs	r3, #35	@ 0x23
 800437e:	fa00 f203 	lsl.w	r2, r0, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	631a      	str	r2, [r3, #48]	@ 0x30
 800438a:	e01b      	b.n	80043c4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	3b41      	subs	r3, #65	@ 0x41
 800439e:	221f      	movs	r2, #31
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	43db      	mvns	r3, r3
 80043a6:	4019      	ands	r1, r3
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	3b41      	subs	r3, #65	@ 0x41
 80043b8:	fa00 f203 	lsl.w	r2, r0, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b09      	cmp	r3, #9
 80043ca:	d91c      	bls.n	8004406 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68d9      	ldr	r1, [r3, #12]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	4613      	mov	r3, r2
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	4413      	add	r3, r2
 80043dc:	3b1e      	subs	r3, #30
 80043de:	2207      	movs	r2, #7
 80043e0:	fa02 f303 	lsl.w	r3, r2, r3
 80043e4:	43db      	mvns	r3, r3
 80043e6:	4019      	ands	r1, r3
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	6898      	ldr	r0, [r3, #8]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	4613      	mov	r3, r2
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	4413      	add	r3, r2
 80043f6:	3b1e      	subs	r3, #30
 80043f8:	fa00 f203 	lsl.w	r2, r0, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	60da      	str	r2, [r3, #12]
 8004404:	e019      	b.n	800443a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6919      	ldr	r1, [r3, #16]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	4613      	mov	r3, r2
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	4413      	add	r3, r2
 8004416:	2207      	movs	r2, #7
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	43db      	mvns	r3, r3
 800441e:	4019      	ands	r1, r3
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	6898      	ldr	r0, [r3, #8]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	4613      	mov	r3, r2
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	4413      	add	r3, r2
 800442e:	fa00 f203 	lsl.w	r2, r0, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2b10      	cmp	r3, #16
 8004440:	d003      	beq.n	800444a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004446:	2b11      	cmp	r3, #17
 8004448:	d132      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a1d      	ldr	r2, [pc, #116]	@ (80044c4 <HAL_ADC_ConfigChannel+0x1e4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d125      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d126      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004470:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b10      	cmp	r3, #16
 8004478:	d11a      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800447a:	4b13      	ldr	r3, [pc, #76]	@ (80044c8 <HAL_ADC_ConfigChannel+0x1e8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a13      	ldr	r2, [pc, #76]	@ (80044cc <HAL_ADC_ConfigChannel+0x1ec>)
 8004480:	fba2 2303 	umull	r2, r3, r2, r3
 8004484:	0c9a      	lsrs	r2, r3, #18
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004490:	e002      	b.n	8004498 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	3b01      	subs	r3, #1
 8004496:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f9      	bne.n	8004492 <HAL_ADC_ConfigChannel+0x1b2>
 800449e:	e007      	b.n	80044b0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a4:	f043 0220 	orr.w	r2, r3, #32
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr
 80044c4:	40012400 	.word	0x40012400
 80044c8:	20000028 	.word	0x20000028
 80044cc:	431bde83 	.word	0x431bde83

080044d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d040      	beq.n	8004570 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 0201 	orr.w	r2, r2, #1
 80044fc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80044fe:	4b1f      	ldr	r3, [pc, #124]	@ (800457c <ADC_Enable+0xac>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a1f      	ldr	r2, [pc, #124]	@ (8004580 <ADC_Enable+0xb0>)
 8004504:	fba2 2303 	umull	r2, r3, r2, r3
 8004508:	0c9b      	lsrs	r3, r3, #18
 800450a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800450c:	e002      	b.n	8004514 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	3b01      	subs	r3, #1
 8004512:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f9      	bne.n	800450e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800451a:	f7ff fccf 	bl	8003ebc <HAL_GetTick>
 800451e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004520:	e01f      	b.n	8004562 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004522:	f7ff fccb 	bl	8003ebc <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d918      	bls.n	8004562 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b01      	cmp	r3, #1
 800453c:	d011      	beq.n	8004562 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004542:	f043 0210 	orr.w	r2, r3, #16
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454e:	f043 0201 	orr.w	r2, r3, #1
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e007      	b.n	8004572 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b01      	cmp	r3, #1
 800456e:	d1d8      	bne.n	8004522 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20000028 	.word	0x20000028
 8004580:	431bde83 	.word	0x431bde83

08004584 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b01      	cmp	r3, #1
 800459c:	d12e      	bne.n	80045fc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0201 	bic.w	r2, r2, #1
 80045ac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80045ae:	f7ff fc85 	bl	8003ebc <HAL_GetTick>
 80045b2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80045b4:	e01b      	b.n	80045ee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045b6:	f7ff fc81 	bl	8003ebc <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d914      	bls.n	80045ee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d10d      	bne.n	80045ee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d6:	f043 0210 	orr.w	r2, r3, #16
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e2:	f043 0201 	orr.w	r2, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e007      	b.n	80045fe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d0dc      	beq.n	80045b6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b084      	sub	sp, #16
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004612:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004618:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800461c:	2b00      	cmp	r3, #0
 800461e:	d127      	bne.n	8004670 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004624:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004636:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800463a:	d115      	bne.n	8004668 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004640:	2b00      	cmp	r3, #0
 8004642:	d111      	bne.n	8004668 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004648:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004654:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d105      	bne.n	8004668 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004660:	f043 0201 	orr.w	r2, r3, #1
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f7ff fe1d 	bl	80042a8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800466e:	e004      	b.n	800467a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	4798      	blx	r3
}
 800467a:	bf00      	nop
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b084      	sub	sp, #16
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f7ff fe12 	bl	80042ba <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004696:	bf00      	nop
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046aa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046bc:	f043 0204 	orr.w	r2, r3, #4
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f7ff fe01 	bl	80042cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046ca:	bf00      	nop
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004718 <__NVIC_SetPriorityGrouping+0x44>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80046f0:	4013      	ands	r3, r2
 80046f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004700:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004706:	4a04      	ldr	r2, [pc, #16]	@ (8004718 <__NVIC_SetPriorityGrouping+0x44>)
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	60d3      	str	r3, [r2, #12]
}
 800470c:	bf00      	nop
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	e000ed00 	.word	0xe000ed00

0800471c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004720:	4b04      	ldr	r3, [pc, #16]	@ (8004734 <__NVIC_GetPriorityGrouping+0x18>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	0a1b      	lsrs	r3, r3, #8
 8004726:	f003 0307 	and.w	r3, r3, #7
}
 800472a:	4618      	mov	r0, r3
 800472c:	46bd      	mov	sp, r7
 800472e:	bc80      	pop	{r7}
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	e000ed00 	.word	0xe000ed00

08004738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	4603      	mov	r3, r0
 8004740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004746:	2b00      	cmp	r3, #0
 8004748:	db0b      	blt.n	8004762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800474a:	79fb      	ldrb	r3, [r7, #7]
 800474c:	f003 021f 	and.w	r2, r3, #31
 8004750:	4906      	ldr	r1, [pc, #24]	@ (800476c <__NVIC_EnableIRQ+0x34>)
 8004752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	2001      	movs	r0, #1
 800475a:	fa00 f202 	lsl.w	r2, r0, r2
 800475e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr
 800476c:	e000e100 	.word	0xe000e100

08004770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	4603      	mov	r3, r0
 8004778:	6039      	str	r1, [r7, #0]
 800477a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800477c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004780:	2b00      	cmp	r3, #0
 8004782:	db0a      	blt.n	800479a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	b2da      	uxtb	r2, r3
 8004788:	490c      	ldr	r1, [pc, #48]	@ (80047bc <__NVIC_SetPriority+0x4c>)
 800478a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800478e:	0112      	lsls	r2, r2, #4
 8004790:	b2d2      	uxtb	r2, r2
 8004792:	440b      	add	r3, r1
 8004794:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004798:	e00a      	b.n	80047b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	b2da      	uxtb	r2, r3
 800479e:	4908      	ldr	r1, [pc, #32]	@ (80047c0 <__NVIC_SetPriority+0x50>)
 80047a0:	79fb      	ldrb	r3, [r7, #7]
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	3b04      	subs	r3, #4
 80047a8:	0112      	lsls	r2, r2, #4
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	440b      	add	r3, r1
 80047ae:	761a      	strb	r2, [r3, #24]
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bc80      	pop	{r7}
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	e000e100 	.word	0xe000e100
 80047c0:	e000ed00 	.word	0xe000ed00

080047c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b089      	sub	sp, #36	@ 0x24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	f1c3 0307 	rsb	r3, r3, #7
 80047de:	2b04      	cmp	r3, #4
 80047e0:	bf28      	it	cs
 80047e2:	2304      	movcs	r3, #4
 80047e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	3304      	adds	r3, #4
 80047ea:	2b06      	cmp	r3, #6
 80047ec:	d902      	bls.n	80047f4 <NVIC_EncodePriority+0x30>
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	3b03      	subs	r3, #3
 80047f2:	e000      	b.n	80047f6 <NVIC_EncodePriority+0x32>
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	43da      	mvns	r2, r3
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	401a      	ands	r2, r3
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800480c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	fa01 f303 	lsl.w	r3, r1, r3
 8004816:	43d9      	mvns	r1, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800481c:	4313      	orrs	r3, r2
         );
}
 800481e:	4618      	mov	r0, r3
 8004820:	3724      	adds	r7, #36	@ 0x24
 8004822:	46bd      	mov	sp, r7
 8004824:	bc80      	pop	{r7}
 8004826:	4770      	bx	lr

08004828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3b01      	subs	r3, #1
 8004834:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004838:	d301      	bcc.n	800483e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800483a:	2301      	movs	r3, #1
 800483c:	e00f      	b.n	800485e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800483e:	4a0a      	ldr	r2, [pc, #40]	@ (8004868 <SysTick_Config+0x40>)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3b01      	subs	r3, #1
 8004844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004846:	210f      	movs	r1, #15
 8004848:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800484c:	f7ff ff90 	bl	8004770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004850:	4b05      	ldr	r3, [pc, #20]	@ (8004868 <SysTick_Config+0x40>)
 8004852:	2200      	movs	r2, #0
 8004854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004856:	4b04      	ldr	r3, [pc, #16]	@ (8004868 <SysTick_Config+0x40>)
 8004858:	2207      	movs	r2, #7
 800485a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	e000e010 	.word	0xe000e010

0800486c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff ff2d 	bl	80046d4 <__NVIC_SetPriorityGrouping>
}
 800487a:	bf00      	nop
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004882:	b580      	push	{r7, lr}
 8004884:	b086      	sub	sp, #24
 8004886:	af00      	add	r7, sp, #0
 8004888:	4603      	mov	r3, r0
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	607a      	str	r2, [r7, #4]
 800488e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004890:	2300      	movs	r3, #0
 8004892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004894:	f7ff ff42 	bl	800471c <__NVIC_GetPriorityGrouping>
 8004898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	68b9      	ldr	r1, [r7, #8]
 800489e:	6978      	ldr	r0, [r7, #20]
 80048a0:	f7ff ff90 	bl	80047c4 <NVIC_EncodePriority>
 80048a4:	4602      	mov	r2, r0
 80048a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048aa:	4611      	mov	r1, r2
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff ff5f 	bl	8004770 <__NVIC_SetPriority>
}
 80048b2:	bf00      	nop
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b082      	sub	sp, #8
 80048be:	af00      	add	r7, sp, #0
 80048c0:	4603      	mov	r3, r0
 80048c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7ff ff35 	bl	8004738 <__NVIC_EnableIRQ>
}
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b082      	sub	sp, #8
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff ffa2 	bl	8004828 <SysTick_Config>
 80048e4:	4603      	mov	r3, r0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
	...

080048f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e059      	b.n	80049ba <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	4b2d      	ldr	r3, [pc, #180]	@ (80049c4 <HAL_DMA_Init+0xd4>)
 800490e:	429a      	cmp	r2, r3
 8004910:	d80f      	bhi.n	8004932 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	4b2b      	ldr	r3, [pc, #172]	@ (80049c8 <HAL_DMA_Init+0xd8>)
 800491a:	4413      	add	r3, r2
 800491c:	4a2b      	ldr	r2, [pc, #172]	@ (80049cc <HAL_DMA_Init+0xdc>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	091b      	lsrs	r3, r3, #4
 8004924:	009a      	lsls	r2, r3, #2
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a28      	ldr	r2, [pc, #160]	@ (80049d0 <HAL_DMA_Init+0xe0>)
 800492e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004930:	e00e      	b.n	8004950 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	4b26      	ldr	r3, [pc, #152]	@ (80049d4 <HAL_DMA_Init+0xe4>)
 800493a:	4413      	add	r3, r2
 800493c:	4a23      	ldr	r2, [pc, #140]	@ (80049cc <HAL_DMA_Init+0xdc>)
 800493e:	fba2 2303 	umull	r2, r3, r2, r3
 8004942:	091b      	lsrs	r3, r3, #4
 8004944:	009a      	lsls	r2, r3, #2
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a22      	ldr	r2, [pc, #136]	@ (80049d8 <HAL_DMA_Init+0xe8>)
 800494e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004966:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800496a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004974:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004980:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800498c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	69db      	ldr	r3, [r3, #28]
 8004992:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr
 80049c4:	40020407 	.word	0x40020407
 80049c8:	bffdfff8 	.word	0xbffdfff8
 80049cc:	cccccccd 	.word	0xcccccccd
 80049d0:	40020000 	.word	0x40020000
 80049d4:	bffdfbf8 	.word	0xbffdfbf8
 80049d8:	40020400 	.word	0x40020400

080049dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
 80049e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_DMA_Start_IT+0x20>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e04b      	b.n	8004a94 <HAL_DMA_Start_IT+0xb8>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d13a      	bne.n	8004a86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0201 	bic.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	68b9      	ldr	r1, [r7, #8]
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 fbb1 	bl	800519c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d008      	beq.n	8004a54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f042 020e 	orr.w	r2, r2, #14
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	e00f      	b.n	8004a74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0204 	bic.w	r2, r2, #4
 8004a62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 020a 	orr.w	r2, r2, #10
 8004a72:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0201 	orr.w	r2, r2, #1
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	e005      	b.n	8004a92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004a8e:	2302      	movs	r3, #2
 8004a90:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d008      	beq.n	8004ac6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2204      	movs	r2, #4
 8004ab8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e020      	b.n	8004b08 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 020e 	bic.w	r2, r2, #14
 8004ad4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0201 	bic.w	r2, r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aee:	2101      	movs	r1, #1
 8004af0:	fa01 f202 	lsl.w	r2, r1, r2
 8004af4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc80      	pop	{r7}
 8004b10:	4770      	bx	lr
	...

08004b14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d005      	beq.n	8004b38 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2204      	movs	r2, #4
 8004b30:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	73fb      	strb	r3, [r7, #15]
 8004b36:	e0d6      	b.n	8004ce6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 020e 	bic.w	r2, r2, #14
 8004b46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0201 	bic.w	r2, r2, #1
 8004b56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4b64      	ldr	r3, [pc, #400]	@ (8004cf0 <HAL_DMA_Abort_IT+0x1dc>)
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d958      	bls.n	8004c16 <HAL_DMA_Abort_IT+0x102>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a62      	ldr	r2, [pc, #392]	@ (8004cf4 <HAL_DMA_Abort_IT+0x1e0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d04f      	beq.n	8004c0e <HAL_DMA_Abort_IT+0xfa>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a61      	ldr	r2, [pc, #388]	@ (8004cf8 <HAL_DMA_Abort_IT+0x1e4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d048      	beq.n	8004c0a <HAL_DMA_Abort_IT+0xf6>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a5f      	ldr	r2, [pc, #380]	@ (8004cfc <HAL_DMA_Abort_IT+0x1e8>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d040      	beq.n	8004c04 <HAL_DMA_Abort_IT+0xf0>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a5e      	ldr	r2, [pc, #376]	@ (8004d00 <HAL_DMA_Abort_IT+0x1ec>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d038      	beq.n	8004bfe <HAL_DMA_Abort_IT+0xea>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a5c      	ldr	r2, [pc, #368]	@ (8004d04 <HAL_DMA_Abort_IT+0x1f0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d030      	beq.n	8004bf8 <HAL_DMA_Abort_IT+0xe4>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a5b      	ldr	r2, [pc, #364]	@ (8004d08 <HAL_DMA_Abort_IT+0x1f4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d028      	beq.n	8004bf2 <HAL_DMA_Abort_IT+0xde>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a52      	ldr	r2, [pc, #328]	@ (8004cf0 <HAL_DMA_Abort_IT+0x1dc>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d020      	beq.n	8004bec <HAL_DMA_Abort_IT+0xd8>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a57      	ldr	r2, [pc, #348]	@ (8004d0c <HAL_DMA_Abort_IT+0x1f8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d019      	beq.n	8004be8 <HAL_DMA_Abort_IT+0xd4>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a55      	ldr	r2, [pc, #340]	@ (8004d10 <HAL_DMA_Abort_IT+0x1fc>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d012      	beq.n	8004be4 <HAL_DMA_Abort_IT+0xd0>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a54      	ldr	r2, [pc, #336]	@ (8004d14 <HAL_DMA_Abort_IT+0x200>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d00a      	beq.n	8004bde <HAL_DMA_Abort_IT+0xca>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a52      	ldr	r2, [pc, #328]	@ (8004d18 <HAL_DMA_Abort_IT+0x204>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d102      	bne.n	8004bd8 <HAL_DMA_Abort_IT+0xc4>
 8004bd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004bd6:	e01b      	b.n	8004c10 <HAL_DMA_Abort_IT+0xfc>
 8004bd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004bdc:	e018      	b.n	8004c10 <HAL_DMA_Abort_IT+0xfc>
 8004bde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004be2:	e015      	b.n	8004c10 <HAL_DMA_Abort_IT+0xfc>
 8004be4:	2310      	movs	r3, #16
 8004be6:	e013      	b.n	8004c10 <HAL_DMA_Abort_IT+0xfc>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e011      	b.n	8004c10 <HAL_DMA_Abort_IT+0xfc>
 8004bec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004bf0:	e00e      	b.n	8004c10 <HAL_DMA_Abort_IT+0xfc>
 8004bf2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004bf6:	e00b      	b.n	8004c10 <HAL_DMA_Abort_IT+0xfc>
 8004bf8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004bfc:	e008      	b.n	8004c10 <HAL_DMA_Abort_IT+0xfc>
 8004bfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c02:	e005      	b.n	8004c10 <HAL_DMA_Abort_IT+0xfc>
 8004c04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c08:	e002      	b.n	8004c10 <HAL_DMA_Abort_IT+0xfc>
 8004c0a:	2310      	movs	r3, #16
 8004c0c:	e000      	b.n	8004c10 <HAL_DMA_Abort_IT+0xfc>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	4a42      	ldr	r2, [pc, #264]	@ (8004d1c <HAL_DMA_Abort_IT+0x208>)
 8004c12:	6053      	str	r3, [r2, #4]
 8004c14:	e057      	b.n	8004cc6 <HAL_DMA_Abort_IT+0x1b2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a36      	ldr	r2, [pc, #216]	@ (8004cf4 <HAL_DMA_Abort_IT+0x1e0>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d04f      	beq.n	8004cc0 <HAL_DMA_Abort_IT+0x1ac>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a34      	ldr	r2, [pc, #208]	@ (8004cf8 <HAL_DMA_Abort_IT+0x1e4>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d048      	beq.n	8004cbc <HAL_DMA_Abort_IT+0x1a8>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a33      	ldr	r2, [pc, #204]	@ (8004cfc <HAL_DMA_Abort_IT+0x1e8>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d040      	beq.n	8004cb6 <HAL_DMA_Abort_IT+0x1a2>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a31      	ldr	r2, [pc, #196]	@ (8004d00 <HAL_DMA_Abort_IT+0x1ec>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d038      	beq.n	8004cb0 <HAL_DMA_Abort_IT+0x19c>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a30      	ldr	r2, [pc, #192]	@ (8004d04 <HAL_DMA_Abort_IT+0x1f0>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d030      	beq.n	8004caa <HAL_DMA_Abort_IT+0x196>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a2e      	ldr	r2, [pc, #184]	@ (8004d08 <HAL_DMA_Abort_IT+0x1f4>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d028      	beq.n	8004ca4 <HAL_DMA_Abort_IT+0x190>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a26      	ldr	r2, [pc, #152]	@ (8004cf0 <HAL_DMA_Abort_IT+0x1dc>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d020      	beq.n	8004c9e <HAL_DMA_Abort_IT+0x18a>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a2a      	ldr	r2, [pc, #168]	@ (8004d0c <HAL_DMA_Abort_IT+0x1f8>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d019      	beq.n	8004c9a <HAL_DMA_Abort_IT+0x186>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a29      	ldr	r2, [pc, #164]	@ (8004d10 <HAL_DMA_Abort_IT+0x1fc>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d012      	beq.n	8004c96 <HAL_DMA_Abort_IT+0x182>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a27      	ldr	r2, [pc, #156]	@ (8004d14 <HAL_DMA_Abort_IT+0x200>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00a      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x17c>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a26      	ldr	r2, [pc, #152]	@ (8004d18 <HAL_DMA_Abort_IT+0x204>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d102      	bne.n	8004c8a <HAL_DMA_Abort_IT+0x176>
 8004c84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c88:	e01b      	b.n	8004cc2 <HAL_DMA_Abort_IT+0x1ae>
 8004c8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004c8e:	e018      	b.n	8004cc2 <HAL_DMA_Abort_IT+0x1ae>
 8004c90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c94:	e015      	b.n	8004cc2 <HAL_DMA_Abort_IT+0x1ae>
 8004c96:	2310      	movs	r3, #16
 8004c98:	e013      	b.n	8004cc2 <HAL_DMA_Abort_IT+0x1ae>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e011      	b.n	8004cc2 <HAL_DMA_Abort_IT+0x1ae>
 8004c9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ca2:	e00e      	b.n	8004cc2 <HAL_DMA_Abort_IT+0x1ae>
 8004ca4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004ca8:	e00b      	b.n	8004cc2 <HAL_DMA_Abort_IT+0x1ae>
 8004caa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004cae:	e008      	b.n	8004cc2 <HAL_DMA_Abort_IT+0x1ae>
 8004cb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004cb4:	e005      	b.n	8004cc2 <HAL_DMA_Abort_IT+0x1ae>
 8004cb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004cba:	e002      	b.n	8004cc2 <HAL_DMA_Abort_IT+0x1ae>
 8004cbc:	2310      	movs	r3, #16
 8004cbe:	e000      	b.n	8004cc2 <HAL_DMA_Abort_IT+0x1ae>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	4a17      	ldr	r2, [pc, #92]	@ (8004d20 <HAL_DMA_Abort_IT+0x20c>)
 8004cc4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	4798      	blx	r3
    } 
  }
  return status;
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40020080 	.word	0x40020080
 8004cf4:	40020008 	.word	0x40020008
 8004cf8:	4002001c 	.word	0x4002001c
 8004cfc:	40020030 	.word	0x40020030
 8004d00:	40020044 	.word	0x40020044
 8004d04:	40020058 	.word	0x40020058
 8004d08:	4002006c 	.word	0x4002006c
 8004d0c:	40020408 	.word	0x40020408
 8004d10:	4002041c 	.word	0x4002041c
 8004d14:	40020430 	.word	0x40020430
 8004d18:	40020444 	.word	0x40020444
 8004d1c:	40020400 	.word	0x40020400
 8004d20:	40020000 	.word	0x40020000

08004d24 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d40:	2204      	movs	r2, #4
 8004d42:	409a      	lsls	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4013      	ands	r3, r2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 80f1 	beq.w	8004f30 <HAL_DMA_IRQHandler+0x20c>
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 80eb 	beq.w	8004f30 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0320 	and.w	r3, r3, #32
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d107      	bne.n	8004d78 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0204 	bic.w	r2, r2, #4
 8004d76:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	4b5f      	ldr	r3, [pc, #380]	@ (8004efc <HAL_DMA_IRQHandler+0x1d8>)
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d958      	bls.n	8004e36 <HAL_DMA_IRQHandler+0x112>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a5d      	ldr	r2, [pc, #372]	@ (8004f00 <HAL_DMA_IRQHandler+0x1dc>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d04f      	beq.n	8004e2e <HAL_DMA_IRQHandler+0x10a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a5c      	ldr	r2, [pc, #368]	@ (8004f04 <HAL_DMA_IRQHandler+0x1e0>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d048      	beq.n	8004e2a <HAL_DMA_IRQHandler+0x106>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a5a      	ldr	r2, [pc, #360]	@ (8004f08 <HAL_DMA_IRQHandler+0x1e4>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d040      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x100>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a59      	ldr	r2, [pc, #356]	@ (8004f0c <HAL_DMA_IRQHandler+0x1e8>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d038      	beq.n	8004e1e <HAL_DMA_IRQHandler+0xfa>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a57      	ldr	r2, [pc, #348]	@ (8004f10 <HAL_DMA_IRQHandler+0x1ec>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d030      	beq.n	8004e18 <HAL_DMA_IRQHandler+0xf4>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a56      	ldr	r2, [pc, #344]	@ (8004f14 <HAL_DMA_IRQHandler+0x1f0>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d028      	beq.n	8004e12 <HAL_DMA_IRQHandler+0xee>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a4d      	ldr	r2, [pc, #308]	@ (8004efc <HAL_DMA_IRQHandler+0x1d8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d020      	beq.n	8004e0c <HAL_DMA_IRQHandler+0xe8>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a52      	ldr	r2, [pc, #328]	@ (8004f18 <HAL_DMA_IRQHandler+0x1f4>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d019      	beq.n	8004e08 <HAL_DMA_IRQHandler+0xe4>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a50      	ldr	r2, [pc, #320]	@ (8004f1c <HAL_DMA_IRQHandler+0x1f8>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d012      	beq.n	8004e04 <HAL_DMA_IRQHandler+0xe0>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a4f      	ldr	r2, [pc, #316]	@ (8004f20 <HAL_DMA_IRQHandler+0x1fc>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00a      	beq.n	8004dfe <HAL_DMA_IRQHandler+0xda>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a4d      	ldr	r2, [pc, #308]	@ (8004f24 <HAL_DMA_IRQHandler+0x200>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d102      	bne.n	8004df8 <HAL_DMA_IRQHandler+0xd4>
 8004df2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004df6:	e01b      	b.n	8004e30 <HAL_DMA_IRQHandler+0x10c>
 8004df8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004dfc:	e018      	b.n	8004e30 <HAL_DMA_IRQHandler+0x10c>
 8004dfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e02:	e015      	b.n	8004e30 <HAL_DMA_IRQHandler+0x10c>
 8004e04:	2340      	movs	r3, #64	@ 0x40
 8004e06:	e013      	b.n	8004e30 <HAL_DMA_IRQHandler+0x10c>
 8004e08:	2304      	movs	r3, #4
 8004e0a:	e011      	b.n	8004e30 <HAL_DMA_IRQHandler+0x10c>
 8004e0c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004e10:	e00e      	b.n	8004e30 <HAL_DMA_IRQHandler+0x10c>
 8004e12:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004e16:	e00b      	b.n	8004e30 <HAL_DMA_IRQHandler+0x10c>
 8004e18:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004e1c:	e008      	b.n	8004e30 <HAL_DMA_IRQHandler+0x10c>
 8004e1e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004e22:	e005      	b.n	8004e30 <HAL_DMA_IRQHandler+0x10c>
 8004e24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e28:	e002      	b.n	8004e30 <HAL_DMA_IRQHandler+0x10c>
 8004e2a:	2340      	movs	r3, #64	@ 0x40
 8004e2c:	e000      	b.n	8004e30 <HAL_DMA_IRQHandler+0x10c>
 8004e2e:	2304      	movs	r3, #4
 8004e30:	4a3d      	ldr	r2, [pc, #244]	@ (8004f28 <HAL_DMA_IRQHandler+0x204>)
 8004e32:	6053      	str	r3, [r2, #4]
 8004e34:	e057      	b.n	8004ee6 <HAL_DMA_IRQHandler+0x1c2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a31      	ldr	r2, [pc, #196]	@ (8004f00 <HAL_DMA_IRQHandler+0x1dc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d04f      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x1bc>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a2f      	ldr	r2, [pc, #188]	@ (8004f04 <HAL_DMA_IRQHandler+0x1e0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d048      	beq.n	8004edc <HAL_DMA_IRQHandler+0x1b8>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a2e      	ldr	r2, [pc, #184]	@ (8004f08 <HAL_DMA_IRQHandler+0x1e4>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d040      	beq.n	8004ed6 <HAL_DMA_IRQHandler+0x1b2>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a2c      	ldr	r2, [pc, #176]	@ (8004f0c <HAL_DMA_IRQHandler+0x1e8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d038      	beq.n	8004ed0 <HAL_DMA_IRQHandler+0x1ac>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a2b      	ldr	r2, [pc, #172]	@ (8004f10 <HAL_DMA_IRQHandler+0x1ec>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d030      	beq.n	8004eca <HAL_DMA_IRQHandler+0x1a6>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a29      	ldr	r2, [pc, #164]	@ (8004f14 <HAL_DMA_IRQHandler+0x1f0>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d028      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x1a0>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a21      	ldr	r2, [pc, #132]	@ (8004efc <HAL_DMA_IRQHandler+0x1d8>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d020      	beq.n	8004ebe <HAL_DMA_IRQHandler+0x19a>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a25      	ldr	r2, [pc, #148]	@ (8004f18 <HAL_DMA_IRQHandler+0x1f4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d019      	beq.n	8004eba <HAL_DMA_IRQHandler+0x196>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a24      	ldr	r2, [pc, #144]	@ (8004f1c <HAL_DMA_IRQHandler+0x1f8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d012      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0x192>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a22      	ldr	r2, [pc, #136]	@ (8004f20 <HAL_DMA_IRQHandler+0x1fc>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00a      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x18c>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a21      	ldr	r2, [pc, #132]	@ (8004f24 <HAL_DMA_IRQHandler+0x200>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d102      	bne.n	8004eaa <HAL_DMA_IRQHandler+0x186>
 8004ea4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004ea8:	e01b      	b.n	8004ee2 <HAL_DMA_IRQHandler+0x1be>
 8004eaa:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004eae:	e018      	b.n	8004ee2 <HAL_DMA_IRQHandler+0x1be>
 8004eb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004eb4:	e015      	b.n	8004ee2 <HAL_DMA_IRQHandler+0x1be>
 8004eb6:	2340      	movs	r3, #64	@ 0x40
 8004eb8:	e013      	b.n	8004ee2 <HAL_DMA_IRQHandler+0x1be>
 8004eba:	2304      	movs	r3, #4
 8004ebc:	e011      	b.n	8004ee2 <HAL_DMA_IRQHandler+0x1be>
 8004ebe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004ec2:	e00e      	b.n	8004ee2 <HAL_DMA_IRQHandler+0x1be>
 8004ec4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004ec8:	e00b      	b.n	8004ee2 <HAL_DMA_IRQHandler+0x1be>
 8004eca:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004ece:	e008      	b.n	8004ee2 <HAL_DMA_IRQHandler+0x1be>
 8004ed0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004ed4:	e005      	b.n	8004ee2 <HAL_DMA_IRQHandler+0x1be>
 8004ed6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004eda:	e002      	b.n	8004ee2 <HAL_DMA_IRQHandler+0x1be>
 8004edc:	2340      	movs	r3, #64	@ 0x40
 8004ede:	e000      	b.n	8004ee2 <HAL_DMA_IRQHandler+0x1be>
 8004ee0:	2304      	movs	r3, #4
 8004ee2:	4a12      	ldr	r2, [pc, #72]	@ (8004f2c <HAL_DMA_IRQHandler+0x208>)
 8004ee4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 8136 	beq.w	800515c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004ef8:	e130      	b.n	800515c <HAL_DMA_IRQHandler+0x438>
 8004efa:	bf00      	nop
 8004efc:	40020080 	.word	0x40020080
 8004f00:	40020008 	.word	0x40020008
 8004f04:	4002001c 	.word	0x4002001c
 8004f08:	40020030 	.word	0x40020030
 8004f0c:	40020044 	.word	0x40020044
 8004f10:	40020058 	.word	0x40020058
 8004f14:	4002006c 	.word	0x4002006c
 8004f18:	40020408 	.word	0x40020408
 8004f1c:	4002041c 	.word	0x4002041c
 8004f20:	40020430 	.word	0x40020430
 8004f24:	40020444 	.word	0x40020444
 8004f28:	40020400 	.word	0x40020400
 8004f2c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f34:	2202      	movs	r2, #2
 8004f36:	409a      	lsls	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 80dd 	beq.w	80050fc <HAL_DMA_IRQHandler+0x3d8>
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 80d7 	beq.w	80050fc <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0320 	and.w	r3, r3, #32
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10b      	bne.n	8004f74 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 020a 	bic.w	r2, r2, #10
 8004f6a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	4b7b      	ldr	r3, [pc, #492]	@ (8005168 <HAL_DMA_IRQHandler+0x444>)
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d958      	bls.n	8005032 <HAL_DMA_IRQHandler+0x30e>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a79      	ldr	r2, [pc, #484]	@ (800516c <HAL_DMA_IRQHandler+0x448>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d04f      	beq.n	800502a <HAL_DMA_IRQHandler+0x306>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a78      	ldr	r2, [pc, #480]	@ (8005170 <HAL_DMA_IRQHandler+0x44c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d048      	beq.n	8005026 <HAL_DMA_IRQHandler+0x302>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a76      	ldr	r2, [pc, #472]	@ (8005174 <HAL_DMA_IRQHandler+0x450>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d040      	beq.n	8005020 <HAL_DMA_IRQHandler+0x2fc>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a75      	ldr	r2, [pc, #468]	@ (8005178 <HAL_DMA_IRQHandler+0x454>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d038      	beq.n	800501a <HAL_DMA_IRQHandler+0x2f6>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a73      	ldr	r2, [pc, #460]	@ (800517c <HAL_DMA_IRQHandler+0x458>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d030      	beq.n	8005014 <HAL_DMA_IRQHandler+0x2f0>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a72      	ldr	r2, [pc, #456]	@ (8005180 <HAL_DMA_IRQHandler+0x45c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d028      	beq.n	800500e <HAL_DMA_IRQHandler+0x2ea>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a69      	ldr	r2, [pc, #420]	@ (8005168 <HAL_DMA_IRQHandler+0x444>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d020      	beq.n	8005008 <HAL_DMA_IRQHandler+0x2e4>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a6e      	ldr	r2, [pc, #440]	@ (8005184 <HAL_DMA_IRQHandler+0x460>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d019      	beq.n	8005004 <HAL_DMA_IRQHandler+0x2e0>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a6c      	ldr	r2, [pc, #432]	@ (8005188 <HAL_DMA_IRQHandler+0x464>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d012      	beq.n	8005000 <HAL_DMA_IRQHandler+0x2dc>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a6b      	ldr	r2, [pc, #428]	@ (800518c <HAL_DMA_IRQHandler+0x468>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00a      	beq.n	8004ffa <HAL_DMA_IRQHandler+0x2d6>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a69      	ldr	r2, [pc, #420]	@ (8005190 <HAL_DMA_IRQHandler+0x46c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d102      	bne.n	8004ff4 <HAL_DMA_IRQHandler+0x2d0>
 8004fee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004ff2:	e01b      	b.n	800502c <HAL_DMA_IRQHandler+0x308>
 8004ff4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004ff8:	e018      	b.n	800502c <HAL_DMA_IRQHandler+0x308>
 8004ffa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ffe:	e015      	b.n	800502c <HAL_DMA_IRQHandler+0x308>
 8005000:	2320      	movs	r3, #32
 8005002:	e013      	b.n	800502c <HAL_DMA_IRQHandler+0x308>
 8005004:	2302      	movs	r3, #2
 8005006:	e011      	b.n	800502c <HAL_DMA_IRQHandler+0x308>
 8005008:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800500c:	e00e      	b.n	800502c <HAL_DMA_IRQHandler+0x308>
 800500e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005012:	e00b      	b.n	800502c <HAL_DMA_IRQHandler+0x308>
 8005014:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005018:	e008      	b.n	800502c <HAL_DMA_IRQHandler+0x308>
 800501a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800501e:	e005      	b.n	800502c <HAL_DMA_IRQHandler+0x308>
 8005020:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005024:	e002      	b.n	800502c <HAL_DMA_IRQHandler+0x308>
 8005026:	2320      	movs	r3, #32
 8005028:	e000      	b.n	800502c <HAL_DMA_IRQHandler+0x308>
 800502a:	2302      	movs	r3, #2
 800502c:	4a59      	ldr	r2, [pc, #356]	@ (8005194 <HAL_DMA_IRQHandler+0x470>)
 800502e:	6053      	str	r3, [r2, #4]
 8005030:	e057      	b.n	80050e2 <HAL_DMA_IRQHandler+0x3be>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a4d      	ldr	r2, [pc, #308]	@ (800516c <HAL_DMA_IRQHandler+0x448>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d04f      	beq.n	80050dc <HAL_DMA_IRQHandler+0x3b8>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a4b      	ldr	r2, [pc, #300]	@ (8005170 <HAL_DMA_IRQHandler+0x44c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d048      	beq.n	80050d8 <HAL_DMA_IRQHandler+0x3b4>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a4a      	ldr	r2, [pc, #296]	@ (8005174 <HAL_DMA_IRQHandler+0x450>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d040      	beq.n	80050d2 <HAL_DMA_IRQHandler+0x3ae>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a48      	ldr	r2, [pc, #288]	@ (8005178 <HAL_DMA_IRQHandler+0x454>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d038      	beq.n	80050cc <HAL_DMA_IRQHandler+0x3a8>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a47      	ldr	r2, [pc, #284]	@ (800517c <HAL_DMA_IRQHandler+0x458>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d030      	beq.n	80050c6 <HAL_DMA_IRQHandler+0x3a2>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a45      	ldr	r2, [pc, #276]	@ (8005180 <HAL_DMA_IRQHandler+0x45c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d028      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x39c>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a3d      	ldr	r2, [pc, #244]	@ (8005168 <HAL_DMA_IRQHandler+0x444>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d020      	beq.n	80050ba <HAL_DMA_IRQHandler+0x396>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a41      	ldr	r2, [pc, #260]	@ (8005184 <HAL_DMA_IRQHandler+0x460>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d019      	beq.n	80050b6 <HAL_DMA_IRQHandler+0x392>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a40      	ldr	r2, [pc, #256]	@ (8005188 <HAL_DMA_IRQHandler+0x464>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d012      	beq.n	80050b2 <HAL_DMA_IRQHandler+0x38e>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a3e      	ldr	r2, [pc, #248]	@ (800518c <HAL_DMA_IRQHandler+0x468>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d00a      	beq.n	80050ac <HAL_DMA_IRQHandler+0x388>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a3d      	ldr	r2, [pc, #244]	@ (8005190 <HAL_DMA_IRQHandler+0x46c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d102      	bne.n	80050a6 <HAL_DMA_IRQHandler+0x382>
 80050a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80050a4:	e01b      	b.n	80050de <HAL_DMA_IRQHandler+0x3ba>
 80050a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80050aa:	e018      	b.n	80050de <HAL_DMA_IRQHandler+0x3ba>
 80050ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80050b0:	e015      	b.n	80050de <HAL_DMA_IRQHandler+0x3ba>
 80050b2:	2320      	movs	r3, #32
 80050b4:	e013      	b.n	80050de <HAL_DMA_IRQHandler+0x3ba>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e011      	b.n	80050de <HAL_DMA_IRQHandler+0x3ba>
 80050ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050be:	e00e      	b.n	80050de <HAL_DMA_IRQHandler+0x3ba>
 80050c0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80050c4:	e00b      	b.n	80050de <HAL_DMA_IRQHandler+0x3ba>
 80050c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80050ca:	e008      	b.n	80050de <HAL_DMA_IRQHandler+0x3ba>
 80050cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80050d0:	e005      	b.n	80050de <HAL_DMA_IRQHandler+0x3ba>
 80050d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80050d6:	e002      	b.n	80050de <HAL_DMA_IRQHandler+0x3ba>
 80050d8:	2320      	movs	r3, #32
 80050da:	e000      	b.n	80050de <HAL_DMA_IRQHandler+0x3ba>
 80050dc:	2302      	movs	r3, #2
 80050de:	4a2e      	ldr	r2, [pc, #184]	@ (8005198 <HAL_DMA_IRQHandler+0x474>)
 80050e0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d034      	beq.n	800515c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80050fa:	e02f      	b.n	800515c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005100:	2208      	movs	r2, #8
 8005102:	409a      	lsls	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4013      	ands	r3, r2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d028      	beq.n	800515e <HAL_DMA_IRQHandler+0x43a>
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d023      	beq.n	800515e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 020e 	bic.w	r2, r2, #14
 8005124:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800512e:	2101      	movs	r1, #1
 8005130:	fa01 f202 	lsl.w	r2, r1, r2
 8005134:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005150:	2b00      	cmp	r3, #0
 8005152:	d004      	beq.n	800515e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	4798      	blx	r3
    }
  }
  return;
 800515c:	bf00      	nop
 800515e:	bf00      	nop
}
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	40020080 	.word	0x40020080
 800516c:	40020008 	.word	0x40020008
 8005170:	4002001c 	.word	0x4002001c
 8005174:	40020030 	.word	0x40020030
 8005178:	40020044 	.word	0x40020044
 800517c:	40020058 	.word	0x40020058
 8005180:	4002006c 	.word	0x4002006c
 8005184:	40020408 	.word	0x40020408
 8005188:	4002041c 	.word	0x4002041c
 800518c:	40020430 	.word	0x40020430
 8005190:	40020444 	.word	0x40020444
 8005194:	40020400 	.word	0x40020400
 8005198:	40020000 	.word	0x40020000

0800519c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b2:	2101      	movs	r1, #1
 80051b4:	fa01 f202 	lsl.w	r2, r1, r2
 80051b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b10      	cmp	r3, #16
 80051c8:	d108      	bne.n	80051dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80051da:	e007      	b.n	80051ec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	60da      	str	r2, [r3, #12]
}
 80051ec:	bf00      	nop
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc80      	pop	{r7}
 80051f4:	4770      	bx	lr
	...

080051f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b08b      	sub	sp, #44	@ 0x2c
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005202:	2300      	movs	r3, #0
 8005204:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005206:	2300      	movs	r3, #0
 8005208:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800520a:	e179      	b.n	8005500 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800520c:	2201      	movs	r2, #1
 800520e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005210:	fa02 f303 	lsl.w	r3, r2, r3
 8005214:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69fa      	ldr	r2, [r7, #28]
 800521c:	4013      	ands	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	429a      	cmp	r2, r3
 8005226:	f040 8168 	bne.w	80054fa <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	4a96      	ldr	r2, [pc, #600]	@ (8005488 <HAL_GPIO_Init+0x290>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d05e      	beq.n	80052f2 <HAL_GPIO_Init+0xfa>
 8005234:	4a94      	ldr	r2, [pc, #592]	@ (8005488 <HAL_GPIO_Init+0x290>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d875      	bhi.n	8005326 <HAL_GPIO_Init+0x12e>
 800523a:	4a94      	ldr	r2, [pc, #592]	@ (800548c <HAL_GPIO_Init+0x294>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d058      	beq.n	80052f2 <HAL_GPIO_Init+0xfa>
 8005240:	4a92      	ldr	r2, [pc, #584]	@ (800548c <HAL_GPIO_Init+0x294>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d86f      	bhi.n	8005326 <HAL_GPIO_Init+0x12e>
 8005246:	4a92      	ldr	r2, [pc, #584]	@ (8005490 <HAL_GPIO_Init+0x298>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d052      	beq.n	80052f2 <HAL_GPIO_Init+0xfa>
 800524c:	4a90      	ldr	r2, [pc, #576]	@ (8005490 <HAL_GPIO_Init+0x298>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d869      	bhi.n	8005326 <HAL_GPIO_Init+0x12e>
 8005252:	4a90      	ldr	r2, [pc, #576]	@ (8005494 <HAL_GPIO_Init+0x29c>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d04c      	beq.n	80052f2 <HAL_GPIO_Init+0xfa>
 8005258:	4a8e      	ldr	r2, [pc, #568]	@ (8005494 <HAL_GPIO_Init+0x29c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d863      	bhi.n	8005326 <HAL_GPIO_Init+0x12e>
 800525e:	4a8e      	ldr	r2, [pc, #568]	@ (8005498 <HAL_GPIO_Init+0x2a0>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d046      	beq.n	80052f2 <HAL_GPIO_Init+0xfa>
 8005264:	4a8c      	ldr	r2, [pc, #560]	@ (8005498 <HAL_GPIO_Init+0x2a0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d85d      	bhi.n	8005326 <HAL_GPIO_Init+0x12e>
 800526a:	2b12      	cmp	r3, #18
 800526c:	d82a      	bhi.n	80052c4 <HAL_GPIO_Init+0xcc>
 800526e:	2b12      	cmp	r3, #18
 8005270:	d859      	bhi.n	8005326 <HAL_GPIO_Init+0x12e>
 8005272:	a201      	add	r2, pc, #4	@ (adr r2, 8005278 <HAL_GPIO_Init+0x80>)
 8005274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005278:	080052f3 	.word	0x080052f3
 800527c:	080052cd 	.word	0x080052cd
 8005280:	080052df 	.word	0x080052df
 8005284:	08005321 	.word	0x08005321
 8005288:	08005327 	.word	0x08005327
 800528c:	08005327 	.word	0x08005327
 8005290:	08005327 	.word	0x08005327
 8005294:	08005327 	.word	0x08005327
 8005298:	08005327 	.word	0x08005327
 800529c:	08005327 	.word	0x08005327
 80052a0:	08005327 	.word	0x08005327
 80052a4:	08005327 	.word	0x08005327
 80052a8:	08005327 	.word	0x08005327
 80052ac:	08005327 	.word	0x08005327
 80052b0:	08005327 	.word	0x08005327
 80052b4:	08005327 	.word	0x08005327
 80052b8:	08005327 	.word	0x08005327
 80052bc:	080052d5 	.word	0x080052d5
 80052c0:	080052e9 	.word	0x080052e9
 80052c4:	4a75      	ldr	r2, [pc, #468]	@ (800549c <HAL_GPIO_Init+0x2a4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d013      	beq.n	80052f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80052ca:	e02c      	b.n	8005326 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	623b      	str	r3, [r7, #32]
          break;
 80052d2:	e029      	b.n	8005328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	3304      	adds	r3, #4
 80052da:	623b      	str	r3, [r7, #32]
          break;
 80052dc:	e024      	b.n	8005328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	3308      	adds	r3, #8
 80052e4:	623b      	str	r3, [r7, #32]
          break;
 80052e6:	e01f      	b.n	8005328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	330c      	adds	r3, #12
 80052ee:	623b      	str	r3, [r7, #32]
          break;
 80052f0:	e01a      	b.n	8005328 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d102      	bne.n	8005300 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80052fa:	2304      	movs	r3, #4
 80052fc:	623b      	str	r3, [r7, #32]
          break;
 80052fe:	e013      	b.n	8005328 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d105      	bne.n	8005314 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005308:	2308      	movs	r3, #8
 800530a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	69fa      	ldr	r2, [r7, #28]
 8005310:	611a      	str	r2, [r3, #16]
          break;
 8005312:	e009      	b.n	8005328 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005314:	2308      	movs	r3, #8
 8005316:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69fa      	ldr	r2, [r7, #28]
 800531c:	615a      	str	r2, [r3, #20]
          break;
 800531e:	e003      	b.n	8005328 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005320:	2300      	movs	r3, #0
 8005322:	623b      	str	r3, [r7, #32]
          break;
 8005324:	e000      	b.n	8005328 <HAL_GPIO_Init+0x130>
          break;
 8005326:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	2bff      	cmp	r3, #255	@ 0xff
 800532c:	d801      	bhi.n	8005332 <HAL_GPIO_Init+0x13a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	e001      	b.n	8005336 <HAL_GPIO_Init+0x13e>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	3304      	adds	r3, #4
 8005336:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	2bff      	cmp	r3, #255	@ 0xff
 800533c:	d802      	bhi.n	8005344 <HAL_GPIO_Init+0x14c>
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	e002      	b.n	800534a <HAL_GPIO_Init+0x152>
 8005344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005346:	3b08      	subs	r3, #8
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	210f      	movs	r1, #15
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	fa01 f303 	lsl.w	r3, r1, r3
 8005358:	43db      	mvns	r3, r3
 800535a:	401a      	ands	r2, r3
 800535c:	6a39      	ldr	r1, [r7, #32]
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	fa01 f303 	lsl.w	r3, r1, r3
 8005364:	431a      	orrs	r2, r3
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 80c1 	beq.w	80054fa <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005378:	4b49      	ldr	r3, [pc, #292]	@ (80054a0 <HAL_GPIO_Init+0x2a8>)
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	4a48      	ldr	r2, [pc, #288]	@ (80054a0 <HAL_GPIO_Init+0x2a8>)
 800537e:	f043 0301 	orr.w	r3, r3, #1
 8005382:	6193      	str	r3, [r2, #24]
 8005384:	4b46      	ldr	r3, [pc, #280]	@ (80054a0 <HAL_GPIO_Init+0x2a8>)
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	60bb      	str	r3, [r7, #8]
 800538e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005390:	4a44      	ldr	r2, [pc, #272]	@ (80054a4 <HAL_GPIO_Init+0x2ac>)
 8005392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005394:	089b      	lsrs	r3, r3, #2
 8005396:	3302      	adds	r3, #2
 8005398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800539c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a0:	f003 0303 	and.w	r3, r3, #3
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	220f      	movs	r2, #15
 80053a8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ac:	43db      	mvns	r3, r3
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4013      	ands	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a3c      	ldr	r2, [pc, #240]	@ (80054a8 <HAL_GPIO_Init+0x2b0>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d01f      	beq.n	80053fc <HAL_GPIO_Init+0x204>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a3b      	ldr	r2, [pc, #236]	@ (80054ac <HAL_GPIO_Init+0x2b4>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d019      	beq.n	80053f8 <HAL_GPIO_Init+0x200>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a3a      	ldr	r2, [pc, #232]	@ (80054b0 <HAL_GPIO_Init+0x2b8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d013      	beq.n	80053f4 <HAL_GPIO_Init+0x1fc>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a39      	ldr	r2, [pc, #228]	@ (80054b4 <HAL_GPIO_Init+0x2bc>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00d      	beq.n	80053f0 <HAL_GPIO_Init+0x1f8>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a38      	ldr	r2, [pc, #224]	@ (80054b8 <HAL_GPIO_Init+0x2c0>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d007      	beq.n	80053ec <HAL_GPIO_Init+0x1f4>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a37      	ldr	r2, [pc, #220]	@ (80054bc <HAL_GPIO_Init+0x2c4>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d101      	bne.n	80053e8 <HAL_GPIO_Init+0x1f0>
 80053e4:	2305      	movs	r3, #5
 80053e6:	e00a      	b.n	80053fe <HAL_GPIO_Init+0x206>
 80053e8:	2306      	movs	r3, #6
 80053ea:	e008      	b.n	80053fe <HAL_GPIO_Init+0x206>
 80053ec:	2304      	movs	r3, #4
 80053ee:	e006      	b.n	80053fe <HAL_GPIO_Init+0x206>
 80053f0:	2303      	movs	r3, #3
 80053f2:	e004      	b.n	80053fe <HAL_GPIO_Init+0x206>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e002      	b.n	80053fe <HAL_GPIO_Init+0x206>
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <HAL_GPIO_Init+0x206>
 80053fc:	2300      	movs	r3, #0
 80053fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005400:	f002 0203 	and.w	r2, r2, #3
 8005404:	0092      	lsls	r2, r2, #2
 8005406:	4093      	lsls	r3, r2
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800540e:	4925      	ldr	r1, [pc, #148]	@ (80054a4 <HAL_GPIO_Init+0x2ac>)
 8005410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005412:	089b      	lsrs	r3, r3, #2
 8005414:	3302      	adds	r3, #2
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d006      	beq.n	8005436 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005428:	4b25      	ldr	r3, [pc, #148]	@ (80054c0 <HAL_GPIO_Init+0x2c8>)
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	4924      	ldr	r1, [pc, #144]	@ (80054c0 <HAL_GPIO_Init+0x2c8>)
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	4313      	orrs	r3, r2
 8005432:	608b      	str	r3, [r1, #8]
 8005434:	e006      	b.n	8005444 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005436:	4b22      	ldr	r3, [pc, #136]	@ (80054c0 <HAL_GPIO_Init+0x2c8>)
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	43db      	mvns	r3, r3
 800543e:	4920      	ldr	r1, [pc, #128]	@ (80054c0 <HAL_GPIO_Init+0x2c8>)
 8005440:	4013      	ands	r3, r2
 8005442:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d006      	beq.n	800545e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005450:	4b1b      	ldr	r3, [pc, #108]	@ (80054c0 <HAL_GPIO_Init+0x2c8>)
 8005452:	68da      	ldr	r2, [r3, #12]
 8005454:	491a      	ldr	r1, [pc, #104]	@ (80054c0 <HAL_GPIO_Init+0x2c8>)
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	4313      	orrs	r3, r2
 800545a:	60cb      	str	r3, [r1, #12]
 800545c:	e006      	b.n	800546c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800545e:	4b18      	ldr	r3, [pc, #96]	@ (80054c0 <HAL_GPIO_Init+0x2c8>)
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	43db      	mvns	r3, r3
 8005466:	4916      	ldr	r1, [pc, #88]	@ (80054c0 <HAL_GPIO_Init+0x2c8>)
 8005468:	4013      	ands	r3, r2
 800546a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d025      	beq.n	80054c4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005478:	4b11      	ldr	r3, [pc, #68]	@ (80054c0 <HAL_GPIO_Init+0x2c8>)
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	4910      	ldr	r1, [pc, #64]	@ (80054c0 <HAL_GPIO_Init+0x2c8>)
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	4313      	orrs	r3, r2
 8005482:	604b      	str	r3, [r1, #4]
 8005484:	e025      	b.n	80054d2 <HAL_GPIO_Init+0x2da>
 8005486:	bf00      	nop
 8005488:	10320000 	.word	0x10320000
 800548c:	10310000 	.word	0x10310000
 8005490:	10220000 	.word	0x10220000
 8005494:	10210000 	.word	0x10210000
 8005498:	10120000 	.word	0x10120000
 800549c:	10110000 	.word	0x10110000
 80054a0:	40021000 	.word	0x40021000
 80054a4:	40010000 	.word	0x40010000
 80054a8:	40010800 	.word	0x40010800
 80054ac:	40010c00 	.word	0x40010c00
 80054b0:	40011000 	.word	0x40011000
 80054b4:	40011400 	.word	0x40011400
 80054b8:	40011800 	.word	0x40011800
 80054bc:	40011c00 	.word	0x40011c00
 80054c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80054c4:	4b15      	ldr	r3, [pc, #84]	@ (800551c <HAL_GPIO_Init+0x324>)
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	43db      	mvns	r3, r3
 80054cc:	4913      	ldr	r1, [pc, #76]	@ (800551c <HAL_GPIO_Init+0x324>)
 80054ce:	4013      	ands	r3, r2
 80054d0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d006      	beq.n	80054ec <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80054de:	4b0f      	ldr	r3, [pc, #60]	@ (800551c <HAL_GPIO_Init+0x324>)
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	490e      	ldr	r1, [pc, #56]	@ (800551c <HAL_GPIO_Init+0x324>)
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	600b      	str	r3, [r1, #0]
 80054ea:	e006      	b.n	80054fa <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80054ec:	4b0b      	ldr	r3, [pc, #44]	@ (800551c <HAL_GPIO_Init+0x324>)
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	43db      	mvns	r3, r3
 80054f4:	4909      	ldr	r1, [pc, #36]	@ (800551c <HAL_GPIO_Init+0x324>)
 80054f6:	4013      	ands	r3, r2
 80054f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80054fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fc:	3301      	adds	r3, #1
 80054fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005506:	fa22 f303 	lsr.w	r3, r2, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	f47f ae7e 	bne.w	800520c <HAL_GPIO_Init+0x14>
  }
}
 8005510:	bf00      	nop
 8005512:	bf00      	nop
 8005514:	372c      	adds	r7, #44	@ 0x2c
 8005516:	46bd      	mov	sp, r7
 8005518:	bc80      	pop	{r7}
 800551a:	4770      	bx	lr
 800551c:	40010400 	.word	0x40010400

08005520 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	460b      	mov	r3, r1
 800552a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	887b      	ldrh	r3, [r7, #2]
 8005532:	4013      	ands	r3, r2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d002      	beq.n	800553e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005538:	2301      	movs	r3, #1
 800553a:	73fb      	strb	r3, [r7, #15]
 800553c:	e001      	b.n	8005542 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800553e:	2300      	movs	r3, #0
 8005540:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005542:	7bfb      	ldrb	r3, [r7, #15]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	bc80      	pop	{r7}
 800554c:	4770      	bx	lr

0800554e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	460b      	mov	r3, r1
 8005558:	807b      	strh	r3, [r7, #2]
 800555a:	4613      	mov	r3, r2
 800555c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800555e:	787b      	ldrb	r3, [r7, #1]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005564:	887a      	ldrh	r2, [r7, #2]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800556a:	e003      	b.n	8005574 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800556c:	887b      	ldrh	r3, [r7, #2]
 800556e:	041a      	lsls	r2, r3, #16
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	611a      	str	r2, [r3, #16]
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	bc80      	pop	{r7}
 800557c:	4770      	bx	lr

0800557e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800557e:	b480      	push	{r7}
 8005580:	b085      	sub	sp, #20
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	460b      	mov	r3, r1
 8005588:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005590:	887a      	ldrh	r2, [r7, #2]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4013      	ands	r3, r2
 8005596:	041a      	lsls	r2, r3, #16
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	43d9      	mvns	r1, r3
 800559c:	887b      	ldrh	r3, [r7, #2]
 800559e:	400b      	ands	r3, r1
 80055a0:	431a      	orrs	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	611a      	str	r2, [r3, #16]
}
 80055a6:	bf00      	nop
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bc80      	pop	{r7}
 80055ae:	4770      	bx	lr

080055b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e12b      	b.n	800581a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d106      	bne.n	80055dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7fb fea4 	bl	8001324 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2224      	movs	r2, #36	@ 0x24
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0201 	bic.w	r2, r2, #1
 80055f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005602:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005612:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005614:	f001 faba 	bl	8006b8c <HAL_RCC_GetPCLK1Freq>
 8005618:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	4a81      	ldr	r2, [pc, #516]	@ (8005824 <HAL_I2C_Init+0x274>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d807      	bhi.n	8005634 <HAL_I2C_Init+0x84>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4a80      	ldr	r2, [pc, #512]	@ (8005828 <HAL_I2C_Init+0x278>)
 8005628:	4293      	cmp	r3, r2
 800562a:	bf94      	ite	ls
 800562c:	2301      	movls	r3, #1
 800562e:	2300      	movhi	r3, #0
 8005630:	b2db      	uxtb	r3, r3
 8005632:	e006      	b.n	8005642 <HAL_I2C_Init+0x92>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4a7d      	ldr	r2, [pc, #500]	@ (800582c <HAL_I2C_Init+0x27c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	bf94      	ite	ls
 800563c:	2301      	movls	r3, #1
 800563e:	2300      	movhi	r3, #0
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e0e7      	b.n	800581a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4a78      	ldr	r2, [pc, #480]	@ (8005830 <HAL_I2C_Init+0x280>)
 800564e:	fba2 2303 	umull	r2, r3, r2, r3
 8005652:	0c9b      	lsrs	r3, r3, #18
 8005654:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	4a6a      	ldr	r2, [pc, #424]	@ (8005824 <HAL_I2C_Init+0x274>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d802      	bhi.n	8005684 <HAL_I2C_Init+0xd4>
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	3301      	adds	r3, #1
 8005682:	e009      	b.n	8005698 <HAL_I2C_Init+0xe8>
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800568a:	fb02 f303 	mul.w	r3, r2, r3
 800568e:	4a69      	ldr	r2, [pc, #420]	@ (8005834 <HAL_I2C_Init+0x284>)
 8005690:	fba2 2303 	umull	r2, r3, r2, r3
 8005694:	099b      	lsrs	r3, r3, #6
 8005696:	3301      	adds	r3, #1
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6812      	ldr	r2, [r2, #0]
 800569c:	430b      	orrs	r3, r1
 800569e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80056aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	495c      	ldr	r1, [pc, #368]	@ (8005824 <HAL_I2C_Init+0x274>)
 80056b4:	428b      	cmp	r3, r1
 80056b6:	d819      	bhi.n	80056ec <HAL_I2C_Init+0x13c>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	1e59      	subs	r1, r3, #1
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80056c6:	1c59      	adds	r1, r3, #1
 80056c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80056cc:	400b      	ands	r3, r1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <HAL_I2C_Init+0x138>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	1e59      	subs	r1, r3, #1
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80056e0:	3301      	adds	r3, #1
 80056e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056e6:	e051      	b.n	800578c <HAL_I2C_Init+0x1dc>
 80056e8:	2304      	movs	r3, #4
 80056ea:	e04f      	b.n	800578c <HAL_I2C_Init+0x1dc>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d111      	bne.n	8005718 <HAL_I2C_Init+0x168>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	1e58      	subs	r0, r3, #1
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6859      	ldr	r1, [r3, #4]
 80056fc:	460b      	mov	r3, r1
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	440b      	add	r3, r1
 8005702:	fbb0 f3f3 	udiv	r3, r0, r3
 8005706:	3301      	adds	r3, #1
 8005708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800570c:	2b00      	cmp	r3, #0
 800570e:	bf0c      	ite	eq
 8005710:	2301      	moveq	r3, #1
 8005712:	2300      	movne	r3, #0
 8005714:	b2db      	uxtb	r3, r3
 8005716:	e012      	b.n	800573e <HAL_I2C_Init+0x18e>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	1e58      	subs	r0, r3, #1
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6859      	ldr	r1, [r3, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	440b      	add	r3, r1
 8005726:	0099      	lsls	r1, r3, #2
 8005728:	440b      	add	r3, r1
 800572a:	fbb0 f3f3 	udiv	r3, r0, r3
 800572e:	3301      	adds	r3, #1
 8005730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005734:	2b00      	cmp	r3, #0
 8005736:	bf0c      	ite	eq
 8005738:	2301      	moveq	r3, #1
 800573a:	2300      	movne	r3, #0
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <HAL_I2C_Init+0x196>
 8005742:	2301      	movs	r3, #1
 8005744:	e022      	b.n	800578c <HAL_I2C_Init+0x1dc>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10e      	bne.n	800576c <HAL_I2C_Init+0x1bc>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	1e58      	subs	r0, r3, #1
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6859      	ldr	r1, [r3, #4]
 8005756:	460b      	mov	r3, r1
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	440b      	add	r3, r1
 800575c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005760:	3301      	adds	r3, #1
 8005762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800576a:	e00f      	b.n	800578c <HAL_I2C_Init+0x1dc>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	1e58      	subs	r0, r3, #1
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6859      	ldr	r1, [r3, #4]
 8005774:	460b      	mov	r3, r1
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	440b      	add	r3, r1
 800577a:	0099      	lsls	r1, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005782:	3301      	adds	r3, #1
 8005784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005788:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800578c:	6879      	ldr	r1, [r7, #4]
 800578e:	6809      	ldr	r1, [r1, #0]
 8005790:	4313      	orrs	r3, r2
 8005792:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	69da      	ldr	r2, [r3, #28]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	431a      	orrs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80057ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6911      	ldr	r1, [r2, #16]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	68d2      	ldr	r2, [r2, #12]
 80057c6:	4311      	orrs	r1, r2
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6812      	ldr	r2, [r2, #0]
 80057cc:	430b      	orrs	r3, r1
 80057ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	695a      	ldr	r2, [r3, #20]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	431a      	orrs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0201 	orr.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2220      	movs	r2, #32
 8005806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	000186a0 	.word	0x000186a0
 8005828:	001e847f 	.word	0x001e847f
 800582c:	003d08ff 	.word	0x003d08ff
 8005830:	431bde83 	.word	0x431bde83
 8005834:	10624dd3 	.word	0x10624dd3

08005838 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08c      	sub	sp, #48	@ 0x30
 800583c:	af02      	add	r7, sp, #8
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	607a      	str	r2, [r7, #4]
 8005842:	461a      	mov	r2, r3
 8005844:	460b      	mov	r3, r1
 8005846:	817b      	strh	r3, [r7, #10]
 8005848:	4613      	mov	r3, r2
 800584a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005850:	f7fe fb34 	bl	8003ebc <HAL_GetTick>
 8005854:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b20      	cmp	r3, #32
 8005860:	f040 824b 	bne.w	8005cfa <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	2319      	movs	r3, #25
 800586a:	2201      	movs	r2, #1
 800586c:	497f      	ldr	r1, [pc, #508]	@ (8005a6c <HAL_I2C_Master_Receive+0x234>)
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f000 fc4a 	bl	8006108 <I2C_WaitOnFlagUntilTimeout>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800587a:	2302      	movs	r3, #2
 800587c:	e23e      	b.n	8005cfc <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005884:	2b01      	cmp	r3, #1
 8005886:	d101      	bne.n	800588c <HAL_I2C_Master_Receive+0x54>
 8005888:	2302      	movs	r3, #2
 800588a:	e237      	b.n	8005cfc <HAL_I2C_Master_Receive+0x4c4>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d007      	beq.n	80058b2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f042 0201 	orr.w	r2, r2, #1
 80058b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2222      	movs	r2, #34	@ 0x22
 80058c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2210      	movs	r2, #16
 80058ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	893a      	ldrh	r2, [r7, #8]
 80058e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	4a5f      	ldr	r2, [pc, #380]	@ (8005a70 <HAL_I2C_Master_Receive+0x238>)
 80058f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80058f4:	8979      	ldrh	r1, [r7, #10]
 80058f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 fb36 	bl	8005f6c <I2C_MasterRequestRead>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e1f8      	b.n	8005cfc <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800590e:	2b00      	cmp	r3, #0
 8005910:	d113      	bne.n	800593a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005912:	2300      	movs	r3, #0
 8005914:	61fb      	str	r3, [r7, #28]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	61fb      	str	r3, [r7, #28]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	61fb      	str	r3, [r7, #28]
 8005926:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	e1cc      	b.n	8005cd4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800593e:	2b01      	cmp	r3, #1
 8005940:	d11e      	bne.n	8005980 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005950:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005952:	b672      	cpsid	i
}
 8005954:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005956:	2300      	movs	r3, #0
 8005958:	61bb      	str	r3, [r7, #24]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	61bb      	str	r3, [r7, #24]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	61bb      	str	r3, [r7, #24]
 800596a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800597a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800597c:	b662      	cpsie	i
}
 800597e:	e035      	b.n	80059ec <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005984:	2b02      	cmp	r3, #2
 8005986:	d11e      	bne.n	80059c6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005996:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005998:	b672      	cpsid	i
}
 800599a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800599c:	2300      	movs	r3, #0
 800599e:	617b      	str	r3, [r7, #20]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80059c2:	b662      	cpsie	i
}
 80059c4:	e012      	b.n	80059ec <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80059d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059d6:	2300      	movs	r3, #0
 80059d8:	613b      	str	r3, [r7, #16]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	613b      	str	r3, [r7, #16]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	613b      	str	r3, [r7, #16]
 80059ea:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80059ec:	e172      	b.n	8005cd4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	f200 811f 	bhi.w	8005c36 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d123      	bne.n	8005a48 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 fc99 	bl	800633c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e173      	b.n	8005cfc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	691a      	ldr	r2, [r3, #16]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a26:	1c5a      	adds	r2, r3, #1
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a30:	3b01      	subs	r3, #1
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a46:	e145      	b.n	8005cd4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d152      	bne.n	8005af6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a56:	2200      	movs	r2, #0
 8005a58:	4906      	ldr	r1, [pc, #24]	@ (8005a74 <HAL_I2C_Master_Receive+0x23c>)
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f000 fb54 	bl	8006108 <I2C_WaitOnFlagUntilTimeout>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d008      	beq.n	8005a78 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e148      	b.n	8005cfc <HAL_I2C_Master_Receive+0x4c4>
 8005a6a:	bf00      	nop
 8005a6c:	00100002 	.word	0x00100002
 8005a70:	ffff0000 	.word	0xffff0000
 8005a74:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005a78:	b672      	cpsid	i
}
 8005a7a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	691a      	ldr	r2, [r3, #16]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9e:	1c5a      	adds	r2, r3, #1
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005abe:	b662      	cpsie	i
}
 8005ac0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	691a      	ldr	r2, [r3, #16]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005acc:	b2d2      	uxtb	r2, r2
 8005ace:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad4:	1c5a      	adds	r2, r3, #1
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	3b01      	subs	r3, #1
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005af4:	e0ee      	b.n	8005cd4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afc:	2200      	movs	r2, #0
 8005afe:	4981      	ldr	r1, [pc, #516]	@ (8005d04 <HAL_I2C_Master_Receive+0x4cc>)
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 fb01 	bl	8006108 <I2C_WaitOnFlagUntilTimeout>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e0f5      	b.n	8005cfc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b20:	b672      	cpsid	i
}
 8005b22:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691a      	ldr	r2, [r3, #16]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b40:	3b01      	subs	r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b56:	4b6c      	ldr	r3, [pc, #432]	@ (8005d08 <HAL_I2C_Master_Receive+0x4d0>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	08db      	lsrs	r3, r3, #3
 8005b5c:	4a6b      	ldr	r2, [pc, #428]	@ (8005d0c <HAL_I2C_Master_Receive+0x4d4>)
 8005b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b62:	0a1a      	lsrs	r2, r3, #8
 8005b64:	4613      	mov	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	00da      	lsls	r2, r3, #3
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d118      	bne.n	8005bae <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b96:	f043 0220 	orr.w	r2, r3, #32
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005b9e:	b662      	cpsie	i
}
 8005ba0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e0a6      	b.n	8005cfc <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b04      	cmp	r3, #4
 8005bba:	d1d9      	bne.n	8005b70 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	691a      	ldr	r2, [r3, #16]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bde:	1c5a      	adds	r2, r3, #1
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005be8:	3b01      	subs	r3, #1
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005bfe:	b662      	cpsie	i
}
 8005c00:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	691a      	ldr	r2, [r3, #16]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0c:	b2d2      	uxtb	r2, r2
 8005c0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c34:	e04e      	b.n	8005cd4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 fb7e 	bl	800633c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e058      	b.n	8005cfc <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	691a      	ldr	r2, [r3, #16]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c54:	b2d2      	uxtb	r2, r2
 8005c56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5c:	1c5a      	adds	r2, r3, #1
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	3b01      	subs	r3, #1
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	f003 0304 	and.w	r3, r3, #4
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d124      	bne.n	8005cd4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c8e:	2b03      	cmp	r3, #3
 8005c90:	d107      	bne.n	8005ca2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ca0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	691a      	ldr	r2, [r3, #16]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cac:	b2d2      	uxtb	r2, r2
 8005cae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb4:	1c5a      	adds	r2, r3, #1
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f47f ae88 	bne.w	80059ee <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	e000      	b.n	8005cfc <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8005cfa:	2302      	movs	r3, #2
  }
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3728      	adds	r7, #40	@ 0x28
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	00010004 	.word	0x00010004
 8005d08:	20000028 	.word	0x20000028
 8005d0c:	14f8b589 	.word	0x14f8b589

08005d10 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b08a      	sub	sp, #40	@ 0x28
 8005d14:	af02      	add	r7, sp, #8
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	607a      	str	r2, [r7, #4]
 8005d1a:	603b      	str	r3, [r7, #0]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005d20:	f7fe f8cc 	bl	8003ebc <HAL_GetTick>
 8005d24:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b20      	cmp	r3, #32
 8005d34:	f040 8111 	bne.w	8005f5a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	2319      	movs	r3, #25
 8005d3e:	2201      	movs	r2, #1
 8005d40:	4988      	ldr	r1, [pc, #544]	@ (8005f64 <HAL_I2C_IsDeviceReady+0x254>)
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f000 f9e0 	bl	8006108 <I2C_WaitOnFlagUntilTimeout>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005d4e:	2302      	movs	r3, #2
 8005d50:	e104      	b.n	8005f5c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d101      	bne.n	8005d60 <HAL_I2C_IsDeviceReady+0x50>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e0fd      	b.n	8005f5c <HAL_I2C_IsDeviceReady+0x24c>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d007      	beq.n	8005d86 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f042 0201 	orr.w	r2, r2, #1
 8005d84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2224      	movs	r2, #36	@ 0x24
 8005d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4a70      	ldr	r2, [pc, #448]	@ (8005f68 <HAL_I2C_IsDeviceReady+0x258>)
 8005da8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005db8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 f99e 	bl	8006108 <I2C_WaitOnFlagUntilTimeout>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00d      	beq.n	8005dee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ddc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005de0:	d103      	bne.n	8005dea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005de8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e0b6      	b.n	8005f5c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dee:	897b      	ldrh	r3, [r7, #10]
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	461a      	mov	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005dfc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005dfe:	f7fe f85d 	bl	8003ebc <HAL_GetTick>
 8005e02:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	bf0c      	ite	eq
 8005e12:	2301      	moveq	r3, #1
 8005e14:	2300      	movne	r3, #0
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e28:	bf0c      	ite	eq
 8005e2a:	2301      	moveq	r3, #1
 8005e2c:	2300      	movne	r3, #0
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005e32:	e025      	b.n	8005e80 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e34:	f7fe f842 	bl	8003ebc <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d302      	bcc.n	8005e4a <HAL_I2C_IsDeviceReady+0x13a>
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d103      	bne.n	8005e52 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	22a0      	movs	r2, #160	@ 0xa0
 8005e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	bf0c      	ite	eq
 8005e60:	2301      	moveq	r3, #1
 8005e62:	2300      	movne	r3, #0
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e76:	bf0c      	ite	eq
 8005e78:	2301      	moveq	r3, #1
 8005e7a:	2300      	movne	r3, #0
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2ba0      	cmp	r3, #160	@ 0xa0
 8005e8a:	d005      	beq.n	8005e98 <HAL_I2C_IsDeviceReady+0x188>
 8005e8c:	7dfb      	ldrb	r3, [r7, #23]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d102      	bne.n	8005e98 <HAL_I2C_IsDeviceReady+0x188>
 8005e92:	7dbb      	ldrb	r3, [r7, #22]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0cd      	beq.n	8005e34 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d129      	bne.n	8005f02 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ebc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	613b      	str	r3, [r7, #16]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	613b      	str	r3, [r7, #16]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	613b      	str	r3, [r7, #16]
 8005ed2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	2319      	movs	r3, #25
 8005eda:	2201      	movs	r2, #1
 8005edc:	4921      	ldr	r1, [pc, #132]	@ (8005f64 <HAL_I2C_IsDeviceReady+0x254>)
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 f912 	bl	8006108 <I2C_WaitOnFlagUntilTimeout>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e036      	b.n	8005f5c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	e02c      	b.n	8005f5c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f10:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f1a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	2319      	movs	r3, #25
 8005f22:	2201      	movs	r2, #1
 8005f24:	490f      	ldr	r1, [pc, #60]	@ (8005f64 <HAL_I2C_IsDeviceReady+0x254>)
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 f8ee 	bl	8006108 <I2C_WaitOnFlagUntilTimeout>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e012      	b.n	8005f5c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	f4ff af32 	bcc.w	8005daa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005f5a:	2302      	movs	r3, #2
  }
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3720      	adds	r7, #32
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	00100002 	.word	0x00100002
 8005f68:	ffff0000 	.word	0xffff0000

08005f6c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b088      	sub	sp, #32
 8005f70:	af02      	add	r7, sp, #8
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	607a      	str	r2, [r7, #4]
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f80:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f90:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d006      	beq.n	8005fa6 <I2C_MasterRequestRead+0x3a>
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d003      	beq.n	8005fa6 <I2C_MasterRequestRead+0x3a>
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005fa4:	d108      	bne.n	8005fb8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	e00b      	b.n	8005fd0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fbc:	2b11      	cmp	r3, #17
 8005fbe:	d107      	bne.n	8005fd0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 f893 	bl	8006108 <I2C_WaitOnFlagUntilTimeout>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00d      	beq.n	8006004 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ff2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ff6:	d103      	bne.n	8006000 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ffe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e079      	b.n	80060f8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800600c:	d108      	bne.n	8006020 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800600e:	897b      	ldrh	r3, [r7, #10]
 8006010:	b2db      	uxtb	r3, r3
 8006012:	f043 0301 	orr.w	r3, r3, #1
 8006016:	b2da      	uxtb	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	611a      	str	r2, [r3, #16]
 800601e:	e05f      	b.n	80060e0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006020:	897b      	ldrh	r3, [r7, #10]
 8006022:	11db      	asrs	r3, r3, #7
 8006024:	b2db      	uxtb	r3, r3
 8006026:	f003 0306 	and.w	r3, r3, #6
 800602a:	b2db      	uxtb	r3, r3
 800602c:	f063 030f 	orn	r3, r3, #15
 8006030:	b2da      	uxtb	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	4930      	ldr	r1, [pc, #192]	@ (8006100 <I2C_MasterRequestRead+0x194>)
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 f8dc 	bl	80061fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e054      	b.n	80060f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800604e:	897b      	ldrh	r3, [r7, #10]
 8006050:	b2da      	uxtb	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	4929      	ldr	r1, [pc, #164]	@ (8006104 <I2C_MasterRequestRead+0x198>)
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 f8cc 	bl	80061fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e044      	b.n	80060f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800606e:	2300      	movs	r3, #0
 8006070:	613b      	str	r3, [r7, #16]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	613b      	str	r3, [r7, #16]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	613b      	str	r3, [r7, #16]
 8006082:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006092:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 f831 	bl	8006108 <I2C_WaitOnFlagUntilTimeout>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00d      	beq.n	80060c8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060ba:	d103      	bne.n	80060c4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060c2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e017      	b.n	80060f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80060c8:	897b      	ldrh	r3, [r7, #10]
 80060ca:	11db      	asrs	r3, r3, #7
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	f003 0306 	and.w	r3, r3, #6
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	f063 030e 	orn	r3, r3, #14
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	4907      	ldr	r1, [pc, #28]	@ (8006104 <I2C_MasterRequestRead+0x198>)
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f000 f888 	bl	80061fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d001      	beq.n	80060f6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e000      	b.n	80060f8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3718      	adds	r7, #24
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	00010008 	.word	0x00010008
 8006104:	00010002 	.word	0x00010002

08006108 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	603b      	str	r3, [r7, #0]
 8006114:	4613      	mov	r3, r2
 8006116:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006118:	e048      	b.n	80061ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006120:	d044      	beq.n	80061ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006122:	f7fd fecb 	bl	8003ebc <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	429a      	cmp	r2, r3
 8006130:	d302      	bcc.n	8006138 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d139      	bne.n	80061ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	0c1b      	lsrs	r3, r3, #16
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b01      	cmp	r3, #1
 8006140:	d10d      	bne.n	800615e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	43da      	mvns	r2, r3
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	4013      	ands	r3, r2
 800614e:	b29b      	uxth	r3, r3
 8006150:	2b00      	cmp	r3, #0
 8006152:	bf0c      	ite	eq
 8006154:	2301      	moveq	r3, #1
 8006156:	2300      	movne	r3, #0
 8006158:	b2db      	uxtb	r3, r3
 800615a:	461a      	mov	r2, r3
 800615c:	e00c      	b.n	8006178 <I2C_WaitOnFlagUntilTimeout+0x70>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	43da      	mvns	r2, r3
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	4013      	ands	r3, r2
 800616a:	b29b      	uxth	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	bf0c      	ite	eq
 8006170:	2301      	moveq	r3, #1
 8006172:	2300      	movne	r3, #0
 8006174:	b2db      	uxtb	r3, r3
 8006176:	461a      	mov	r2, r3
 8006178:	79fb      	ldrb	r3, [r7, #7]
 800617a:	429a      	cmp	r2, r3
 800617c:	d116      	bne.n	80061ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2220      	movs	r2, #32
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006198:	f043 0220 	orr.w	r2, r3, #32
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e023      	b.n	80061f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	0c1b      	lsrs	r3, r3, #16
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d10d      	bne.n	80061d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	43da      	mvns	r2, r3
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	4013      	ands	r3, r2
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	bf0c      	ite	eq
 80061c8:	2301      	moveq	r3, #1
 80061ca:	2300      	movne	r3, #0
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	461a      	mov	r2, r3
 80061d0:	e00c      	b.n	80061ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	43da      	mvns	r2, r3
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	4013      	ands	r3, r2
 80061de:	b29b      	uxth	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	bf0c      	ite	eq
 80061e4:	2301      	moveq	r3, #1
 80061e6:	2300      	movne	r3, #0
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	461a      	mov	r2, r3
 80061ec:	79fb      	ldrb	r3, [r7, #7]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d093      	beq.n	800611a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
 8006208:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800620a:	e071      	b.n	80062f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800621a:	d123      	bne.n	8006264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800622a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006234:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2220      	movs	r2, #32
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006250:	f043 0204 	orr.w	r2, r3, #4
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e067      	b.n	8006334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800626a:	d041      	beq.n	80062f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800626c:	f7fd fe26 	bl	8003ebc <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	429a      	cmp	r2, r3
 800627a:	d302      	bcc.n	8006282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d136      	bne.n	80062f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	0c1b      	lsrs	r3, r3, #16
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b01      	cmp	r3, #1
 800628a:	d10c      	bne.n	80062a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	43da      	mvns	r2, r3
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	4013      	ands	r3, r2
 8006298:	b29b      	uxth	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	bf14      	ite	ne
 800629e:	2301      	movne	r3, #1
 80062a0:	2300      	moveq	r3, #0
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	e00b      	b.n	80062be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	43da      	mvns	r2, r3
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	4013      	ands	r3, r2
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	bf14      	ite	ne
 80062b8:	2301      	movne	r3, #1
 80062ba:	2300      	moveq	r3, #0
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d016      	beq.n	80062f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062dc:	f043 0220 	orr.w	r2, r3, #32
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e021      	b.n	8006334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	0c1b      	lsrs	r3, r3, #16
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d10c      	bne.n	8006314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	695b      	ldr	r3, [r3, #20]
 8006300:	43da      	mvns	r2, r3
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	4013      	ands	r3, r2
 8006306:	b29b      	uxth	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	bf14      	ite	ne
 800630c:	2301      	movne	r3, #1
 800630e:	2300      	moveq	r3, #0
 8006310:	b2db      	uxtb	r3, r3
 8006312:	e00b      	b.n	800632c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	43da      	mvns	r2, r3
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	4013      	ands	r3, r2
 8006320:	b29b      	uxth	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	bf14      	ite	ne
 8006326:	2301      	movne	r3, #1
 8006328:	2300      	moveq	r3, #0
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	f47f af6d 	bne.w	800620c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006348:	e049      	b.n	80063de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	f003 0310 	and.w	r3, r3, #16
 8006354:	2b10      	cmp	r3, #16
 8006356:	d119      	bne.n	800638c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f06f 0210 	mvn.w	r2, #16
 8006360:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2220      	movs	r2, #32
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e030      	b.n	80063ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800638c:	f7fd fd96 	bl	8003ebc <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	429a      	cmp	r2, r3
 800639a:	d302      	bcc.n	80063a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d11d      	bne.n	80063de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ac:	2b40      	cmp	r3, #64	@ 0x40
 80063ae:	d016      	beq.n	80063de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2220      	movs	r2, #32
 80063ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ca:	f043 0220 	orr.w	r2, r3, #32
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e007      	b.n	80063ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e8:	2b40      	cmp	r3, #64	@ 0x40
 80063ea:	d1ae      	bne.n	800634a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
	...

080063f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e272      	b.n	80068f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 8087 	beq.w	8006526 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006418:	4b92      	ldr	r3, [pc, #584]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f003 030c 	and.w	r3, r3, #12
 8006420:	2b04      	cmp	r3, #4
 8006422:	d00c      	beq.n	800643e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006424:	4b8f      	ldr	r3, [pc, #572]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f003 030c 	and.w	r3, r3, #12
 800642c:	2b08      	cmp	r3, #8
 800642e:	d112      	bne.n	8006456 <HAL_RCC_OscConfig+0x5e>
 8006430:	4b8c      	ldr	r3, [pc, #560]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800643c:	d10b      	bne.n	8006456 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800643e:	4b89      	ldr	r3, [pc, #548]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d06c      	beq.n	8006524 <HAL_RCC_OscConfig+0x12c>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d168      	bne.n	8006524 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e24c      	b.n	80068f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800645e:	d106      	bne.n	800646e <HAL_RCC_OscConfig+0x76>
 8006460:	4b80      	ldr	r3, [pc, #512]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a7f      	ldr	r2, [pc, #508]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 8006466:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800646a:	6013      	str	r3, [r2, #0]
 800646c:	e02e      	b.n	80064cc <HAL_RCC_OscConfig+0xd4>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10c      	bne.n	8006490 <HAL_RCC_OscConfig+0x98>
 8006476:	4b7b      	ldr	r3, [pc, #492]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a7a      	ldr	r2, [pc, #488]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 800647c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006480:	6013      	str	r3, [r2, #0]
 8006482:	4b78      	ldr	r3, [pc, #480]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a77      	ldr	r2, [pc, #476]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 8006488:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	e01d      	b.n	80064cc <HAL_RCC_OscConfig+0xd4>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006498:	d10c      	bne.n	80064b4 <HAL_RCC_OscConfig+0xbc>
 800649a:	4b72      	ldr	r3, [pc, #456]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a71      	ldr	r2, [pc, #452]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 80064a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064a4:	6013      	str	r3, [r2, #0]
 80064a6:	4b6f      	ldr	r3, [pc, #444]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a6e      	ldr	r2, [pc, #440]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 80064ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	e00b      	b.n	80064cc <HAL_RCC_OscConfig+0xd4>
 80064b4:	4b6b      	ldr	r3, [pc, #428]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a6a      	ldr	r2, [pc, #424]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 80064ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	4b68      	ldr	r3, [pc, #416]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a67      	ldr	r2, [pc, #412]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 80064c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d013      	beq.n	80064fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064d4:	f7fd fcf2 	bl	8003ebc <HAL_GetTick>
 80064d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064da:	e008      	b.n	80064ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064dc:	f7fd fcee 	bl	8003ebc <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b64      	cmp	r3, #100	@ 0x64
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e200      	b.n	80068f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ee:	4b5d      	ldr	r3, [pc, #372]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d0f0      	beq.n	80064dc <HAL_RCC_OscConfig+0xe4>
 80064fa:	e014      	b.n	8006526 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064fc:	f7fd fcde 	bl	8003ebc <HAL_GetTick>
 8006500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006502:	e008      	b.n	8006516 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006504:	f7fd fcda 	bl	8003ebc <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b64      	cmp	r3, #100	@ 0x64
 8006510:	d901      	bls.n	8006516 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e1ec      	b.n	80068f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006516:	4b53      	ldr	r3, [pc, #332]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1f0      	bne.n	8006504 <HAL_RCC_OscConfig+0x10c>
 8006522:	e000      	b.n	8006526 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d063      	beq.n	80065fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006532:	4b4c      	ldr	r3, [pc, #304]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f003 030c 	and.w	r3, r3, #12
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00b      	beq.n	8006556 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800653e:	4b49      	ldr	r3, [pc, #292]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f003 030c 	and.w	r3, r3, #12
 8006546:	2b08      	cmp	r3, #8
 8006548:	d11c      	bne.n	8006584 <HAL_RCC_OscConfig+0x18c>
 800654a:	4b46      	ldr	r3, [pc, #280]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d116      	bne.n	8006584 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006556:	4b43      	ldr	r3, [pc, #268]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d005      	beq.n	800656e <HAL_RCC_OscConfig+0x176>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d001      	beq.n	800656e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e1c0      	b.n	80068f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800656e:	4b3d      	ldr	r3, [pc, #244]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	4939      	ldr	r1, [pc, #228]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 800657e:	4313      	orrs	r3, r2
 8006580:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006582:	e03a      	b.n	80065fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d020      	beq.n	80065ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800658c:	4b36      	ldr	r3, [pc, #216]	@ (8006668 <HAL_RCC_OscConfig+0x270>)
 800658e:	2201      	movs	r2, #1
 8006590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006592:	f7fd fc93 	bl	8003ebc <HAL_GetTick>
 8006596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006598:	e008      	b.n	80065ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800659a:	f7fd fc8f 	bl	8003ebc <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d901      	bls.n	80065ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e1a1      	b.n	80068f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065ac:	4b2d      	ldr	r3, [pc, #180]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d0f0      	beq.n	800659a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065b8:	4b2a      	ldr	r3, [pc, #168]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	00db      	lsls	r3, r3, #3
 80065c6:	4927      	ldr	r1, [pc, #156]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	600b      	str	r3, [r1, #0]
 80065cc:	e015      	b.n	80065fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065ce:	4b26      	ldr	r3, [pc, #152]	@ (8006668 <HAL_RCC_OscConfig+0x270>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d4:	f7fd fc72 	bl	8003ebc <HAL_GetTick>
 80065d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065da:	e008      	b.n	80065ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065dc:	f7fd fc6e 	bl	8003ebc <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e180      	b.n	80068f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1f0      	bne.n	80065dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0308 	and.w	r3, r3, #8
 8006602:	2b00      	cmp	r3, #0
 8006604:	d03a      	beq.n	800667c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d019      	beq.n	8006642 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800660e:	4b17      	ldr	r3, [pc, #92]	@ (800666c <HAL_RCC_OscConfig+0x274>)
 8006610:	2201      	movs	r2, #1
 8006612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006614:	f7fd fc52 	bl	8003ebc <HAL_GetTick>
 8006618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800661a:	e008      	b.n	800662e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800661c:	f7fd fc4e 	bl	8003ebc <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b02      	cmp	r3, #2
 8006628:	d901      	bls.n	800662e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e160      	b.n	80068f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800662e:	4b0d      	ldr	r3, [pc, #52]	@ (8006664 <HAL_RCC_OscConfig+0x26c>)
 8006630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	2b00      	cmp	r3, #0
 8006638:	d0f0      	beq.n	800661c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800663a:	2001      	movs	r0, #1
 800663c:	f000 face 	bl	8006bdc <RCC_Delay>
 8006640:	e01c      	b.n	800667c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006642:	4b0a      	ldr	r3, [pc, #40]	@ (800666c <HAL_RCC_OscConfig+0x274>)
 8006644:	2200      	movs	r2, #0
 8006646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006648:	f7fd fc38 	bl	8003ebc <HAL_GetTick>
 800664c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800664e:	e00f      	b.n	8006670 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006650:	f7fd fc34 	bl	8003ebc <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2b02      	cmp	r3, #2
 800665c:	d908      	bls.n	8006670 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e146      	b.n	80068f0 <HAL_RCC_OscConfig+0x4f8>
 8006662:	bf00      	nop
 8006664:	40021000 	.word	0x40021000
 8006668:	42420000 	.word	0x42420000
 800666c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006670:	4b92      	ldr	r3, [pc, #584]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 8006672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e9      	bne.n	8006650 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0304 	and.w	r3, r3, #4
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 80a6 	beq.w	80067d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800668a:	2300      	movs	r3, #0
 800668c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800668e:	4b8b      	ldr	r3, [pc, #556]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10d      	bne.n	80066b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800669a:	4b88      	ldr	r3, [pc, #544]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	4a87      	ldr	r2, [pc, #540]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 80066a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066a4:	61d3      	str	r3, [r2, #28]
 80066a6:	4b85      	ldr	r3, [pc, #532]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066ae:	60bb      	str	r3, [r7, #8]
 80066b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066b2:	2301      	movs	r3, #1
 80066b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066b6:	4b82      	ldr	r3, [pc, #520]	@ (80068c0 <HAL_RCC_OscConfig+0x4c8>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d118      	bne.n	80066f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066c2:	4b7f      	ldr	r3, [pc, #508]	@ (80068c0 <HAL_RCC_OscConfig+0x4c8>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a7e      	ldr	r2, [pc, #504]	@ (80068c0 <HAL_RCC_OscConfig+0x4c8>)
 80066c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066ce:	f7fd fbf5 	bl	8003ebc <HAL_GetTick>
 80066d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066d4:	e008      	b.n	80066e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066d6:	f7fd fbf1 	bl	8003ebc <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	2b64      	cmp	r3, #100	@ 0x64
 80066e2:	d901      	bls.n	80066e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e103      	b.n	80068f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066e8:	4b75      	ldr	r3, [pc, #468]	@ (80068c0 <HAL_RCC_OscConfig+0x4c8>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d0f0      	beq.n	80066d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d106      	bne.n	800670a <HAL_RCC_OscConfig+0x312>
 80066fc:	4b6f      	ldr	r3, [pc, #444]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	4a6e      	ldr	r2, [pc, #440]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 8006702:	f043 0301 	orr.w	r3, r3, #1
 8006706:	6213      	str	r3, [r2, #32]
 8006708:	e02d      	b.n	8006766 <HAL_RCC_OscConfig+0x36e>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10c      	bne.n	800672c <HAL_RCC_OscConfig+0x334>
 8006712:	4b6a      	ldr	r3, [pc, #424]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	4a69      	ldr	r2, [pc, #420]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 8006718:	f023 0301 	bic.w	r3, r3, #1
 800671c:	6213      	str	r3, [r2, #32]
 800671e:	4b67      	ldr	r3, [pc, #412]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	4a66      	ldr	r2, [pc, #408]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 8006724:	f023 0304 	bic.w	r3, r3, #4
 8006728:	6213      	str	r3, [r2, #32]
 800672a:	e01c      	b.n	8006766 <HAL_RCC_OscConfig+0x36e>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	2b05      	cmp	r3, #5
 8006732:	d10c      	bne.n	800674e <HAL_RCC_OscConfig+0x356>
 8006734:	4b61      	ldr	r3, [pc, #388]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	4a60      	ldr	r2, [pc, #384]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 800673a:	f043 0304 	orr.w	r3, r3, #4
 800673e:	6213      	str	r3, [r2, #32]
 8006740:	4b5e      	ldr	r3, [pc, #376]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	4a5d      	ldr	r2, [pc, #372]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 8006746:	f043 0301 	orr.w	r3, r3, #1
 800674a:	6213      	str	r3, [r2, #32]
 800674c:	e00b      	b.n	8006766 <HAL_RCC_OscConfig+0x36e>
 800674e:	4b5b      	ldr	r3, [pc, #364]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	4a5a      	ldr	r2, [pc, #360]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 8006754:	f023 0301 	bic.w	r3, r3, #1
 8006758:	6213      	str	r3, [r2, #32]
 800675a:	4b58      	ldr	r3, [pc, #352]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	4a57      	ldr	r2, [pc, #348]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 8006760:	f023 0304 	bic.w	r3, r3, #4
 8006764:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d015      	beq.n	800679a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800676e:	f7fd fba5 	bl	8003ebc <HAL_GetTick>
 8006772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006774:	e00a      	b.n	800678c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006776:	f7fd fba1 	bl	8003ebc <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006784:	4293      	cmp	r3, r2
 8006786:	d901      	bls.n	800678c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e0b1      	b.n	80068f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800678c:	4b4b      	ldr	r3, [pc, #300]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0ee      	beq.n	8006776 <HAL_RCC_OscConfig+0x37e>
 8006798:	e014      	b.n	80067c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800679a:	f7fd fb8f 	bl	8003ebc <HAL_GetTick>
 800679e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067a0:	e00a      	b.n	80067b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067a2:	f7fd fb8b 	bl	8003ebc <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d901      	bls.n	80067b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e09b      	b.n	80068f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067b8:	4b40      	ldr	r3, [pc, #256]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1ee      	bne.n	80067a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80067c4:	7dfb      	ldrb	r3, [r7, #23]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d105      	bne.n	80067d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067ca:	4b3c      	ldr	r3, [pc, #240]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	4a3b      	ldr	r2, [pc, #236]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 80067d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 8087 	beq.w	80068ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067e0:	4b36      	ldr	r3, [pc, #216]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f003 030c 	and.w	r3, r3, #12
 80067e8:	2b08      	cmp	r3, #8
 80067ea:	d061      	beq.n	80068b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	69db      	ldr	r3, [r3, #28]
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d146      	bne.n	8006882 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067f4:	4b33      	ldr	r3, [pc, #204]	@ (80068c4 <HAL_RCC_OscConfig+0x4cc>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067fa:	f7fd fb5f 	bl	8003ebc <HAL_GetTick>
 80067fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006800:	e008      	b.n	8006814 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006802:	f7fd fb5b 	bl	8003ebc <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	2b02      	cmp	r3, #2
 800680e:	d901      	bls.n	8006814 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e06d      	b.n	80068f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006814:	4b29      	ldr	r3, [pc, #164]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1f0      	bne.n	8006802 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006828:	d108      	bne.n	800683c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800682a:	4b24      	ldr	r3, [pc, #144]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	4921      	ldr	r1, [pc, #132]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 8006838:	4313      	orrs	r3, r2
 800683a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800683c:	4b1f      	ldr	r3, [pc, #124]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a19      	ldr	r1, [r3, #32]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684c:	430b      	orrs	r3, r1
 800684e:	491b      	ldr	r1, [pc, #108]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 8006850:	4313      	orrs	r3, r2
 8006852:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006854:	4b1b      	ldr	r3, [pc, #108]	@ (80068c4 <HAL_RCC_OscConfig+0x4cc>)
 8006856:	2201      	movs	r2, #1
 8006858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800685a:	f7fd fb2f 	bl	8003ebc <HAL_GetTick>
 800685e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006860:	e008      	b.n	8006874 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006862:	f7fd fb2b 	bl	8003ebc <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	2b02      	cmp	r3, #2
 800686e:	d901      	bls.n	8006874 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e03d      	b.n	80068f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006874:	4b11      	ldr	r3, [pc, #68]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d0f0      	beq.n	8006862 <HAL_RCC_OscConfig+0x46a>
 8006880:	e035      	b.n	80068ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006882:	4b10      	ldr	r3, [pc, #64]	@ (80068c4 <HAL_RCC_OscConfig+0x4cc>)
 8006884:	2200      	movs	r2, #0
 8006886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006888:	f7fd fb18 	bl	8003ebc <HAL_GetTick>
 800688c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800688e:	e008      	b.n	80068a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006890:	f7fd fb14 	bl	8003ebc <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b02      	cmp	r3, #2
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e026      	b.n	80068f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068a2:	4b06      	ldr	r3, [pc, #24]	@ (80068bc <HAL_RCC_OscConfig+0x4c4>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1f0      	bne.n	8006890 <HAL_RCC_OscConfig+0x498>
 80068ae:	e01e      	b.n	80068ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d107      	bne.n	80068c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e019      	b.n	80068f0 <HAL_RCC_OscConfig+0x4f8>
 80068bc:	40021000 	.word	0x40021000
 80068c0:	40007000 	.word	0x40007000
 80068c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80068c8:	4b0b      	ldr	r3, [pc, #44]	@ (80068f8 <HAL_RCC_OscConfig+0x500>)
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d106      	bne.n	80068ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d001      	beq.n	80068ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e000      	b.n	80068f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3718      	adds	r7, #24
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	40021000 	.word	0x40021000

080068fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d101      	bne.n	8006910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e0d0      	b.n	8006ab2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006910:	4b6a      	ldr	r3, [pc, #424]	@ (8006abc <HAL_RCC_ClockConfig+0x1c0>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0307 	and.w	r3, r3, #7
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	429a      	cmp	r2, r3
 800691c:	d910      	bls.n	8006940 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800691e:	4b67      	ldr	r3, [pc, #412]	@ (8006abc <HAL_RCC_ClockConfig+0x1c0>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f023 0207 	bic.w	r2, r3, #7
 8006926:	4965      	ldr	r1, [pc, #404]	@ (8006abc <HAL_RCC_ClockConfig+0x1c0>)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	4313      	orrs	r3, r2
 800692c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800692e:	4b63      	ldr	r3, [pc, #396]	@ (8006abc <HAL_RCC_ClockConfig+0x1c0>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0307 	and.w	r3, r3, #7
 8006936:	683a      	ldr	r2, [r7, #0]
 8006938:	429a      	cmp	r2, r3
 800693a:	d001      	beq.n	8006940 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e0b8      	b.n	8006ab2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d020      	beq.n	800698e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0304 	and.w	r3, r3, #4
 8006954:	2b00      	cmp	r3, #0
 8006956:	d005      	beq.n	8006964 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006958:	4b59      	ldr	r3, [pc, #356]	@ (8006ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	4a58      	ldr	r2, [pc, #352]	@ (8006ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800695e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006962:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0308 	and.w	r3, r3, #8
 800696c:	2b00      	cmp	r3, #0
 800696e:	d005      	beq.n	800697c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006970:	4b53      	ldr	r3, [pc, #332]	@ (8006ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	4a52      	ldr	r2, [pc, #328]	@ (8006ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8006976:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800697a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800697c:	4b50      	ldr	r3, [pc, #320]	@ (8006ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	494d      	ldr	r1, [pc, #308]	@ (8006ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800698a:	4313      	orrs	r3, r2
 800698c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	2b00      	cmp	r3, #0
 8006998:	d040      	beq.n	8006a1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d107      	bne.n	80069b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069a2:	4b47      	ldr	r3, [pc, #284]	@ (8006ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d115      	bne.n	80069da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e07f      	b.n	8006ab2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d107      	bne.n	80069ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ba:	4b41      	ldr	r3, [pc, #260]	@ (8006ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d109      	bne.n	80069da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e073      	b.n	8006ab2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ca:	4b3d      	ldr	r3, [pc, #244]	@ (8006ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e06b      	b.n	8006ab2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069da:	4b39      	ldr	r3, [pc, #228]	@ (8006ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f023 0203 	bic.w	r2, r3, #3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	4936      	ldr	r1, [pc, #216]	@ (8006ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069ec:	f7fd fa66 	bl	8003ebc <HAL_GetTick>
 80069f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069f2:	e00a      	b.n	8006a0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069f4:	f7fd fa62 	bl	8003ebc <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e053      	b.n	8006ab2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a0a:	4b2d      	ldr	r3, [pc, #180]	@ (8006ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f003 020c 	and.w	r2, r3, #12
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d1eb      	bne.n	80069f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a1c:	4b27      	ldr	r3, [pc, #156]	@ (8006abc <HAL_RCC_ClockConfig+0x1c0>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0307 	and.w	r3, r3, #7
 8006a24:	683a      	ldr	r2, [r7, #0]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d210      	bcs.n	8006a4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a2a:	4b24      	ldr	r3, [pc, #144]	@ (8006abc <HAL_RCC_ClockConfig+0x1c0>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f023 0207 	bic.w	r2, r3, #7
 8006a32:	4922      	ldr	r1, [pc, #136]	@ (8006abc <HAL_RCC_ClockConfig+0x1c0>)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a3a:	4b20      	ldr	r3, [pc, #128]	@ (8006abc <HAL_RCC_ClockConfig+0x1c0>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0307 	and.w	r3, r3, #7
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d001      	beq.n	8006a4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e032      	b.n	8006ab2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d008      	beq.n	8006a6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a58:	4b19      	ldr	r3, [pc, #100]	@ (8006ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	4916      	ldr	r1, [pc, #88]	@ (8006ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0308 	and.w	r3, r3, #8
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d009      	beq.n	8006a8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006a76:	4b12      	ldr	r3, [pc, #72]	@ (8006ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	00db      	lsls	r3, r3, #3
 8006a84:	490e      	ldr	r1, [pc, #56]	@ (8006ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a8a:	f000 f821 	bl	8006ad0 <HAL_RCC_GetSysClockFreq>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	091b      	lsrs	r3, r3, #4
 8006a96:	f003 030f 	and.w	r3, r3, #15
 8006a9a:	490a      	ldr	r1, [pc, #40]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8006a9c:	5ccb      	ldrb	r3, [r1, r3]
 8006a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa2:	4a09      	ldr	r2, [pc, #36]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1cc>)
 8006aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006aa6:	4b09      	ldr	r3, [pc, #36]	@ (8006acc <HAL_RCC_ClockConfig+0x1d0>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fd f9c4 	bl	8003e38 <HAL_InitTick>

  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	40022000 	.word	0x40022000
 8006ac0:	40021000 	.word	0x40021000
 8006ac4:	08009c44 	.word	0x08009c44
 8006ac8:	20000028 	.word	0x20000028
 8006acc:	2000002c 	.word	0x2000002c

08006ad0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60fb      	str	r3, [r7, #12]
 8006ada:	2300      	movs	r3, #0
 8006adc:	60bb      	str	r3, [r7, #8]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	617b      	str	r3, [r7, #20]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006aea:	4b1e      	ldr	r3, [pc, #120]	@ (8006b64 <HAL_RCC_GetSysClockFreq+0x94>)
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f003 030c 	and.w	r3, r3, #12
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	d002      	beq.n	8006b00 <HAL_RCC_GetSysClockFreq+0x30>
 8006afa:	2b08      	cmp	r3, #8
 8006afc:	d003      	beq.n	8006b06 <HAL_RCC_GetSysClockFreq+0x36>
 8006afe:	e027      	b.n	8006b50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b00:	4b19      	ldr	r3, [pc, #100]	@ (8006b68 <HAL_RCC_GetSysClockFreq+0x98>)
 8006b02:	613b      	str	r3, [r7, #16]
      break;
 8006b04:	e027      	b.n	8006b56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	0c9b      	lsrs	r3, r3, #18
 8006b0a:	f003 030f 	and.w	r3, r3, #15
 8006b0e:	4a17      	ldr	r2, [pc, #92]	@ (8006b6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8006b10:	5cd3      	ldrb	r3, [r2, r3]
 8006b12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d010      	beq.n	8006b40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006b1e:	4b11      	ldr	r3, [pc, #68]	@ (8006b64 <HAL_RCC_GetSysClockFreq+0x94>)
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	0c5b      	lsrs	r3, r3, #17
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	4a11      	ldr	r2, [pc, #68]	@ (8006b70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006b2a:	5cd3      	ldrb	r3, [r2, r3]
 8006b2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a0d      	ldr	r2, [pc, #52]	@ (8006b68 <HAL_RCC_GetSysClockFreq+0x98>)
 8006b32:	fb03 f202 	mul.w	r2, r3, r2
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b3c:	617b      	str	r3, [r7, #20]
 8006b3e:	e004      	b.n	8006b4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a0c      	ldr	r2, [pc, #48]	@ (8006b74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006b44:	fb02 f303 	mul.w	r3, r2, r3
 8006b48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	613b      	str	r3, [r7, #16]
      break;
 8006b4e:	e002      	b.n	8006b56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006b50:	4b05      	ldr	r3, [pc, #20]	@ (8006b68 <HAL_RCC_GetSysClockFreq+0x98>)
 8006b52:	613b      	str	r3, [r7, #16]
      break;
 8006b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b56:	693b      	ldr	r3, [r7, #16]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	371c      	adds	r7, #28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bc80      	pop	{r7}
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	40021000 	.word	0x40021000
 8006b68:	007a1200 	.word	0x007a1200
 8006b6c:	08009c5c 	.word	0x08009c5c
 8006b70:	08009c6c 	.word	0x08009c6c
 8006b74:	003d0900 	.word	0x003d0900

08006b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b7c:	4b02      	ldr	r3, [pc, #8]	@ (8006b88 <HAL_RCC_GetHCLKFreq+0x10>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bc80      	pop	{r7}
 8006b86:	4770      	bx	lr
 8006b88:	20000028 	.word	0x20000028

08006b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b90:	f7ff fff2 	bl	8006b78 <HAL_RCC_GetHCLKFreq>
 8006b94:	4602      	mov	r2, r0
 8006b96:	4b05      	ldr	r3, [pc, #20]	@ (8006bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	0a1b      	lsrs	r3, r3, #8
 8006b9c:	f003 0307 	and.w	r3, r3, #7
 8006ba0:	4903      	ldr	r1, [pc, #12]	@ (8006bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ba2:	5ccb      	ldrb	r3, [r1, r3]
 8006ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	40021000 	.word	0x40021000
 8006bb0:	08009c54 	.word	0x08009c54

08006bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006bb8:	f7ff ffde 	bl	8006b78 <HAL_RCC_GetHCLKFreq>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	4b05      	ldr	r3, [pc, #20]	@ (8006bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	0adb      	lsrs	r3, r3, #11
 8006bc4:	f003 0307 	and.w	r3, r3, #7
 8006bc8:	4903      	ldr	r1, [pc, #12]	@ (8006bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bca:	5ccb      	ldrb	r3, [r1, r3]
 8006bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	40021000 	.word	0x40021000
 8006bd8:	08009c54 	.word	0x08009c54

08006bdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006be4:	4b0a      	ldr	r3, [pc, #40]	@ (8006c10 <RCC_Delay+0x34>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a0a      	ldr	r2, [pc, #40]	@ (8006c14 <RCC_Delay+0x38>)
 8006bea:	fba2 2303 	umull	r2, r3, r2, r3
 8006bee:	0a5b      	lsrs	r3, r3, #9
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	fb02 f303 	mul.w	r3, r2, r3
 8006bf6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006bf8:	bf00      	nop
  }
  while (Delay --);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	1e5a      	subs	r2, r3, #1
 8006bfe:	60fa      	str	r2, [r7, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1f9      	bne.n	8006bf8 <RCC_Delay+0x1c>
}
 8006c04:	bf00      	nop
 8006c06:	bf00      	nop
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bc80      	pop	{r7}
 8006c0e:	4770      	bx	lr
 8006c10:	20000028 	.word	0x20000028
 8006c14:	10624dd3 	.word	0x10624dd3

08006c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	613b      	str	r3, [r7, #16]
 8006c24:	2300      	movs	r3, #0
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0301 	and.w	r3, r3, #1
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d07d      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006c34:	2300      	movs	r3, #0
 8006c36:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c38:	4b4f      	ldr	r3, [pc, #316]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10d      	bne.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c44:	4b4c      	ldr	r3, [pc, #304]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	4a4b      	ldr	r2, [pc, #300]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c4e:	61d3      	str	r3, [r2, #28]
 8006c50:	4b49      	ldr	r3, [pc, #292]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c58:	60bb      	str	r3, [r7, #8]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c60:	4b46      	ldr	r3, [pc, #280]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d118      	bne.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c6c:	4b43      	ldr	r3, [pc, #268]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a42      	ldr	r2, [pc, #264]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c78:	f7fd f920 	bl	8003ebc <HAL_GetTick>
 8006c7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c7e:	e008      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c80:	f7fd f91c 	bl	8003ebc <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b64      	cmp	r3, #100	@ 0x64
 8006c8c:	d901      	bls.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e06d      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c92:	4b3a      	ldr	r3, [pc, #232]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d0f0      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c9e:	4b36      	ldr	r3, [pc, #216]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ca6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d02e      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d027      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cc4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006cc6:	4b2e      	ldr	r3, [pc, #184]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006cc8:	2201      	movs	r2, #1
 8006cca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ccc:	4b2c      	ldr	r3, [pc, #176]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006cd2:	4a29      	ldr	r2, [pc, #164]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d014      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ce2:	f7fd f8eb 	bl	8003ebc <HAL_GetTick>
 8006ce6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ce8:	e00a      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cea:	f7fd f8e7 	bl	8003ebc <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d901      	bls.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e036      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d00:	4b1d      	ldr	r3, [pc, #116]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d0ee      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d0e:	6a1b      	ldr	r3, [r3, #32]
 8006d10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	4917      	ldr	r1, [pc, #92]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006d1e:	7dfb      	ldrb	r3, [r7, #23]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d105      	bne.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d24:	4b14      	ldr	r3, [pc, #80]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	4a13      	ldr	r2, [pc, #76]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d008      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	490b      	ldr	r1, [pc, #44]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0310 	and.w	r3, r3, #16
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d008      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d5a:	4b07      	ldr	r3, [pc, #28]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	4904      	ldr	r1, [pc, #16]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	40021000 	.word	0x40021000
 8006d7c:	40007000 	.word	0x40007000
 8006d80:	42420440 	.word	0x42420440

08006d84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e076      	b.n	8006e84 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d108      	bne.n	8006db0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006da6:	d009      	beq.n	8006dbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	61da      	str	r2, [r3, #28]
 8006dae:	e005      	b.n	8006dbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d106      	bne.n	8006ddc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7fb ffe4 	bl	8002da4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2202      	movs	r2, #2
 8006de0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006df2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006e04:	431a      	orrs	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	f003 0302 	and.w	r3, r3, #2
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	431a      	orrs	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e36:	431a      	orrs	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e40:	ea42 0103 	orr.w	r1, r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e48:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	0c1a      	lsrs	r2, r3, #16
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f002 0204 	and.w	r2, r2, #4
 8006e62:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	69da      	ldr	r2, [r3, #28]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b088      	sub	sp, #32
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	603b      	str	r3, [r7, #0]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e9c:	f7fd f80e 	bl	8003ebc <HAL_GetTick>
 8006ea0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006ea2:	88fb      	ldrh	r3, [r7, #6]
 8006ea4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d001      	beq.n	8006eb6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006eb2:	2302      	movs	r3, #2
 8006eb4:	e12a      	b.n	800710c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <HAL_SPI_Transmit+0x36>
 8006ebc:	88fb      	ldrh	r3, [r7, #6]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e122      	b.n	800710c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d101      	bne.n	8006ed4 <HAL_SPI_Transmit+0x48>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	e11b      	b.n	800710c <HAL_SPI_Transmit+0x280>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2203      	movs	r2, #3
 8006ee0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	88fa      	ldrh	r2, [r7, #6]
 8006ef4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	88fa      	ldrh	r2, [r7, #6]
 8006efa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f22:	d10f      	bne.n	8006f44 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f32:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f42:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f4e:	2b40      	cmp	r3, #64	@ 0x40
 8006f50:	d007      	beq.n	8006f62 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f6a:	d152      	bne.n	8007012 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <HAL_SPI_Transmit+0xee>
 8006f74:	8b7b      	ldrh	r3, [r7, #26]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d145      	bne.n	8007006 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f7e:	881a      	ldrh	r2, [r3, #0]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f8a:	1c9a      	adds	r2, r3, #2
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	3b01      	subs	r3, #1
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f9e:	e032      	b.n	8007006 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f003 0302 	and.w	r3, r3, #2
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d112      	bne.n	8006fd4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fb2:	881a      	ldrh	r2, [r3, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fbe:	1c9a      	adds	r2, r3, #2
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006fd2:	e018      	b.n	8007006 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fd4:	f7fc ff72 	bl	8003ebc <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d803      	bhi.n	8006fec <HAL_SPI_Transmit+0x160>
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fea:	d102      	bne.n	8006ff2 <HAL_SPI_Transmit+0x166>
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d109      	bne.n	8007006 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e082      	b.n	800710c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800700a:	b29b      	uxth	r3, r3
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1c7      	bne.n	8006fa0 <HAL_SPI_Transmit+0x114>
 8007010:	e053      	b.n	80070ba <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <HAL_SPI_Transmit+0x194>
 800701a:	8b7b      	ldrh	r3, [r7, #26]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d147      	bne.n	80070b0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	330c      	adds	r3, #12
 800702a:	7812      	ldrb	r2, [r2, #0]
 800702c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007032:	1c5a      	adds	r2, r3, #1
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800703c:	b29b      	uxth	r3, r3
 800703e:	3b01      	subs	r3, #1
 8007040:	b29a      	uxth	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007046:	e033      	b.n	80070b0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b02      	cmp	r3, #2
 8007054:	d113      	bne.n	800707e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	330c      	adds	r3, #12
 8007060:	7812      	ldrb	r2, [r2, #0]
 8007062:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007072:	b29b      	uxth	r3, r3
 8007074:	3b01      	subs	r3, #1
 8007076:	b29a      	uxth	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800707c:	e018      	b.n	80070b0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800707e:	f7fc ff1d 	bl	8003ebc <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d803      	bhi.n	8007096 <HAL_SPI_Transmit+0x20a>
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007094:	d102      	bne.n	800709c <HAL_SPI_Transmit+0x210>
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d109      	bne.n	80070b0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e02d      	b.n	800710c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1c6      	bne.n	8007048 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070ba:	69fa      	ldr	r2, [r7, #28]
 80070bc:	6839      	ldr	r1, [r7, #0]
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f000 fbc4 	bl	800784c <SPI_EndRxTxTransaction>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d002      	beq.n	80070d0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2220      	movs	r2, #32
 80070ce:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10a      	bne.n	80070ee <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070d8:	2300      	movs	r3, #0
 80070da:	617b      	str	r3, [r7, #20]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	617b      	str	r3, [r7, #20]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	617b      	str	r3, [r7, #20]
 80070ec:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e000      	b.n	800710c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800710a:	2300      	movs	r3, #0
  }
}
 800710c:	4618      	mov	r0, r3
 800710e:	3720      	adds	r7, #32
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b088      	sub	sp, #32
 8007118:	af02      	add	r7, sp, #8
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	603b      	str	r3, [r7, #0]
 8007120:	4613      	mov	r3, r2
 8007122:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b01      	cmp	r3, #1
 800712e:	d001      	beq.n	8007134 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007130:	2302      	movs	r3, #2
 8007132:	e104      	b.n	800733e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800713c:	d112      	bne.n	8007164 <HAL_SPI_Receive+0x50>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10e      	bne.n	8007164 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2204      	movs	r2, #4
 800714a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800714e:	88fa      	ldrh	r2, [r7, #6]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	4613      	mov	r3, r2
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	68b9      	ldr	r1, [r7, #8]
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 f8f3 	bl	8007346 <HAL_SPI_TransmitReceive>
 8007160:	4603      	mov	r3, r0
 8007162:	e0ec      	b.n	800733e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007164:	f7fc feaa 	bl	8003ebc <HAL_GetTick>
 8007168:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d002      	beq.n	8007176 <HAL_SPI_Receive+0x62>
 8007170:	88fb      	ldrh	r3, [r7, #6]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e0e1      	b.n	800733e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007180:	2b01      	cmp	r3, #1
 8007182:	d101      	bne.n	8007188 <HAL_SPI_Receive+0x74>
 8007184:	2302      	movs	r3, #2
 8007186:	e0da      	b.n	800733e <HAL_SPI_Receive+0x22a>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2204      	movs	r2, #4
 8007194:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	88fa      	ldrh	r2, [r7, #6]
 80071a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	88fa      	ldrh	r2, [r7, #6]
 80071ae:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071d6:	d10f      	bne.n	80071f8 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80071f6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007202:	2b40      	cmp	r3, #64	@ 0x40
 8007204:	d007      	beq.n	8007216 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007214:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d170      	bne.n	8007300 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800721e:	e035      	b.n	800728c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b01      	cmp	r3, #1
 800722c:	d115      	bne.n	800725a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f103 020c 	add.w	r2, r3, #12
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800723a:	7812      	ldrb	r2, [r2, #0]
 800723c:	b2d2      	uxtb	r2, r2
 800723e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007244:	1c5a      	adds	r2, r3, #1
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800724e:	b29b      	uxth	r3, r3
 8007250:	3b01      	subs	r3, #1
 8007252:	b29a      	uxth	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007258:	e018      	b.n	800728c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800725a:	f7fc fe2f 	bl	8003ebc <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	429a      	cmp	r2, r3
 8007268:	d803      	bhi.n	8007272 <HAL_SPI_Receive+0x15e>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007270:	d102      	bne.n	8007278 <HAL_SPI_Receive+0x164>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d109      	bne.n	800728c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e058      	b.n	800733e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007290:	b29b      	uxth	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1c4      	bne.n	8007220 <HAL_SPI_Receive+0x10c>
 8007296:	e038      	b.n	800730a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d113      	bne.n	80072ce <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68da      	ldr	r2, [r3, #12]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b0:	b292      	uxth	r2, r2
 80072b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b8:	1c9a      	adds	r2, r3, #2
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	3b01      	subs	r3, #1
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80072cc:	e018      	b.n	8007300 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072ce:	f7fc fdf5 	bl	8003ebc <HAL_GetTick>
 80072d2:	4602      	mov	r2, r0
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d803      	bhi.n	80072e6 <HAL_SPI_Receive+0x1d2>
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072e4:	d102      	bne.n	80072ec <HAL_SPI_Receive+0x1d8>
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d109      	bne.n	8007300 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e01e      	b.n	800733e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007304:	b29b      	uxth	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1c6      	bne.n	8007298 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	6839      	ldr	r1, [r7, #0]
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 fa4a 	bl	80077a8 <SPI_EndRxTransaction>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d002      	beq.n	8007320 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2220      	movs	r2, #32
 800731e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e000      	b.n	800733e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800733c:	2300      	movs	r3, #0
  }
}
 800733e:	4618      	mov	r0, r3
 8007340:	3718      	adds	r7, #24
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b08a      	sub	sp, #40	@ 0x28
 800734a:	af00      	add	r7, sp, #0
 800734c:	60f8      	str	r0, [r7, #12]
 800734e:	60b9      	str	r1, [r7, #8]
 8007350:	607a      	str	r2, [r7, #4]
 8007352:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007354:	2301      	movs	r3, #1
 8007356:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007358:	f7fc fdb0 	bl	8003ebc <HAL_GetTick>
 800735c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007364:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800736c:	887b      	ldrh	r3, [r7, #2]
 800736e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007370:	7ffb      	ldrb	r3, [r7, #31]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d00c      	beq.n	8007390 <HAL_SPI_TransmitReceive+0x4a>
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800737c:	d106      	bne.n	800738c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d102      	bne.n	800738c <HAL_SPI_TransmitReceive+0x46>
 8007386:	7ffb      	ldrb	r3, [r7, #31]
 8007388:	2b04      	cmp	r3, #4
 800738a:	d001      	beq.n	8007390 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800738c:	2302      	movs	r3, #2
 800738e:	e17f      	b.n	8007690 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d005      	beq.n	80073a2 <HAL_SPI_TransmitReceive+0x5c>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d002      	beq.n	80073a2 <HAL_SPI_TransmitReceive+0x5c>
 800739c:	887b      	ldrh	r3, [r7, #2]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e174      	b.n	8007690 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d101      	bne.n	80073b4 <HAL_SPI_TransmitReceive+0x6e>
 80073b0:	2302      	movs	r3, #2
 80073b2:	e16d      	b.n	8007690 <HAL_SPI_TransmitReceive+0x34a>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b04      	cmp	r3, #4
 80073c6:	d003      	beq.n	80073d0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2205      	movs	r2, #5
 80073cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	887a      	ldrh	r2, [r7, #2]
 80073e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	887a      	ldrh	r2, [r7, #2]
 80073e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	887a      	ldrh	r2, [r7, #2]
 80073f2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	887a      	ldrh	r2, [r7, #2]
 80073f8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007410:	2b40      	cmp	r3, #64	@ 0x40
 8007412:	d007      	beq.n	8007424 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007422:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800742c:	d17e      	bne.n	800752c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d002      	beq.n	800743c <HAL_SPI_TransmitReceive+0xf6>
 8007436:	8afb      	ldrh	r3, [r7, #22]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d16c      	bne.n	8007516 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007440:	881a      	ldrh	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800744c:	1c9a      	adds	r2, r3, #2
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007456:	b29b      	uxth	r3, r3
 8007458:	3b01      	subs	r3, #1
 800745a:	b29a      	uxth	r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007460:	e059      	b.n	8007516 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f003 0302 	and.w	r3, r3, #2
 800746c:	2b02      	cmp	r3, #2
 800746e:	d11b      	bne.n	80074a8 <HAL_SPI_TransmitReceive+0x162>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007474:	b29b      	uxth	r3, r3
 8007476:	2b00      	cmp	r3, #0
 8007478:	d016      	beq.n	80074a8 <HAL_SPI_TransmitReceive+0x162>
 800747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747c:	2b01      	cmp	r3, #1
 800747e:	d113      	bne.n	80074a8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007484:	881a      	ldrh	r2, [r3, #0]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007490:	1c9a      	adds	r2, r3, #2
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800749a:	b29b      	uxth	r3, r3
 800749c:	3b01      	subs	r3, #1
 800749e:	b29a      	uxth	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d119      	bne.n	80074ea <HAL_SPI_TransmitReceive+0x1a4>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d014      	beq.n	80074ea <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68da      	ldr	r2, [r3, #12]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ca:	b292      	uxth	r2, r2
 80074cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d2:	1c9a      	adds	r2, r3, #2
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074dc:	b29b      	uxth	r3, r3
 80074de:	3b01      	subs	r3, #1
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074e6:	2301      	movs	r3, #1
 80074e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80074ea:	f7fc fce7 	bl	8003ebc <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	6a3b      	ldr	r3, [r7, #32]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d80d      	bhi.n	8007516 <HAL_SPI_TransmitReceive+0x1d0>
 80074fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007500:	d009      	beq.n	8007516 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e0bc      	b.n	8007690 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800751a:	b29b      	uxth	r3, r3
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1a0      	bne.n	8007462 <HAL_SPI_TransmitReceive+0x11c>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007524:	b29b      	uxth	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d19b      	bne.n	8007462 <HAL_SPI_TransmitReceive+0x11c>
 800752a:	e082      	b.n	8007632 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <HAL_SPI_TransmitReceive+0x1f4>
 8007534:	8afb      	ldrh	r3, [r7, #22]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d171      	bne.n	800761e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	330c      	adds	r3, #12
 8007544:	7812      	ldrb	r2, [r2, #0]
 8007546:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800754c:	1c5a      	adds	r2, r3, #1
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007556:	b29b      	uxth	r3, r3
 8007558:	3b01      	subs	r3, #1
 800755a:	b29a      	uxth	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007560:	e05d      	b.n	800761e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f003 0302 	and.w	r3, r3, #2
 800756c:	2b02      	cmp	r3, #2
 800756e:	d11c      	bne.n	80075aa <HAL_SPI_TransmitReceive+0x264>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007574:	b29b      	uxth	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d017      	beq.n	80075aa <HAL_SPI_TransmitReceive+0x264>
 800757a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757c:	2b01      	cmp	r3, #1
 800757e:	d114      	bne.n	80075aa <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	330c      	adds	r3, #12
 800758a:	7812      	ldrb	r2, [r2, #0]
 800758c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007592:	1c5a      	adds	r2, r3, #1
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800759c:	b29b      	uxth	r3, r3
 800759e:	3b01      	subs	r3, #1
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f003 0301 	and.w	r3, r3, #1
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d119      	bne.n	80075ec <HAL_SPI_TransmitReceive+0x2a6>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075bc:	b29b      	uxth	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d014      	beq.n	80075ec <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68da      	ldr	r2, [r3, #12]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075cc:	b2d2      	uxtb	r2, r2
 80075ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d4:	1c5a      	adds	r2, r3, #1
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075de:	b29b      	uxth	r3, r3
 80075e0:	3b01      	subs	r3, #1
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075e8:	2301      	movs	r3, #1
 80075ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80075ec:	f7fc fc66 	bl	8003ebc <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	6a3b      	ldr	r3, [r7, #32]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d803      	bhi.n	8007604 <HAL_SPI_TransmitReceive+0x2be>
 80075fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007602:	d102      	bne.n	800760a <HAL_SPI_TransmitReceive+0x2c4>
 8007604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007606:	2b00      	cmp	r3, #0
 8007608:	d109      	bne.n	800761e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e038      	b.n	8007690 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007622:	b29b      	uxth	r3, r3
 8007624:	2b00      	cmp	r3, #0
 8007626:	d19c      	bne.n	8007562 <HAL_SPI_TransmitReceive+0x21c>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800762c:	b29b      	uxth	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d197      	bne.n	8007562 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007632:	6a3a      	ldr	r2, [r7, #32]
 8007634:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f000 f908 	bl	800784c <SPI_EndRxTxTransaction>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d008      	beq.n	8007654 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2220      	movs	r2, #32
 8007646:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e01d      	b.n	8007690 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10a      	bne.n	8007672 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800765c:	2300      	movs	r3, #0
 800765e:	613b      	str	r3, [r7, #16]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	613b      	str	r3, [r7, #16]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	613b      	str	r3, [r7, #16]
 8007670:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e000      	b.n	8007690 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800768e:	2300      	movs	r3, #0
  }
}
 8007690:	4618      	mov	r0, r3
 8007692:	3728      	adds	r7, #40	@ 0x28
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b088      	sub	sp, #32
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	603b      	str	r3, [r7, #0]
 80076a4:	4613      	mov	r3, r2
 80076a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80076a8:	f7fc fc08 	bl	8003ebc <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b0:	1a9b      	subs	r3, r3, r2
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	4413      	add	r3, r2
 80076b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80076b8:	f7fc fc00 	bl	8003ebc <HAL_GetTick>
 80076bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80076be:	4b39      	ldr	r3, [pc, #228]	@ (80077a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	015b      	lsls	r3, r3, #5
 80076c4:	0d1b      	lsrs	r3, r3, #20
 80076c6:	69fa      	ldr	r2, [r7, #28]
 80076c8:	fb02 f303 	mul.w	r3, r2, r3
 80076cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076ce:	e054      	b.n	800777a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076d6:	d050      	beq.n	800777a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076d8:	f7fc fbf0 	bl	8003ebc <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	69fa      	ldr	r2, [r7, #28]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d902      	bls.n	80076ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d13d      	bne.n	800776a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80076fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007706:	d111      	bne.n	800772c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007710:	d004      	beq.n	800771c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800771a:	d107      	bne.n	800772c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800772a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007730:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007734:	d10f      	bne.n	8007756 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007744:	601a      	str	r2, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007754:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e017      	b.n	800779a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	3b01      	subs	r3, #1
 8007778:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	689a      	ldr	r2, [r3, #8]
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	4013      	ands	r3, r2
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	429a      	cmp	r2, r3
 8007788:	bf0c      	ite	eq
 800778a:	2301      	moveq	r3, #1
 800778c:	2300      	movne	r3, #0
 800778e:	b2db      	uxtb	r3, r3
 8007790:	461a      	mov	r2, r3
 8007792:	79fb      	ldrb	r3, [r7, #7]
 8007794:	429a      	cmp	r2, r3
 8007796:	d19b      	bne.n	80076d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3720      	adds	r7, #32
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	20000028 	.word	0x20000028

080077a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af02      	add	r7, sp, #8
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077bc:	d111      	bne.n	80077e2 <SPI_EndRxTransaction+0x3a>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077c6:	d004      	beq.n	80077d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077d0:	d107      	bne.n	80077e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077e0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077ea:	d117      	bne.n	800781c <SPI_EndRxTransaction+0x74>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077f4:	d112      	bne.n	800781c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	2200      	movs	r2, #0
 80077fe:	2101      	movs	r1, #1
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f7ff ff49 	bl	8007698 <SPI_WaitFlagStateUntilTimeout>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d01a      	beq.n	8007842 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007810:	f043 0220 	orr.w	r2, r3, #32
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e013      	b.n	8007844 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	2200      	movs	r2, #0
 8007824:	2180      	movs	r1, #128	@ 0x80
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f7ff ff36 	bl	8007698 <SPI_WaitFlagStateUntilTimeout>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d007      	beq.n	8007842 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007836:	f043 0220 	orr.w	r2, r3, #32
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e000      	b.n	8007844 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af02      	add	r7, sp, #8
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2201      	movs	r2, #1
 8007860:	2102      	movs	r1, #2
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f7ff ff18 	bl	8007698 <SPI_WaitFlagStateUntilTimeout>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d007      	beq.n	800787e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007872:	f043 0220 	orr.w	r2, r3, #32
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e013      	b.n	80078a6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	2200      	movs	r2, #0
 8007886:	2180      	movs	r1, #128	@ 0x80
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f7ff ff05 	bl	8007698 <SPI_WaitFlagStateUntilTimeout>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d007      	beq.n	80078a4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007898:	f043 0220 	orr.w	r2, r3, #32
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e000      	b.n	80078a6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b082      	sub	sp, #8
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d101      	bne.n	80078c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e041      	b.n	8007944 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d106      	bne.n	80078da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7fb fee3 	bl	80036a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2202      	movs	r2, #2
 80078de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	3304      	adds	r3, #4
 80078ea:	4619      	mov	r1, r3
 80078ec:	4610      	mov	r0, r2
 80078ee:	f000 fe61 	bl	80085b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800795a:	b2db      	uxtb	r3, r3
 800795c:	2b01      	cmp	r3, #1
 800795e:	d001      	beq.n	8007964 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	e044      	b.n	80079ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2202      	movs	r2, #2
 8007968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68da      	ldr	r2, [r3, #12]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f042 0201 	orr.w	r2, r2, #1
 800797a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a1d      	ldr	r2, [pc, #116]	@ (80079f8 <HAL_TIM_Base_Start_IT+0xac>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d018      	beq.n	80079b8 <HAL_TIM_Base_Start_IT+0x6c>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a1c      	ldr	r2, [pc, #112]	@ (80079fc <HAL_TIM_Base_Start_IT+0xb0>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d013      	beq.n	80079b8 <HAL_TIM_Base_Start_IT+0x6c>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007998:	d00e      	beq.n	80079b8 <HAL_TIM_Base_Start_IT+0x6c>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a18      	ldr	r2, [pc, #96]	@ (8007a00 <HAL_TIM_Base_Start_IT+0xb4>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d009      	beq.n	80079b8 <HAL_TIM_Base_Start_IT+0x6c>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a16      	ldr	r2, [pc, #88]	@ (8007a04 <HAL_TIM_Base_Start_IT+0xb8>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d004      	beq.n	80079b8 <HAL_TIM_Base_Start_IT+0x6c>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a15      	ldr	r2, [pc, #84]	@ (8007a08 <HAL_TIM_Base_Start_IT+0xbc>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d111      	bne.n	80079dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f003 0307 	and.w	r3, r3, #7
 80079c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2b06      	cmp	r3, #6
 80079c8:	d010      	beq.n	80079ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f042 0201 	orr.w	r2, r2, #1
 80079d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079da:	e007      	b.n	80079ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f042 0201 	orr.w	r2, r2, #1
 80079ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bc80      	pop	{r7}
 80079f6:	4770      	bx	lr
 80079f8:	40012c00 	.word	0x40012c00
 80079fc:	40013400 	.word	0x40013400
 8007a00:	40000400 	.word	0x40000400
 8007a04:	40000800 	.word	0x40000800
 8007a08:	40000c00 	.word	0x40000c00

08007a0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d101      	bne.n	8007a1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e041      	b.n	8007aa2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d106      	bne.n	8007a38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f7fb fea4 	bl	8003780 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	3304      	adds	r3, #4
 8007a48:	4619      	mov	r1, r3
 8007a4a:	4610      	mov	r0, r2
 8007a4c:	f000 fdb2 	bl	80085b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
	...

08007aac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d109      	bne.n	8007ad0 <HAL_TIM_PWM_Start+0x24>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	bf14      	ite	ne
 8007ac8:	2301      	movne	r3, #1
 8007aca:	2300      	moveq	r3, #0
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	e022      	b.n	8007b16 <HAL_TIM_PWM_Start+0x6a>
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	2b04      	cmp	r3, #4
 8007ad4:	d109      	bne.n	8007aea <HAL_TIM_PWM_Start+0x3e>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	bf14      	ite	ne
 8007ae2:	2301      	movne	r3, #1
 8007ae4:	2300      	moveq	r3, #0
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	e015      	b.n	8007b16 <HAL_TIM_PWM_Start+0x6a>
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	2b08      	cmp	r3, #8
 8007aee:	d109      	bne.n	8007b04 <HAL_TIM_PWM_Start+0x58>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	bf14      	ite	ne
 8007afc:	2301      	movne	r3, #1
 8007afe:	2300      	moveq	r3, #0
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	e008      	b.n	8007b16 <HAL_TIM_PWM_Start+0x6a>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	bf14      	ite	ne
 8007b10:	2301      	movne	r3, #1
 8007b12:	2300      	moveq	r3, #0
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d001      	beq.n	8007b1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e072      	b.n	8007c04 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d104      	bne.n	8007b2e <HAL_TIM_PWM_Start+0x82>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2202      	movs	r2, #2
 8007b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b2c:	e013      	b.n	8007b56 <HAL_TIM_PWM_Start+0xaa>
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	2b04      	cmp	r3, #4
 8007b32:	d104      	bne.n	8007b3e <HAL_TIM_PWM_Start+0x92>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2202      	movs	r2, #2
 8007b38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b3c:	e00b      	b.n	8007b56 <HAL_TIM_PWM_Start+0xaa>
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	2b08      	cmp	r3, #8
 8007b42:	d104      	bne.n	8007b4e <HAL_TIM_PWM_Start+0xa2>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2202      	movs	r2, #2
 8007b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b4c:	e003      	b.n	8007b56 <HAL_TIM_PWM_Start+0xaa>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2202      	movs	r2, #2
 8007b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 fff0 	bl	8008b44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a28      	ldr	r2, [pc, #160]	@ (8007c0c <HAL_TIM_PWM_Start+0x160>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d004      	beq.n	8007b78 <HAL_TIM_PWM_Start+0xcc>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a27      	ldr	r2, [pc, #156]	@ (8007c10 <HAL_TIM_PWM_Start+0x164>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d101      	bne.n	8007b7c <HAL_TIM_PWM_Start+0xd0>
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e000      	b.n	8007b7e <HAL_TIM_PWM_Start+0xd2>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d007      	beq.n	8007b92 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b90:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a1d      	ldr	r2, [pc, #116]	@ (8007c0c <HAL_TIM_PWM_Start+0x160>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d018      	beq.n	8007bce <HAL_TIM_PWM_Start+0x122>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8007c10 <HAL_TIM_PWM_Start+0x164>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d013      	beq.n	8007bce <HAL_TIM_PWM_Start+0x122>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bae:	d00e      	beq.n	8007bce <HAL_TIM_PWM_Start+0x122>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a17      	ldr	r2, [pc, #92]	@ (8007c14 <HAL_TIM_PWM_Start+0x168>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d009      	beq.n	8007bce <HAL_TIM_PWM_Start+0x122>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a16      	ldr	r2, [pc, #88]	@ (8007c18 <HAL_TIM_PWM_Start+0x16c>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d004      	beq.n	8007bce <HAL_TIM_PWM_Start+0x122>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a14      	ldr	r2, [pc, #80]	@ (8007c1c <HAL_TIM_PWM_Start+0x170>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d111      	bne.n	8007bf2 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	f003 0307 	and.w	r3, r3, #7
 8007bd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2b06      	cmp	r3, #6
 8007bde:	d010      	beq.n	8007c02 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f042 0201 	orr.w	r2, r2, #1
 8007bee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bf0:	e007      	b.n	8007c02 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f042 0201 	orr.w	r2, r2, #1
 8007c00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	40012c00 	.word	0x40012c00
 8007c10:	40013400 	.word	0x40013400
 8007c14:	40000400 	.word	0x40000400
 8007c18:	40000800 	.word	0x40000800
 8007c1c:	40000c00 	.word	0x40000c00

08007c20 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 ff86 	bl	8008b44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a2e      	ldr	r2, [pc, #184]	@ (8007cf8 <HAL_TIM_PWM_Stop+0xd8>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d004      	beq.n	8007c4c <HAL_TIM_PWM_Stop+0x2c>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a2d      	ldr	r2, [pc, #180]	@ (8007cfc <HAL_TIM_PWM_Stop+0xdc>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d101      	bne.n	8007c50 <HAL_TIM_PWM_Stop+0x30>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e000      	b.n	8007c52 <HAL_TIM_PWM_Stop+0x32>
 8007c50:	2300      	movs	r3, #0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d017      	beq.n	8007c86 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	6a1a      	ldr	r2, [r3, #32]
 8007c5c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007c60:	4013      	ands	r3, r2
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d10f      	bne.n	8007c86 <HAL_TIM_PWM_Stop+0x66>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6a1a      	ldr	r2, [r3, #32]
 8007c6c:	f240 4344 	movw	r3, #1092	@ 0x444
 8007c70:	4013      	ands	r3, r2
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d107      	bne.n	8007c86 <HAL_TIM_PWM_Stop+0x66>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007c84:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	6a1a      	ldr	r2, [r3, #32]
 8007c8c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007c90:	4013      	ands	r3, r2
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10f      	bne.n	8007cb6 <HAL_TIM_PWM_Stop+0x96>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	6a1a      	ldr	r2, [r3, #32]
 8007c9c:	f240 4344 	movw	r3, #1092	@ 0x444
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d107      	bne.n	8007cb6 <HAL_TIM_PWM_Stop+0x96>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f022 0201 	bic.w	r2, r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d104      	bne.n	8007cc6 <HAL_TIM_PWM_Stop+0xa6>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cc4:	e013      	b.n	8007cee <HAL_TIM_PWM_Stop+0xce>
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	2b04      	cmp	r3, #4
 8007cca:	d104      	bne.n	8007cd6 <HAL_TIM_PWM_Stop+0xb6>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cd4:	e00b      	b.n	8007cee <HAL_TIM_PWM_Stop+0xce>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b08      	cmp	r3, #8
 8007cda:	d104      	bne.n	8007ce6 <HAL_TIM_PWM_Stop+0xc6>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ce4:	e003      	b.n	8007cee <HAL_TIM_PWM_Stop+0xce>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	40012c00 	.word	0x40012c00
 8007cfc:	40013400 	.word	0x40013400

08007d00 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d109      	bne.n	8007d28 <HAL_TIM_PWM_Start_IT+0x28>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	bf14      	ite	ne
 8007d20:	2301      	movne	r3, #1
 8007d22:	2300      	moveq	r3, #0
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	e022      	b.n	8007d6e <HAL_TIM_PWM_Start_IT+0x6e>
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	2b04      	cmp	r3, #4
 8007d2c:	d109      	bne.n	8007d42 <HAL_TIM_PWM_Start_IT+0x42>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	bf14      	ite	ne
 8007d3a:	2301      	movne	r3, #1
 8007d3c:	2300      	moveq	r3, #0
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	e015      	b.n	8007d6e <HAL_TIM_PWM_Start_IT+0x6e>
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	2b08      	cmp	r3, #8
 8007d46:	d109      	bne.n	8007d5c <HAL_TIM_PWM_Start_IT+0x5c>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	bf14      	ite	ne
 8007d54:	2301      	movne	r3, #1
 8007d56:	2300      	moveq	r3, #0
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	e008      	b.n	8007d6e <HAL_TIM_PWM_Start_IT+0x6e>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	bf14      	ite	ne
 8007d68:	2301      	movne	r3, #1
 8007d6a:	2300      	moveq	r3, #0
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d001      	beq.n	8007d76 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e0bd      	b.n	8007ef2 <HAL_TIM_PWM_Start_IT+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d104      	bne.n	8007d86 <HAL_TIM_PWM_Start_IT+0x86>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2202      	movs	r2, #2
 8007d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d84:	e013      	b.n	8007dae <HAL_TIM_PWM_Start_IT+0xae>
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b04      	cmp	r3, #4
 8007d8a:	d104      	bne.n	8007d96 <HAL_TIM_PWM_Start_IT+0x96>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2202      	movs	r2, #2
 8007d90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d94:	e00b      	b.n	8007dae <HAL_TIM_PWM_Start_IT+0xae>
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	2b08      	cmp	r3, #8
 8007d9a:	d104      	bne.n	8007da6 <HAL_TIM_PWM_Start_IT+0xa6>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007da4:	e003      	b.n	8007dae <HAL_TIM_PWM_Start_IT+0xae>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2202      	movs	r2, #2
 8007daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b0c      	cmp	r3, #12
 8007db2:	d841      	bhi.n	8007e38 <HAL_TIM_PWM_Start_IT+0x138>
 8007db4:	a201      	add	r2, pc, #4	@ (adr r2, 8007dbc <HAL_TIM_PWM_Start_IT+0xbc>)
 8007db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dba:	bf00      	nop
 8007dbc:	08007df1 	.word	0x08007df1
 8007dc0:	08007e39 	.word	0x08007e39
 8007dc4:	08007e39 	.word	0x08007e39
 8007dc8:	08007e39 	.word	0x08007e39
 8007dcc:	08007e03 	.word	0x08007e03
 8007dd0:	08007e39 	.word	0x08007e39
 8007dd4:	08007e39 	.word	0x08007e39
 8007dd8:	08007e39 	.word	0x08007e39
 8007ddc:	08007e15 	.word	0x08007e15
 8007de0:	08007e39 	.word	0x08007e39
 8007de4:	08007e39 	.word	0x08007e39
 8007de8:	08007e39 	.word	0x08007e39
 8007dec:	08007e27 	.word	0x08007e27
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68da      	ldr	r2, [r3, #12]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f042 0202 	orr.w	r2, r2, #2
 8007dfe:	60da      	str	r2, [r3, #12]
      break;
 8007e00:	e01d      	b.n	8007e3e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68da      	ldr	r2, [r3, #12]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f042 0204 	orr.w	r2, r2, #4
 8007e10:	60da      	str	r2, [r3, #12]
      break;
 8007e12:	e014      	b.n	8007e3e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68da      	ldr	r2, [r3, #12]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f042 0208 	orr.w	r2, r2, #8
 8007e22:	60da      	str	r2, [r3, #12]
      break;
 8007e24:	e00b      	b.n	8007e3e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68da      	ldr	r2, [r3, #12]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f042 0210 	orr.w	r2, r2, #16
 8007e34:	60da      	str	r2, [r3, #12]
      break;
 8007e36:	e002      	b.n	8007e3e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d155      	bne.n	8007ef0 <HAL_TIM_PWM_Start_IT+0x1f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	6839      	ldr	r1, [r7, #0]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f000 fe79 	bl	8008b44 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a29      	ldr	r2, [pc, #164]	@ (8007efc <HAL_TIM_PWM_Start_IT+0x1fc>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d004      	beq.n	8007e66 <HAL_TIM_PWM_Start_IT+0x166>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a27      	ldr	r2, [pc, #156]	@ (8007f00 <HAL_TIM_PWM_Start_IT+0x200>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d101      	bne.n	8007e6a <HAL_TIM_PWM_Start_IT+0x16a>
 8007e66:	2301      	movs	r3, #1
 8007e68:	e000      	b.n	8007e6c <HAL_TIM_PWM_Start_IT+0x16c>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d007      	beq.n	8007e80 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e7e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a1d      	ldr	r2, [pc, #116]	@ (8007efc <HAL_TIM_PWM_Start_IT+0x1fc>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d018      	beq.n	8007ebc <HAL_TIM_PWM_Start_IT+0x1bc>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a1c      	ldr	r2, [pc, #112]	@ (8007f00 <HAL_TIM_PWM_Start_IT+0x200>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d013      	beq.n	8007ebc <HAL_TIM_PWM_Start_IT+0x1bc>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e9c:	d00e      	beq.n	8007ebc <HAL_TIM_PWM_Start_IT+0x1bc>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a18      	ldr	r2, [pc, #96]	@ (8007f04 <HAL_TIM_PWM_Start_IT+0x204>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d009      	beq.n	8007ebc <HAL_TIM_PWM_Start_IT+0x1bc>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a16      	ldr	r2, [pc, #88]	@ (8007f08 <HAL_TIM_PWM_Start_IT+0x208>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d004      	beq.n	8007ebc <HAL_TIM_PWM_Start_IT+0x1bc>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a15      	ldr	r2, [pc, #84]	@ (8007f0c <HAL_TIM_PWM_Start_IT+0x20c>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d111      	bne.n	8007ee0 <HAL_TIM_PWM_Start_IT+0x1e0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f003 0307 	and.w	r3, r3, #7
 8007ec6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2b06      	cmp	r3, #6
 8007ecc:	d010      	beq.n	8007ef0 <HAL_TIM_PWM_Start_IT+0x1f0>
      {
        __HAL_TIM_ENABLE(htim);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f042 0201 	orr.w	r2, r2, #1
 8007edc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ede:	e007      	b.n	8007ef0 <HAL_TIM_PWM_Start_IT+0x1f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f042 0201 	orr.w	r2, r2, #1
 8007eee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	40012c00 	.word	0x40012c00
 8007f00:	40013400 	.word	0x40013400
 8007f04:	40000400 	.word	0x40000400
 8007f08:	40000800 	.word	0x40000800
 8007f0c:	40000c00 	.word	0x40000c00

08007f10 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	2b0c      	cmp	r3, #12
 8007f22:	d841      	bhi.n	8007fa8 <HAL_TIM_PWM_Stop_IT+0x98>
 8007f24:	a201      	add	r2, pc, #4	@ (adr r2, 8007f2c <HAL_TIM_PWM_Stop_IT+0x1c>)
 8007f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2a:	bf00      	nop
 8007f2c:	08007f61 	.word	0x08007f61
 8007f30:	08007fa9 	.word	0x08007fa9
 8007f34:	08007fa9 	.word	0x08007fa9
 8007f38:	08007fa9 	.word	0x08007fa9
 8007f3c:	08007f73 	.word	0x08007f73
 8007f40:	08007fa9 	.word	0x08007fa9
 8007f44:	08007fa9 	.word	0x08007fa9
 8007f48:	08007fa9 	.word	0x08007fa9
 8007f4c:	08007f85 	.word	0x08007f85
 8007f50:	08007fa9 	.word	0x08007fa9
 8007f54:	08007fa9 	.word	0x08007fa9
 8007f58:	08007fa9 	.word	0x08007fa9
 8007f5c:	08007f97 	.word	0x08007f97
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68da      	ldr	r2, [r3, #12]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f022 0202 	bic.w	r2, r2, #2
 8007f6e:	60da      	str	r2, [r3, #12]
      break;
 8007f70:	e01d      	b.n	8007fae <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68da      	ldr	r2, [r3, #12]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f022 0204 	bic.w	r2, r2, #4
 8007f80:	60da      	str	r2, [r3, #12]
      break;
 8007f82:	e014      	b.n	8007fae <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68da      	ldr	r2, [r3, #12]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f022 0208 	bic.w	r2, r2, #8
 8007f92:	60da      	str	r2, [r3, #12]
      break;
 8007f94:	e00b      	b.n	8007fae <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68da      	ldr	r2, [r3, #12]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f022 0210 	bic.w	r2, r2, #16
 8007fa4:	60da      	str	r2, [r3, #12]
      break;
 8007fa6:	e002      	b.n	8007fae <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	73fb      	strb	r3, [r7, #15]
      break;
 8007fac:	bf00      	nop
  }

  if (status == HAL_OK)
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d161      	bne.n	8008078 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	6839      	ldr	r1, [r7, #0]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f000 fdc1 	bl	8008b44 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a2f      	ldr	r2, [pc, #188]	@ (8008084 <HAL_TIM_PWM_Stop_IT+0x174>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d004      	beq.n	8007fd6 <HAL_TIM_PWM_Stop_IT+0xc6>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8008088 <HAL_TIM_PWM_Stop_IT+0x178>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d101      	bne.n	8007fda <HAL_TIM_PWM_Stop_IT+0xca>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e000      	b.n	8007fdc <HAL_TIM_PWM_Stop_IT+0xcc>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d017      	beq.n	8008010 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6a1a      	ldr	r2, [r3, #32]
 8007fe6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007fea:	4013      	ands	r3, r2
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10f      	bne.n	8008010 <HAL_TIM_PWM_Stop_IT+0x100>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6a1a      	ldr	r2, [r3, #32]
 8007ff6:	f240 4344 	movw	r3, #1092	@ 0x444
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d107      	bne.n	8008010 <HAL_TIM_PWM_Stop_IT+0x100>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800800e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	6a1a      	ldr	r2, [r3, #32]
 8008016:	f241 1311 	movw	r3, #4369	@ 0x1111
 800801a:	4013      	ands	r3, r2
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10f      	bne.n	8008040 <HAL_TIM_PWM_Stop_IT+0x130>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	6a1a      	ldr	r2, [r3, #32]
 8008026:	f240 4344 	movw	r3, #1092	@ 0x444
 800802a:	4013      	ands	r3, r2
 800802c:	2b00      	cmp	r3, #0
 800802e:	d107      	bne.n	8008040 <HAL_TIM_PWM_Stop_IT+0x130>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f022 0201 	bic.w	r2, r2, #1
 800803e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d104      	bne.n	8008050 <HAL_TIM_PWM_Stop_IT+0x140>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800804e:	e013      	b.n	8008078 <HAL_TIM_PWM_Stop_IT+0x168>
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	2b04      	cmp	r3, #4
 8008054:	d104      	bne.n	8008060 <HAL_TIM_PWM_Stop_IT+0x150>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800805e:	e00b      	b.n	8008078 <HAL_TIM_PWM_Stop_IT+0x168>
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	2b08      	cmp	r3, #8
 8008064:	d104      	bne.n	8008070 <HAL_TIM_PWM_Stop_IT+0x160>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800806e:	e003      	b.n	8008078 <HAL_TIM_PWM_Stop_IT+0x168>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8008078:	7bfb      	ldrb	r3, [r7, #15]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	40012c00 	.word	0x40012c00
 8008088:	40013400 	.word	0x40013400

0800808c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	f003 0302 	and.w	r3, r3, #2
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d020      	beq.n	80080f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f003 0302 	and.w	r3, r3, #2
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d01b      	beq.n	80080f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f06f 0202 	mvn.w	r2, #2
 80080c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2201      	movs	r2, #1
 80080c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	f003 0303 	and.w	r3, r3, #3
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d003      	beq.n	80080de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fa5a 	bl	8008590 <HAL_TIM_IC_CaptureCallback>
 80080dc:	e005      	b.n	80080ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fa4d 	bl	800857e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7fa fef7 	bl	8002ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	f003 0304 	and.w	r3, r3, #4
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d020      	beq.n	800813c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f003 0304 	and.w	r3, r3, #4
 8008100:	2b00      	cmp	r3, #0
 8008102:	d01b      	beq.n	800813c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f06f 0204 	mvn.w	r2, #4
 800810c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2202      	movs	r2, #2
 8008112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fa34 	bl	8008590 <HAL_TIM_IC_CaptureCallback>
 8008128:	e005      	b.n	8008136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fa27 	bl	800857e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f7fa fed1 	bl	8002ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	f003 0308 	and.w	r3, r3, #8
 8008142:	2b00      	cmp	r3, #0
 8008144:	d020      	beq.n	8008188 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f003 0308 	and.w	r3, r3, #8
 800814c:	2b00      	cmp	r3, #0
 800814e:	d01b      	beq.n	8008188 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f06f 0208 	mvn.w	r2, #8
 8008158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2204      	movs	r2, #4
 800815e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	f003 0303 	and.w	r3, r3, #3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fa0e 	bl	8008590 <HAL_TIM_IC_CaptureCallback>
 8008174:	e005      	b.n	8008182 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fa01 	bl	800857e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f7fa feab 	bl	8002ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	f003 0310 	and.w	r3, r3, #16
 800818e:	2b00      	cmp	r3, #0
 8008190:	d020      	beq.n	80081d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f003 0310 	and.w	r3, r3, #16
 8008198:	2b00      	cmp	r3, #0
 800819a:	d01b      	beq.n	80081d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f06f 0210 	mvn.w	r2, #16
 80081a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2208      	movs	r2, #8
 80081aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	69db      	ldr	r3, [r3, #28]
 80081b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d003      	beq.n	80081c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f9e8 	bl	8008590 <HAL_TIM_IC_CaptureCallback>
 80081c0:	e005      	b.n	80081ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f9db 	bl	800857e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f7fa fe85 	bl	8002ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f003 0301 	and.w	r3, r3, #1
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00c      	beq.n	80081f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d007      	beq.n	80081f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f06f 0201 	mvn.w	r2, #1
 80081f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f7fa fd7a 	bl	8002cec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00c      	beq.n	800821c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008208:	2b00      	cmp	r3, #0
 800820a:	d007      	beq.n	800821c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fd7e 	bl	8008d18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00c      	beq.n	8008240 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800822c:	2b00      	cmp	r3, #0
 800822e:	d007      	beq.n	8008240 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f9b1 	bl	80085a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	f003 0320 	and.w	r3, r3, #32
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00c      	beq.n	8008264 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f003 0320 	and.w	r3, r3, #32
 8008250:	2b00      	cmp	r3, #0
 8008252:	d007      	beq.n	8008264 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f06f 0220 	mvn.w	r2, #32
 800825c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fd51 	bl	8008d06 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008264:	bf00      	nop
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008282:	2b01      	cmp	r3, #1
 8008284:	d101      	bne.n	800828a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008286:	2302      	movs	r3, #2
 8008288:	e0ae      	b.n	80083e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2201      	movs	r2, #1
 800828e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b0c      	cmp	r3, #12
 8008296:	f200 809f 	bhi.w	80083d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800829a:	a201      	add	r2, pc, #4	@ (adr r2, 80082a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800829c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a0:	080082d5 	.word	0x080082d5
 80082a4:	080083d9 	.word	0x080083d9
 80082a8:	080083d9 	.word	0x080083d9
 80082ac:	080083d9 	.word	0x080083d9
 80082b0:	08008315 	.word	0x08008315
 80082b4:	080083d9 	.word	0x080083d9
 80082b8:	080083d9 	.word	0x080083d9
 80082bc:	080083d9 	.word	0x080083d9
 80082c0:	08008357 	.word	0x08008357
 80082c4:	080083d9 	.word	0x080083d9
 80082c8:	080083d9 	.word	0x080083d9
 80082cc:	080083d9 	.word	0x080083d9
 80082d0:	08008397 	.word	0x08008397
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68b9      	ldr	r1, [r7, #8]
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 f9f0 	bl	80086c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	699a      	ldr	r2, [r3, #24]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f042 0208 	orr.w	r2, r2, #8
 80082ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	699a      	ldr	r2, [r3, #24]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f022 0204 	bic.w	r2, r2, #4
 80082fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	6999      	ldr	r1, [r3, #24]
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	691a      	ldr	r2, [r3, #16]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	430a      	orrs	r2, r1
 8008310:	619a      	str	r2, [r3, #24]
      break;
 8008312:	e064      	b.n	80083de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68b9      	ldr	r1, [r7, #8]
 800831a:	4618      	mov	r0, r3
 800831c:	f000 fa40 	bl	80087a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	699a      	ldr	r2, [r3, #24]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800832e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	699a      	ldr	r2, [r3, #24]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800833e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6999      	ldr	r1, [r3, #24]
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	021a      	lsls	r2, r3, #8
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	430a      	orrs	r2, r1
 8008352:	619a      	str	r2, [r3, #24]
      break;
 8008354:	e043      	b.n	80083de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68b9      	ldr	r1, [r7, #8]
 800835c:	4618      	mov	r0, r3
 800835e:	f000 fa93 	bl	8008888 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	69da      	ldr	r2, [r3, #28]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f042 0208 	orr.w	r2, r2, #8
 8008370:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	69da      	ldr	r2, [r3, #28]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f022 0204 	bic.w	r2, r2, #4
 8008380:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	69d9      	ldr	r1, [r3, #28]
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	691a      	ldr	r2, [r3, #16]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	430a      	orrs	r2, r1
 8008392:	61da      	str	r2, [r3, #28]
      break;
 8008394:	e023      	b.n	80083de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	68b9      	ldr	r1, [r7, #8]
 800839c:	4618      	mov	r0, r3
 800839e:	f000 fae7 	bl	8008970 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	69da      	ldr	r2, [r3, #28]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	69da      	ldr	r2, [r3, #28]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	69d9      	ldr	r1, [r3, #28]
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	021a      	lsls	r2, r3, #8
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	430a      	orrs	r2, r1
 80083d4:	61da      	str	r2, [r3, #28]
      break;
 80083d6:	e002      	b.n	80083de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	75fb      	strb	r3, [r7, #23]
      break;
 80083dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80083e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3718      	adds	r7, #24
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083fa:	2300      	movs	r3, #0
 80083fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008404:	2b01      	cmp	r3, #1
 8008406:	d101      	bne.n	800840c <HAL_TIM_ConfigClockSource+0x1c>
 8008408:	2302      	movs	r3, #2
 800840a:	e0b4      	b.n	8008576 <HAL_TIM_ConfigClockSource+0x186>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2202      	movs	r2, #2
 8008418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800842a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008432:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008444:	d03e      	beq.n	80084c4 <HAL_TIM_ConfigClockSource+0xd4>
 8008446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800844a:	f200 8087 	bhi.w	800855c <HAL_TIM_ConfigClockSource+0x16c>
 800844e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008452:	f000 8086 	beq.w	8008562 <HAL_TIM_ConfigClockSource+0x172>
 8008456:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800845a:	d87f      	bhi.n	800855c <HAL_TIM_ConfigClockSource+0x16c>
 800845c:	2b70      	cmp	r3, #112	@ 0x70
 800845e:	d01a      	beq.n	8008496 <HAL_TIM_ConfigClockSource+0xa6>
 8008460:	2b70      	cmp	r3, #112	@ 0x70
 8008462:	d87b      	bhi.n	800855c <HAL_TIM_ConfigClockSource+0x16c>
 8008464:	2b60      	cmp	r3, #96	@ 0x60
 8008466:	d050      	beq.n	800850a <HAL_TIM_ConfigClockSource+0x11a>
 8008468:	2b60      	cmp	r3, #96	@ 0x60
 800846a:	d877      	bhi.n	800855c <HAL_TIM_ConfigClockSource+0x16c>
 800846c:	2b50      	cmp	r3, #80	@ 0x50
 800846e:	d03c      	beq.n	80084ea <HAL_TIM_ConfigClockSource+0xfa>
 8008470:	2b50      	cmp	r3, #80	@ 0x50
 8008472:	d873      	bhi.n	800855c <HAL_TIM_ConfigClockSource+0x16c>
 8008474:	2b40      	cmp	r3, #64	@ 0x40
 8008476:	d058      	beq.n	800852a <HAL_TIM_ConfigClockSource+0x13a>
 8008478:	2b40      	cmp	r3, #64	@ 0x40
 800847a:	d86f      	bhi.n	800855c <HAL_TIM_ConfigClockSource+0x16c>
 800847c:	2b30      	cmp	r3, #48	@ 0x30
 800847e:	d064      	beq.n	800854a <HAL_TIM_ConfigClockSource+0x15a>
 8008480:	2b30      	cmp	r3, #48	@ 0x30
 8008482:	d86b      	bhi.n	800855c <HAL_TIM_ConfigClockSource+0x16c>
 8008484:	2b20      	cmp	r3, #32
 8008486:	d060      	beq.n	800854a <HAL_TIM_ConfigClockSource+0x15a>
 8008488:	2b20      	cmp	r3, #32
 800848a:	d867      	bhi.n	800855c <HAL_TIM_ConfigClockSource+0x16c>
 800848c:	2b00      	cmp	r3, #0
 800848e:	d05c      	beq.n	800854a <HAL_TIM_ConfigClockSource+0x15a>
 8008490:	2b10      	cmp	r3, #16
 8008492:	d05a      	beq.n	800854a <HAL_TIM_ConfigClockSource+0x15a>
 8008494:	e062      	b.n	800855c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084a6:	f000 fb2e 	bl	8008b06 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80084b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	609a      	str	r2, [r3, #8]
      break;
 80084c2:	e04f      	b.n	8008564 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084d4:	f000 fb17 	bl	8008b06 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	689a      	ldr	r2, [r3, #8]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80084e6:	609a      	str	r2, [r3, #8]
      break;
 80084e8:	e03c      	b.n	8008564 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084f6:	461a      	mov	r2, r3
 80084f8:	f000 fa8e 	bl	8008a18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2150      	movs	r1, #80	@ 0x50
 8008502:	4618      	mov	r0, r3
 8008504:	f000 fae5 	bl	8008ad2 <TIM_ITRx_SetConfig>
      break;
 8008508:	e02c      	b.n	8008564 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008516:	461a      	mov	r2, r3
 8008518:	f000 faac 	bl	8008a74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2160      	movs	r1, #96	@ 0x60
 8008522:	4618      	mov	r0, r3
 8008524:	f000 fad5 	bl	8008ad2 <TIM_ITRx_SetConfig>
      break;
 8008528:	e01c      	b.n	8008564 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008536:	461a      	mov	r2, r3
 8008538:	f000 fa6e 	bl	8008a18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2140      	movs	r1, #64	@ 0x40
 8008542:	4618      	mov	r0, r3
 8008544:	f000 fac5 	bl	8008ad2 <TIM_ITRx_SetConfig>
      break;
 8008548:	e00c      	b.n	8008564 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4619      	mov	r1, r3
 8008554:	4610      	mov	r0, r2
 8008556:	f000 fabc 	bl	8008ad2 <TIM_ITRx_SetConfig>
      break;
 800855a:	e003      	b.n	8008564 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	73fb      	strb	r3, [r7, #15]
      break;
 8008560:	e000      	b.n	8008564 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008562:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008574:	7bfb      	ldrb	r3, [r7, #15]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800857e:	b480      	push	{r7}
 8008580:	b083      	sub	sp, #12
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008586:	bf00      	nop
 8008588:	370c      	adds	r7, #12
 800858a:	46bd      	mov	sp, r7
 800858c:	bc80      	pop	{r7}
 800858e:	4770      	bx	lr

08008590 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008598:	bf00      	nop
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	bc80      	pop	{r7}
 80085a0:	4770      	bx	lr

080085a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b083      	sub	sp, #12
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085aa:	bf00      	nop
 80085ac:	370c      	adds	r7, #12
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bc80      	pop	{r7}
 80085b2:	4770      	bx	lr

080085b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a39      	ldr	r2, [pc, #228]	@ (80086ac <TIM_Base_SetConfig+0xf8>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d013      	beq.n	80085f4 <TIM_Base_SetConfig+0x40>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a38      	ldr	r2, [pc, #224]	@ (80086b0 <TIM_Base_SetConfig+0xfc>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d00f      	beq.n	80085f4 <TIM_Base_SetConfig+0x40>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085da:	d00b      	beq.n	80085f4 <TIM_Base_SetConfig+0x40>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a35      	ldr	r2, [pc, #212]	@ (80086b4 <TIM_Base_SetConfig+0x100>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d007      	beq.n	80085f4 <TIM_Base_SetConfig+0x40>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a34      	ldr	r2, [pc, #208]	@ (80086b8 <TIM_Base_SetConfig+0x104>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d003      	beq.n	80085f4 <TIM_Base_SetConfig+0x40>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a33      	ldr	r2, [pc, #204]	@ (80086bc <TIM_Base_SetConfig+0x108>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d108      	bne.n	8008606 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	4313      	orrs	r3, r2
 8008604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a28      	ldr	r2, [pc, #160]	@ (80086ac <TIM_Base_SetConfig+0xf8>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d013      	beq.n	8008636 <TIM_Base_SetConfig+0x82>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a27      	ldr	r2, [pc, #156]	@ (80086b0 <TIM_Base_SetConfig+0xfc>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d00f      	beq.n	8008636 <TIM_Base_SetConfig+0x82>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800861c:	d00b      	beq.n	8008636 <TIM_Base_SetConfig+0x82>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a24      	ldr	r2, [pc, #144]	@ (80086b4 <TIM_Base_SetConfig+0x100>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d007      	beq.n	8008636 <TIM_Base_SetConfig+0x82>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a23      	ldr	r2, [pc, #140]	@ (80086b8 <TIM_Base_SetConfig+0x104>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d003      	beq.n	8008636 <TIM_Base_SetConfig+0x82>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a22      	ldr	r2, [pc, #136]	@ (80086bc <TIM_Base_SetConfig+0x108>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d108      	bne.n	8008648 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800863c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	4313      	orrs	r3, r2
 8008646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	695b      	ldr	r3, [r3, #20]
 8008652:	4313      	orrs	r3, r2
 8008654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	689a      	ldr	r2, [r3, #8]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a0f      	ldr	r2, [pc, #60]	@ (80086ac <TIM_Base_SetConfig+0xf8>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d003      	beq.n	800867c <TIM_Base_SetConfig+0xc8>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a0e      	ldr	r2, [pc, #56]	@ (80086b0 <TIM_Base_SetConfig+0xfc>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d103      	bne.n	8008684 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	691a      	ldr	r2, [r3, #16]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	f003 0301 	and.w	r3, r3, #1
 8008692:	2b00      	cmp	r3, #0
 8008694:	d005      	beq.n	80086a2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	f023 0201 	bic.w	r2, r3, #1
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	611a      	str	r2, [r3, #16]
  }
}
 80086a2:	bf00      	nop
 80086a4:	3714      	adds	r7, #20
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bc80      	pop	{r7}
 80086aa:	4770      	bx	lr
 80086ac:	40012c00 	.word	0x40012c00
 80086b0:	40013400 	.word	0x40013400
 80086b4:	40000400 	.word	0x40000400
 80086b8:	40000800 	.word	0x40000800
 80086bc:	40000c00 	.word	0x40000c00

080086c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b087      	sub	sp, #28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a1b      	ldr	r3, [r3, #32]
 80086ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a1b      	ldr	r3, [r3, #32]
 80086d4:	f023 0201 	bic.w	r2, r3, #1
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f023 0303 	bic.w	r3, r3, #3
 80086f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	4313      	orrs	r3, r2
 8008700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	f023 0302 	bic.w	r3, r3, #2
 8008708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	697a      	ldr	r2, [r7, #20]
 8008710:	4313      	orrs	r3, r2
 8008712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a20      	ldr	r2, [pc, #128]	@ (8008798 <TIM_OC1_SetConfig+0xd8>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d003      	beq.n	8008724 <TIM_OC1_SetConfig+0x64>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a1f      	ldr	r2, [pc, #124]	@ (800879c <TIM_OC1_SetConfig+0xdc>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d10c      	bne.n	800873e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	f023 0308 	bic.w	r3, r3, #8
 800872a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	4313      	orrs	r3, r2
 8008734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f023 0304 	bic.w	r3, r3, #4
 800873c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a15      	ldr	r2, [pc, #84]	@ (8008798 <TIM_OC1_SetConfig+0xd8>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d003      	beq.n	800874e <TIM_OC1_SetConfig+0x8e>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a14      	ldr	r2, [pc, #80]	@ (800879c <TIM_OC1_SetConfig+0xdc>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d111      	bne.n	8008772 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800875c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	695b      	ldr	r3, [r3, #20]
 8008762:	693a      	ldr	r2, [r7, #16]
 8008764:	4313      	orrs	r3, r2
 8008766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	4313      	orrs	r3, r2
 8008770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	685a      	ldr	r2, [r3, #4]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	697a      	ldr	r2, [r7, #20]
 800878a:	621a      	str	r2, [r3, #32]
}
 800878c:	bf00      	nop
 800878e:	371c      	adds	r7, #28
 8008790:	46bd      	mov	sp, r7
 8008792:	bc80      	pop	{r7}
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	40012c00 	.word	0x40012c00
 800879c:	40013400 	.word	0x40013400

080087a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b087      	sub	sp, #28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a1b      	ldr	r3, [r3, #32]
 80087ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a1b      	ldr	r3, [r3, #32]
 80087b4:	f023 0210 	bic.w	r2, r3, #16
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	021b      	lsls	r3, r3, #8
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	f023 0320 	bic.w	r3, r3, #32
 80087ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	011b      	lsls	r3, r3, #4
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a21      	ldr	r2, [pc, #132]	@ (8008880 <TIM_OC2_SetConfig+0xe0>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d003      	beq.n	8008808 <TIM_OC2_SetConfig+0x68>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a20      	ldr	r2, [pc, #128]	@ (8008884 <TIM_OC2_SetConfig+0xe4>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d10d      	bne.n	8008824 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800880e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	011b      	lsls	r3, r3, #4
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	4313      	orrs	r3, r2
 800881a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008822:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a16      	ldr	r2, [pc, #88]	@ (8008880 <TIM_OC2_SetConfig+0xe0>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d003      	beq.n	8008834 <TIM_OC2_SetConfig+0x94>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a15      	ldr	r2, [pc, #84]	@ (8008884 <TIM_OC2_SetConfig+0xe4>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d113      	bne.n	800885c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800883a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008842:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	695b      	ldr	r3, [r3, #20]
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	693a      	ldr	r2, [r7, #16]
 800884c:	4313      	orrs	r3, r2
 800884e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	4313      	orrs	r3, r2
 800885a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	693a      	ldr	r2, [r7, #16]
 8008860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	685a      	ldr	r2, [r3, #4]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	697a      	ldr	r2, [r7, #20]
 8008874:	621a      	str	r2, [r3, #32]
}
 8008876:	bf00      	nop
 8008878:	371c      	adds	r7, #28
 800887a:	46bd      	mov	sp, r7
 800887c:	bc80      	pop	{r7}
 800887e:	4770      	bx	lr
 8008880:	40012c00 	.word	0x40012c00
 8008884:	40013400 	.word	0x40013400

08008888 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008888:	b480      	push	{r7}
 800888a:	b087      	sub	sp, #28
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a1b      	ldr	r3, [r3, #32]
 8008896:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a1b      	ldr	r3, [r3, #32]
 800889c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	69db      	ldr	r3, [r3, #28]
 80088ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f023 0303 	bic.w	r3, r3, #3
 80088be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80088d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	021b      	lsls	r3, r3, #8
 80088d8:	697a      	ldr	r2, [r7, #20]
 80088da:	4313      	orrs	r3, r2
 80088dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a21      	ldr	r2, [pc, #132]	@ (8008968 <TIM_OC3_SetConfig+0xe0>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d003      	beq.n	80088ee <TIM_OC3_SetConfig+0x66>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4a20      	ldr	r2, [pc, #128]	@ (800896c <TIM_OC3_SetConfig+0xe4>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d10d      	bne.n	800890a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80088f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	021b      	lsls	r3, r3, #8
 80088fc:	697a      	ldr	r2, [r7, #20]
 80088fe:	4313      	orrs	r3, r2
 8008900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a16      	ldr	r2, [pc, #88]	@ (8008968 <TIM_OC3_SetConfig+0xe0>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d003      	beq.n	800891a <TIM_OC3_SetConfig+0x92>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a15      	ldr	r2, [pc, #84]	@ (800896c <TIM_OC3_SetConfig+0xe4>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d113      	bne.n	8008942 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	011b      	lsls	r3, r3, #4
 8008930:	693a      	ldr	r2, [r7, #16]
 8008932:	4313      	orrs	r3, r2
 8008934:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	011b      	lsls	r3, r3, #4
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	4313      	orrs	r3, r2
 8008940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	685a      	ldr	r2, [r3, #4]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	697a      	ldr	r2, [r7, #20]
 800895a:	621a      	str	r2, [r3, #32]
}
 800895c:	bf00      	nop
 800895e:	371c      	adds	r7, #28
 8008960:	46bd      	mov	sp, r7
 8008962:	bc80      	pop	{r7}
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	40012c00 	.word	0x40012c00
 800896c:	40013400 	.word	0x40013400

08008970 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008970:	b480      	push	{r7}
 8008972:	b087      	sub	sp, #28
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a1b      	ldr	r3, [r3, #32]
 8008984:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	69db      	ldr	r3, [r3, #28]
 8008996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800899e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	021b      	lsls	r3, r3, #8
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80089ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	031b      	lsls	r3, r3, #12
 80089c2:	693a      	ldr	r2, [r7, #16]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a11      	ldr	r2, [pc, #68]	@ (8008a10 <TIM_OC4_SetConfig+0xa0>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d003      	beq.n	80089d8 <TIM_OC4_SetConfig+0x68>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a10      	ldr	r2, [pc, #64]	@ (8008a14 <TIM_OC4_SetConfig+0xa4>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d109      	bne.n	80089ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	695b      	ldr	r3, [r3, #20]
 80089e4:	019b      	lsls	r3, r3, #6
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	685a      	ldr	r2, [r3, #4]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	693a      	ldr	r2, [r7, #16]
 8008a04:	621a      	str	r2, [r3, #32]
}
 8008a06:	bf00      	nop
 8008a08:	371c      	adds	r7, #28
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bc80      	pop	{r7}
 8008a0e:	4770      	bx	lr
 8008a10:	40012c00 	.word	0x40012c00
 8008a14:	40013400 	.word	0x40013400

08008a18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6a1b      	ldr	r3, [r3, #32]
 8008a28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	f023 0201 	bic.w	r2, r3, #1
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	011b      	lsls	r3, r3, #4
 8008a48:	693a      	ldr	r2, [r7, #16]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	f023 030a 	bic.w	r3, r3, #10
 8008a54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a56:	697a      	ldr	r2, [r7, #20]
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	621a      	str	r2, [r3, #32]
}
 8008a6a:	bf00      	nop
 8008a6c:	371c      	adds	r7, #28
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bc80      	pop	{r7}
 8008a72:	4770      	bx	lr

08008a74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b087      	sub	sp, #28
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6a1b      	ldr	r3, [r3, #32]
 8008a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6a1b      	ldr	r3, [r3, #32]
 8008a8a:	f023 0210 	bic.w	r2, r3, #16
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	031b      	lsls	r3, r3, #12
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	011b      	lsls	r3, r3, #4
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	697a      	ldr	r2, [r7, #20]
 8008ac6:	621a      	str	r2, [r3, #32]
}
 8008ac8:	bf00      	nop
 8008aca:	371c      	adds	r7, #28
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bc80      	pop	{r7}
 8008ad0:	4770      	bx	lr

08008ad2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ad2:	b480      	push	{r7}
 8008ad4:	b085      	sub	sp, #20
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ae8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008aea:	683a      	ldr	r2, [r7, #0]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	f043 0307 	orr.w	r3, r3, #7
 8008af4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	609a      	str	r2, [r3, #8]
}
 8008afc:	bf00      	nop
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bc80      	pop	{r7}
 8008b04:	4770      	bx	lr

08008b06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b06:	b480      	push	{r7}
 8008b08:	b087      	sub	sp, #28
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	60f8      	str	r0, [r7, #12]
 8008b0e:	60b9      	str	r1, [r7, #8]
 8008b10:	607a      	str	r2, [r7, #4]
 8008b12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	021a      	lsls	r2, r3, #8
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	431a      	orrs	r2, r3
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	609a      	str	r2, [r3, #8]
}
 8008b3a:	bf00      	nop
 8008b3c:	371c      	adds	r7, #28
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bc80      	pop	{r7}
 8008b42:	4770      	bx	lr

08008b44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b087      	sub	sp, #28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	f003 031f 	and.w	r3, r3, #31
 8008b56:	2201      	movs	r2, #1
 8008b58:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6a1a      	ldr	r2, [r3, #32]
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	43db      	mvns	r3, r3
 8008b66:	401a      	ands	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6a1a      	ldr	r2, [r3, #32]
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	f003 031f 	and.w	r3, r3, #31
 8008b76:	6879      	ldr	r1, [r7, #4]
 8008b78:	fa01 f303 	lsl.w	r3, r1, r3
 8008b7c:	431a      	orrs	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	621a      	str	r2, [r3, #32]
}
 8008b82:	bf00      	nop
 8008b84:	371c      	adds	r7, #28
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bc80      	pop	{r7}
 8008b8a:	4770      	bx	lr

08008b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d101      	bne.n	8008ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	e050      	b.n	8008c46 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2202      	movs	r2, #2
 8008bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a1b      	ldr	r2, [pc, #108]	@ (8008c50 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d018      	beq.n	8008c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a19      	ldr	r2, [pc, #100]	@ (8008c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d013      	beq.n	8008c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bfa:	d00e      	beq.n	8008c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a15      	ldr	r2, [pc, #84]	@ (8008c58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d009      	beq.n	8008c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a14      	ldr	r2, [pc, #80]	@ (8008c5c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d004      	beq.n	8008c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a12      	ldr	r2, [pc, #72]	@ (8008c60 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d10c      	bne.n	8008c34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	68ba      	ldr	r2, [r7, #8]
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bc80      	pop	{r7}
 8008c4e:	4770      	bx	lr
 8008c50:	40012c00 	.word	0x40012c00
 8008c54:	40013400 	.word	0x40013400
 8008c58:	40000400 	.word	0x40000400
 8008c5c:	40000800 	.word	0x40000800
 8008c60:	40000c00 	.word	0x40000c00

08008c64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d101      	bne.n	8008c80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	e03d      	b.n	8008cfc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	695b      	ldr	r3, [r3, #20]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	69db      	ldr	r3, [r3, #28]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3714      	adds	r7, #20
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bc80      	pop	{r7}
 8008d04:	4770      	bx	lr

08008d06 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d06:	b480      	push	{r7}
 8008d08:	b083      	sub	sp, #12
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d0e:	bf00      	nop
 8008d10:	370c      	adds	r7, #12
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bc80      	pop	{r7}
 8008d16:	4770      	bx	lr

08008d18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d20:	bf00      	nop
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bc80      	pop	{r7}
 8008d28:	4770      	bx	lr

08008d2a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b082      	sub	sp, #8
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d101      	bne.n	8008d3c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e042      	b.n	8008dc2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d106      	bne.n	8008d56 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7fa ff25 	bl	8003ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2224      	movs	r2, #36	@ 0x24
 8008d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68da      	ldr	r2, [r3, #12]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008d6c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fdb8 	bl	80098e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	691a      	ldr	r2, [r3, #16]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d82:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	695a      	ldr	r2, [r3, #20]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d92:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68da      	ldr	r2, [r3, #12]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008da2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2220      	movs	r2, #32
 8008dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2220      	movs	r2, #32
 8008db6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b08a      	sub	sp, #40	@ 0x28
 8008dce:	af02      	add	r7, sp, #8
 8008dd0:	60f8      	str	r0, [r7, #12]
 8008dd2:	60b9      	str	r1, [r7, #8]
 8008dd4:	603b      	str	r3, [r7, #0]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b20      	cmp	r3, #32
 8008de8:	d175      	bne.n	8008ed6 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d002      	beq.n	8008df6 <HAL_UART_Transmit+0x2c>
 8008df0:	88fb      	ldrh	r3, [r7, #6]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d101      	bne.n	8008dfa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e06e      	b.n	8008ed8 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2221      	movs	r2, #33	@ 0x21
 8008e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e08:	f7fb f858 	bl	8003ebc <HAL_GetTick>
 8008e0c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	88fa      	ldrh	r2, [r7, #6]
 8008e12:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	88fa      	ldrh	r2, [r7, #6]
 8008e18:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e22:	d108      	bne.n	8008e36 <HAL_UART_Transmit+0x6c>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d104      	bne.n	8008e36 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	61bb      	str	r3, [r7, #24]
 8008e34:	e003      	b.n	8008e3e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008e3e:	e02e      	b.n	8008e9e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	2200      	movs	r2, #0
 8008e48:	2180      	movs	r1, #128	@ 0x80
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f000 fb1d 	bl	800948a <UART_WaitOnFlagUntilTimeout>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d005      	beq.n	8008e62 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2220      	movs	r2, #32
 8008e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	e03a      	b.n	8008ed8 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d10b      	bne.n	8008e80 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	881b      	ldrh	r3, [r3, #0]
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e76:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	3302      	adds	r3, #2
 8008e7c:	61bb      	str	r3, [r7, #24]
 8008e7e:	e007      	b.n	8008e90 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	781a      	ldrb	r2, [r3, #0]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	3b01      	subs	r3, #1
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1cb      	bne.n	8008e40 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	2140      	movs	r1, #64	@ 0x40
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f000 fae9 	bl	800948a <UART_WaitOnFlagUntilTimeout>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d005      	beq.n	8008eca <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2220      	movs	r2, #32
 8008ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e006      	b.n	8008ed8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2220      	movs	r2, #32
 8008ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	e000      	b.n	8008ed8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008ed6:	2302      	movs	r3, #2
  }
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3720      	adds	r7, #32
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	4613      	mov	r3, r2
 8008eec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b20      	cmp	r3, #32
 8008ef8:	d112      	bne.n	8008f20 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d002      	beq.n	8008f06 <HAL_UART_Receive_IT+0x26>
 8008f00:	88fb      	ldrh	r3, [r7, #6]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d101      	bne.n	8008f0a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e00b      	b.n	8008f22 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008f10:	88fb      	ldrh	r3, [r7, #6]
 8008f12:	461a      	mov	r2, r3
 8008f14:	68b9      	ldr	r1, [r7, #8]
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f000 fb10 	bl	800953c <UART_Start_Receive_IT>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	e000      	b.n	8008f22 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008f20:	2302      	movs	r3, #2
  }
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
	...

08008f2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b0ba      	sub	sp, #232	@ 0xe8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	695b      	ldr	r3, [r3, #20]
 8008f4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008f52:	2300      	movs	r3, #0
 8008f54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f62:	f003 030f 	and.w	r3, r3, #15
 8008f66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008f6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10f      	bne.n	8008f92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f76:	f003 0320 	and.w	r3, r3, #32
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d009      	beq.n	8008f92 <HAL_UART_IRQHandler+0x66>
 8008f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f82:	f003 0320 	and.w	r3, r3, #32
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d003      	beq.n	8008f92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fbec 	bl	8009768 <UART_Receive_IT>
      return;
 8008f90:	e25b      	b.n	800944a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008f92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f000 80de 	beq.w	8009158 <HAL_UART_IRQHandler+0x22c>
 8008f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fa0:	f003 0301 	and.w	r3, r3, #1
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d106      	bne.n	8008fb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f000 80d1 	beq.w	8009158 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00b      	beq.n	8008fda <HAL_UART_IRQHandler+0xae>
 8008fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d005      	beq.n	8008fda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fd2:	f043 0201 	orr.w	r2, r3, #1
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fde:	f003 0304 	and.w	r3, r3, #4
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00b      	beq.n	8008ffe <HAL_UART_IRQHandler+0xd2>
 8008fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d005      	beq.n	8008ffe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ff6:	f043 0202 	orr.w	r2, r3, #2
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009002:	f003 0302 	and.w	r3, r3, #2
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00b      	beq.n	8009022 <HAL_UART_IRQHandler+0xf6>
 800900a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800900e:	f003 0301 	and.w	r3, r3, #1
 8009012:	2b00      	cmp	r3, #0
 8009014:	d005      	beq.n	8009022 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800901a:	f043 0204 	orr.w	r2, r3, #4
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009026:	f003 0308 	and.w	r3, r3, #8
 800902a:	2b00      	cmp	r3, #0
 800902c:	d011      	beq.n	8009052 <HAL_UART_IRQHandler+0x126>
 800902e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009032:	f003 0320 	and.w	r3, r3, #32
 8009036:	2b00      	cmp	r3, #0
 8009038:	d105      	bne.n	8009046 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800903a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800903e:	f003 0301 	and.w	r3, r3, #1
 8009042:	2b00      	cmp	r3, #0
 8009044:	d005      	beq.n	8009052 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800904a:	f043 0208 	orr.w	r2, r3, #8
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009056:	2b00      	cmp	r3, #0
 8009058:	f000 81f2 	beq.w	8009440 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800905c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009060:	f003 0320 	and.w	r3, r3, #32
 8009064:	2b00      	cmp	r3, #0
 8009066:	d008      	beq.n	800907a <HAL_UART_IRQHandler+0x14e>
 8009068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800906c:	f003 0320 	and.w	r3, r3, #32
 8009070:	2b00      	cmp	r3, #0
 8009072:	d002      	beq.n	800907a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 fb77 	bl	8009768 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	695b      	ldr	r3, [r3, #20]
 8009080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009084:	2b00      	cmp	r3, #0
 8009086:	bf14      	ite	ne
 8009088:	2301      	movne	r3, #1
 800908a:	2300      	moveq	r3, #0
 800908c:	b2db      	uxtb	r3, r3
 800908e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009096:	f003 0308 	and.w	r3, r3, #8
 800909a:	2b00      	cmp	r3, #0
 800909c:	d103      	bne.n	80090a6 <HAL_UART_IRQHandler+0x17a>
 800909e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d04f      	beq.n	8009146 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 fa81 	bl	80095ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d041      	beq.n	800913e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	3314      	adds	r3, #20
 80090c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80090c8:	e853 3f00 	ldrex	r3, [r3]
 80090cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80090d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80090d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	3314      	adds	r3, #20
 80090e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80090e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80090ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80090f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80090f6:	e841 2300 	strex	r3, r2, [r1]
 80090fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80090fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1d9      	bne.n	80090ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800910a:	2b00      	cmp	r3, #0
 800910c:	d013      	beq.n	8009136 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009112:	4a7e      	ldr	r2, [pc, #504]	@ (800930c <HAL_UART_IRQHandler+0x3e0>)
 8009114:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800911a:	4618      	mov	r0, r3
 800911c:	f7fb fcfa 	bl	8004b14 <HAL_DMA_Abort_IT>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d016      	beq.n	8009154 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800912a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009130:	4610      	mov	r0, r2
 8009132:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009134:	e00e      	b.n	8009154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f993 	bl	8009462 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800913c:	e00a      	b.n	8009154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f98f 	bl	8009462 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009144:	e006      	b.n	8009154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 f98b 	bl	8009462 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009152:	e175      	b.n	8009440 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009154:	bf00      	nop
    return;
 8009156:	e173      	b.n	8009440 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800915c:	2b01      	cmp	r3, #1
 800915e:	f040 814f 	bne.w	8009400 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009166:	f003 0310 	and.w	r3, r3, #16
 800916a:	2b00      	cmp	r3, #0
 800916c:	f000 8148 	beq.w	8009400 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009174:	f003 0310 	and.w	r3, r3, #16
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 8141 	beq.w	8009400 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800917e:	2300      	movs	r3, #0
 8009180:	60bb      	str	r3, [r7, #8]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	60bb      	str	r3, [r7, #8]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	60bb      	str	r3, [r7, #8]
 8009192:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800919e:	2b00      	cmp	r3, #0
 80091a0:	f000 80b6 	beq.w	8009310 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80091b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f000 8145 	beq.w	8009444 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80091be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80091c2:	429a      	cmp	r2, r3
 80091c4:	f080 813e 	bcs.w	8009444 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80091ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	2b20      	cmp	r3, #32
 80091d8:	f000 8088 	beq.w	80092ec <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	330c      	adds	r3, #12
 80091e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80091ea:	e853 3f00 	ldrex	r3, [r3]
 80091ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80091f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80091f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	330c      	adds	r3, #12
 8009204:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009208:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800920c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009210:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009214:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009218:	e841 2300 	strex	r3, r2, [r1]
 800921c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009220:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1d9      	bne.n	80091dc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	3314      	adds	r3, #20
 800922e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009230:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009232:	e853 3f00 	ldrex	r3, [r3]
 8009236:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009238:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800923a:	f023 0301 	bic.w	r3, r3, #1
 800923e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	3314      	adds	r3, #20
 8009248:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800924c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009250:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009252:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009254:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009258:	e841 2300 	strex	r3, r2, [r1]
 800925c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800925e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1e1      	bne.n	8009228 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3314      	adds	r3, #20
 800926a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800926e:	e853 3f00 	ldrex	r3, [r3]
 8009272:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009274:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009276:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800927a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	3314      	adds	r3, #20
 8009284:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009288:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800928a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800928e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009290:	e841 2300 	strex	r3, r2, [r1]
 8009294:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009296:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1e3      	bne.n	8009264 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2220      	movs	r2, #32
 80092a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	330c      	adds	r3, #12
 80092b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092b4:	e853 3f00 	ldrex	r3, [r3]
 80092b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80092ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092bc:	f023 0310 	bic.w	r3, r3, #16
 80092c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	330c      	adds	r3, #12
 80092ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80092ce:	65ba      	str	r2, [r7, #88]	@ 0x58
 80092d0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80092d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80092d6:	e841 2300 	strex	r3, r2, [r1]
 80092da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80092dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1e3      	bne.n	80092aa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fb fbd8 	bl	8004a9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2202      	movs	r2, #2
 80092f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	b29b      	uxth	r3, r3
 8009300:	4619      	mov	r1, r3
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f8b6 	bl	8009474 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009308:	e09c      	b.n	8009444 <HAL_UART_IRQHandler+0x518>
 800930a:	bf00      	nop
 800930c:	08009673 	.word	0x08009673
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009318:	b29b      	uxth	r3, r3
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009324:	b29b      	uxth	r3, r3
 8009326:	2b00      	cmp	r3, #0
 8009328:	f000 808e 	beq.w	8009448 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800932c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 8089 	beq.w	8009448 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	330c      	adds	r3, #12
 800933c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009340:	e853 3f00 	ldrex	r3, [r3]
 8009344:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009348:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800934c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	330c      	adds	r3, #12
 8009356:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800935a:	647a      	str	r2, [r7, #68]	@ 0x44
 800935c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009360:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009362:	e841 2300 	strex	r3, r2, [r1]
 8009366:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1e3      	bne.n	8009336 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	3314      	adds	r3, #20
 8009374:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009378:	e853 3f00 	ldrex	r3, [r3]
 800937c:	623b      	str	r3, [r7, #32]
   return(result);
 800937e:	6a3b      	ldr	r3, [r7, #32]
 8009380:	f023 0301 	bic.w	r3, r3, #1
 8009384:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3314      	adds	r3, #20
 800938e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009392:	633a      	str	r2, [r7, #48]	@ 0x30
 8009394:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009396:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009398:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800939a:	e841 2300 	strex	r3, r2, [r1]
 800939e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1e3      	bne.n	800936e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2220      	movs	r2, #32
 80093aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	330c      	adds	r3, #12
 80093ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	e853 3f00 	ldrex	r3, [r3]
 80093c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f023 0310 	bic.w	r3, r3, #16
 80093ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	330c      	adds	r3, #12
 80093d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80093d8:	61fa      	str	r2, [r7, #28]
 80093da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093dc:	69b9      	ldr	r1, [r7, #24]
 80093de:	69fa      	ldr	r2, [r7, #28]
 80093e0:	e841 2300 	strex	r3, r2, [r1]
 80093e4:	617b      	str	r3, [r7, #20]
   return(result);
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1e3      	bne.n	80093b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2202      	movs	r2, #2
 80093f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80093f6:	4619      	mov	r1, r3
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f83b 	bl	8009474 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80093fe:	e023      	b.n	8009448 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009404:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009408:	2b00      	cmp	r3, #0
 800940a:	d009      	beq.n	8009420 <HAL_UART_IRQHandler+0x4f4>
 800940c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009414:	2b00      	cmp	r3, #0
 8009416:	d003      	beq.n	8009420 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f93e 	bl	800969a <UART_Transmit_IT>
    return;
 800941e:	e014      	b.n	800944a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00e      	beq.n	800944a <HAL_UART_IRQHandler+0x51e>
 800942c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009434:	2b00      	cmp	r3, #0
 8009436:	d008      	beq.n	800944a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 f97d 	bl	8009738 <UART_EndTransmit_IT>
    return;
 800943e:	e004      	b.n	800944a <HAL_UART_IRQHandler+0x51e>
    return;
 8009440:	bf00      	nop
 8009442:	e002      	b.n	800944a <HAL_UART_IRQHandler+0x51e>
      return;
 8009444:	bf00      	nop
 8009446:	e000      	b.n	800944a <HAL_UART_IRQHandler+0x51e>
      return;
 8009448:	bf00      	nop
  }
}
 800944a:	37e8      	adds	r7, #232	@ 0xe8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	bc80      	pop	{r7}
 8009460:	4770      	bx	lr

08009462 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009462:	b480      	push	{r7}
 8009464:	b083      	sub	sp, #12
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800946a:	bf00      	nop
 800946c:	370c      	adds	r7, #12
 800946e:	46bd      	mov	sp, r7
 8009470:	bc80      	pop	{r7}
 8009472:	4770      	bx	lr

08009474 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	460b      	mov	r3, r1
 800947e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009480:	bf00      	nop
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	bc80      	pop	{r7}
 8009488:	4770      	bx	lr

0800948a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b086      	sub	sp, #24
 800948e:	af00      	add	r7, sp, #0
 8009490:	60f8      	str	r0, [r7, #12]
 8009492:	60b9      	str	r1, [r7, #8]
 8009494:	603b      	str	r3, [r7, #0]
 8009496:	4613      	mov	r3, r2
 8009498:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800949a:	e03b      	b.n	8009514 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800949c:	6a3b      	ldr	r3, [r7, #32]
 800949e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80094a2:	d037      	beq.n	8009514 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094a4:	f7fa fd0a 	bl	8003ebc <HAL_GetTick>
 80094a8:	4602      	mov	r2, r0
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	1ad3      	subs	r3, r2, r3
 80094ae:	6a3a      	ldr	r2, [r7, #32]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d302      	bcc.n	80094ba <UART_WaitOnFlagUntilTimeout+0x30>
 80094b4:	6a3b      	ldr	r3, [r7, #32]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d101      	bne.n	80094be <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80094ba:	2303      	movs	r3, #3
 80094bc:	e03a      	b.n	8009534 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	f003 0304 	and.w	r3, r3, #4
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d023      	beq.n	8009514 <UART_WaitOnFlagUntilTimeout+0x8a>
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	2b80      	cmp	r3, #128	@ 0x80
 80094d0:	d020      	beq.n	8009514 <UART_WaitOnFlagUntilTimeout+0x8a>
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	2b40      	cmp	r3, #64	@ 0x40
 80094d6:	d01d      	beq.n	8009514 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 0308 	and.w	r3, r3, #8
 80094e2:	2b08      	cmp	r3, #8
 80094e4:	d116      	bne.n	8009514 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80094e6:	2300      	movs	r3, #0
 80094e8:	617b      	str	r3, [r7, #20]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	617b      	str	r3, [r7, #20]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	617b      	str	r3, [r7, #20]
 80094fa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f000 f856 	bl	80095ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2208      	movs	r2, #8
 8009506:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2200      	movs	r2, #0
 800950c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	e00f      	b.n	8009534 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	4013      	ands	r3, r2
 800951e:	68ba      	ldr	r2, [r7, #8]
 8009520:	429a      	cmp	r2, r3
 8009522:	bf0c      	ite	eq
 8009524:	2301      	moveq	r3, #1
 8009526:	2300      	movne	r3, #0
 8009528:	b2db      	uxtb	r3, r3
 800952a:	461a      	mov	r2, r3
 800952c:	79fb      	ldrb	r3, [r7, #7]
 800952e:	429a      	cmp	r2, r3
 8009530:	d0b4      	beq.n	800949c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3718      	adds	r7, #24
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	4613      	mov	r3, r2
 8009548:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	88fa      	ldrh	r2, [r7, #6]
 8009554:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	88fa      	ldrh	r2, [r7, #6]
 800955a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2200      	movs	r2, #0
 8009560:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2222      	movs	r2, #34	@ 0x22
 8009566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d007      	beq.n	8009582 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68da      	ldr	r2, [r3, #12]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009580:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	695a      	ldr	r2, [r3, #20]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f042 0201 	orr.w	r2, r2, #1
 8009590:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68da      	ldr	r2, [r3, #12]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f042 0220 	orr.w	r2, r2, #32
 80095a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80095a2:	2300      	movs	r3, #0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3714      	adds	r7, #20
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bc80      	pop	{r7}
 80095ac:	4770      	bx	lr

080095ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b095      	sub	sp, #84	@ 0x54
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	330c      	adds	r3, #12
 80095bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095c0:	e853 3f00 	ldrex	r3, [r3]
 80095c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80095c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	330c      	adds	r3, #12
 80095d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80095d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80095d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80095dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80095de:	e841 2300 	strex	r3, r2, [r1]
 80095e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80095e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1e5      	bne.n	80095b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	3314      	adds	r3, #20
 80095f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f2:	6a3b      	ldr	r3, [r7, #32]
 80095f4:	e853 3f00 	ldrex	r3, [r3]
 80095f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	f023 0301 	bic.w	r3, r3, #1
 8009600:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3314      	adds	r3, #20
 8009608:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800960a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800960c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009610:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009612:	e841 2300 	strex	r3, r2, [r1]
 8009616:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1e5      	bne.n	80095ea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009622:	2b01      	cmp	r3, #1
 8009624:	d119      	bne.n	800965a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	330c      	adds	r3, #12
 800962c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	e853 3f00 	ldrex	r3, [r3]
 8009634:	60bb      	str	r3, [r7, #8]
   return(result);
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	f023 0310 	bic.w	r3, r3, #16
 800963c:	647b      	str	r3, [r7, #68]	@ 0x44
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	330c      	adds	r3, #12
 8009644:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009646:	61ba      	str	r2, [r7, #24]
 8009648:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964a:	6979      	ldr	r1, [r7, #20]
 800964c:	69ba      	ldr	r2, [r7, #24]
 800964e:	e841 2300 	strex	r3, r2, [r1]
 8009652:	613b      	str	r3, [r7, #16]
   return(result);
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1e5      	bne.n	8009626 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2220      	movs	r2, #32
 800965e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009668:	bf00      	nop
 800966a:	3754      	adds	r7, #84	@ 0x54
 800966c:	46bd      	mov	sp, r7
 800966e:	bc80      	pop	{r7}
 8009670:	4770      	bx	lr

08009672 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b084      	sub	sp, #16
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800967e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2200      	movs	r2, #0
 8009684:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f7ff fee8 	bl	8009462 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009692:	bf00      	nop
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800969a:	b480      	push	{r7}
 800969c:	b085      	sub	sp, #20
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	2b21      	cmp	r3, #33	@ 0x21
 80096ac:	d13e      	bne.n	800972c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096b6:	d114      	bne.n	80096e2 <UART_Transmit_IT+0x48>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d110      	bne.n	80096e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6a1b      	ldr	r3, [r3, #32]
 80096c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	881b      	ldrh	r3, [r3, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a1b      	ldr	r3, [r3, #32]
 80096da:	1c9a      	adds	r2, r3, #2
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	621a      	str	r2, [r3, #32]
 80096e0:	e008      	b.n	80096f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	1c59      	adds	r1, r3, #1
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	6211      	str	r1, [r2, #32]
 80096ec:	781a      	ldrb	r2, [r3, #0]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	3b01      	subs	r3, #1
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	4619      	mov	r1, r3
 8009702:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009704:	2b00      	cmp	r3, #0
 8009706:	d10f      	bne.n	8009728 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	68da      	ldr	r2, [r3, #12]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009716:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68da      	ldr	r2, [r3, #12]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009726:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009728:	2300      	movs	r3, #0
 800972a:	e000      	b.n	800972e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800972c:	2302      	movs	r3, #2
  }
}
 800972e:	4618      	mov	r0, r3
 8009730:	3714      	adds	r7, #20
 8009732:	46bd      	mov	sp, r7
 8009734:	bc80      	pop	{r7}
 8009736:	4770      	bx	lr

08009738 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	68da      	ldr	r2, [r3, #12]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800974e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2220      	movs	r2, #32
 8009754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f7ff fe79 	bl	8009450 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b08c      	sub	sp, #48	@ 0x30
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009776:	b2db      	uxtb	r3, r3
 8009778:	2b22      	cmp	r3, #34	@ 0x22
 800977a:	f040 80ae 	bne.w	80098da <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009786:	d117      	bne.n	80097b8 <UART_Receive_IT+0x50>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	691b      	ldr	r3, [r3, #16]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d113      	bne.n	80097b8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009790:	2300      	movs	r3, #0
 8009792:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009798:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097a6:	b29a      	uxth	r2, r3
 80097a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b0:	1c9a      	adds	r2, r3, #2
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80097b6:	e026      	b.n	8009806 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80097be:	2300      	movs	r3, #0
 80097c0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097ca:	d007      	beq.n	80097dc <UART_Receive_IT+0x74>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10a      	bne.n	80097ea <UART_Receive_IT+0x82>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d106      	bne.n	80097ea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	b2da      	uxtb	r2, r3
 80097e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e6:	701a      	strb	r2, [r3, #0]
 80097e8:	e008      	b.n	80097fc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097f6:	b2da      	uxtb	r2, r3
 80097f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097fa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009800:	1c5a      	adds	r2, r3, #1
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800980a:	b29b      	uxth	r3, r3
 800980c:	3b01      	subs	r3, #1
 800980e:	b29b      	uxth	r3, r3
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	4619      	mov	r1, r3
 8009814:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009816:	2b00      	cmp	r3, #0
 8009818:	d15d      	bne.n	80098d6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	68da      	ldr	r2, [r3, #12]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f022 0220 	bic.w	r2, r2, #32
 8009828:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68da      	ldr	r2, [r3, #12]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009838:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	695a      	ldr	r2, [r3, #20]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f022 0201 	bic.w	r2, r2, #1
 8009848:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2220      	movs	r2, #32
 800984e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800985c:	2b01      	cmp	r3, #1
 800985e:	d135      	bne.n	80098cc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	330c      	adds	r3, #12
 800986c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	e853 3f00 	ldrex	r3, [r3]
 8009874:	613b      	str	r3, [r7, #16]
   return(result);
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	f023 0310 	bic.w	r3, r3, #16
 800987c:	627b      	str	r3, [r7, #36]	@ 0x24
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	330c      	adds	r3, #12
 8009884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009886:	623a      	str	r2, [r7, #32]
 8009888:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988a:	69f9      	ldr	r1, [r7, #28]
 800988c:	6a3a      	ldr	r2, [r7, #32]
 800988e:	e841 2300 	strex	r3, r2, [r1]
 8009892:	61bb      	str	r3, [r7, #24]
   return(result);
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d1e5      	bne.n	8009866 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f003 0310 	and.w	r3, r3, #16
 80098a4:	2b10      	cmp	r3, #16
 80098a6:	d10a      	bne.n	80098be <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80098a8:	2300      	movs	r3, #0
 80098aa:	60fb      	str	r3, [r7, #12]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	60fb      	str	r3, [r7, #12]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	60fb      	str	r3, [r7, #12]
 80098bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80098c2:	4619      	mov	r1, r3
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f7ff fdd5 	bl	8009474 <HAL_UARTEx_RxEventCallback>
 80098ca:	e002      	b.n	80098d2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f7fa f8e1 	bl	8003a94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	e002      	b.n	80098dc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	e000      	b.n	80098dc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80098da:	2302      	movs	r3, #2
  }
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3730      	adds	r7, #48	@ 0x30
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	68da      	ldr	r2, [r3, #12]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	430a      	orrs	r2, r1
 8009900:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	689a      	ldr	r2, [r3, #8]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	431a      	orrs	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	695b      	ldr	r3, [r3, #20]
 8009910:	4313      	orrs	r3, r2
 8009912:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800991e:	f023 030c 	bic.w	r3, r3, #12
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	6812      	ldr	r2, [r2, #0]
 8009926:	68b9      	ldr	r1, [r7, #8]
 8009928:	430b      	orrs	r3, r1
 800992a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	695b      	ldr	r3, [r3, #20]
 8009932:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	699a      	ldr	r2, [r3, #24]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	430a      	orrs	r2, r1
 8009940:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a2c      	ldr	r2, [pc, #176]	@ (80099f8 <UART_SetConfig+0x114>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d103      	bne.n	8009954 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800994c:	f7fd f932 	bl	8006bb4 <HAL_RCC_GetPCLK2Freq>
 8009950:	60f8      	str	r0, [r7, #12]
 8009952:	e002      	b.n	800995a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009954:	f7fd f91a 	bl	8006b8c <HAL_RCC_GetPCLK1Freq>
 8009958:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	4613      	mov	r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	4413      	add	r3, r2
 8009962:	009a      	lsls	r2, r3, #2
 8009964:	441a      	add	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009970:	4a22      	ldr	r2, [pc, #136]	@ (80099fc <UART_SetConfig+0x118>)
 8009972:	fba2 2303 	umull	r2, r3, r2, r3
 8009976:	095b      	lsrs	r3, r3, #5
 8009978:	0119      	lsls	r1, r3, #4
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	4613      	mov	r3, r2
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	4413      	add	r3, r2
 8009982:	009a      	lsls	r2, r3, #2
 8009984:	441a      	add	r2, r3
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009990:	4b1a      	ldr	r3, [pc, #104]	@ (80099fc <UART_SetConfig+0x118>)
 8009992:	fba3 0302 	umull	r0, r3, r3, r2
 8009996:	095b      	lsrs	r3, r3, #5
 8009998:	2064      	movs	r0, #100	@ 0x64
 800999a:	fb00 f303 	mul.w	r3, r0, r3
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	011b      	lsls	r3, r3, #4
 80099a2:	3332      	adds	r3, #50	@ 0x32
 80099a4:	4a15      	ldr	r2, [pc, #84]	@ (80099fc <UART_SetConfig+0x118>)
 80099a6:	fba2 2303 	umull	r2, r3, r2, r3
 80099aa:	095b      	lsrs	r3, r3, #5
 80099ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80099b0:	4419      	add	r1, r3
 80099b2:	68fa      	ldr	r2, [r7, #12]
 80099b4:	4613      	mov	r3, r2
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	4413      	add	r3, r2
 80099ba:	009a      	lsls	r2, r3, #2
 80099bc:	441a      	add	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80099c8:	4b0c      	ldr	r3, [pc, #48]	@ (80099fc <UART_SetConfig+0x118>)
 80099ca:	fba3 0302 	umull	r0, r3, r3, r2
 80099ce:	095b      	lsrs	r3, r3, #5
 80099d0:	2064      	movs	r0, #100	@ 0x64
 80099d2:	fb00 f303 	mul.w	r3, r0, r3
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	011b      	lsls	r3, r3, #4
 80099da:	3332      	adds	r3, #50	@ 0x32
 80099dc:	4a07      	ldr	r2, [pc, #28]	@ (80099fc <UART_SetConfig+0x118>)
 80099de:	fba2 2303 	umull	r2, r3, r2, r3
 80099e2:	095b      	lsrs	r3, r3, #5
 80099e4:	f003 020f 	and.w	r2, r3, #15
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	440a      	add	r2, r1
 80099ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80099f0:	bf00      	nop
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	40013800 	.word	0x40013800
 80099fc:	51eb851f 	.word	0x51eb851f

08009a00 <memset>:
 8009a00:	4603      	mov	r3, r0
 8009a02:	4402      	add	r2, r0
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d100      	bne.n	8009a0a <memset+0xa>
 8009a08:	4770      	bx	lr
 8009a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a0e:	e7f9      	b.n	8009a04 <memset+0x4>

08009a10 <__libc_init_array>:
 8009a10:	b570      	push	{r4, r5, r6, lr}
 8009a12:	2600      	movs	r6, #0
 8009a14:	4d0c      	ldr	r5, [pc, #48]	@ (8009a48 <__libc_init_array+0x38>)
 8009a16:	4c0d      	ldr	r4, [pc, #52]	@ (8009a4c <__libc_init_array+0x3c>)
 8009a18:	1b64      	subs	r4, r4, r5
 8009a1a:	10a4      	asrs	r4, r4, #2
 8009a1c:	42a6      	cmp	r6, r4
 8009a1e:	d109      	bne.n	8009a34 <__libc_init_array+0x24>
 8009a20:	f000 f81a 	bl	8009a58 <_init>
 8009a24:	2600      	movs	r6, #0
 8009a26:	4d0a      	ldr	r5, [pc, #40]	@ (8009a50 <__libc_init_array+0x40>)
 8009a28:	4c0a      	ldr	r4, [pc, #40]	@ (8009a54 <__libc_init_array+0x44>)
 8009a2a:	1b64      	subs	r4, r4, r5
 8009a2c:	10a4      	asrs	r4, r4, #2
 8009a2e:	42a6      	cmp	r6, r4
 8009a30:	d105      	bne.n	8009a3e <__libc_init_array+0x2e>
 8009a32:	bd70      	pop	{r4, r5, r6, pc}
 8009a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a38:	4798      	blx	r3
 8009a3a:	3601      	adds	r6, #1
 8009a3c:	e7ee      	b.n	8009a1c <__libc_init_array+0xc>
 8009a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a42:	4798      	blx	r3
 8009a44:	3601      	adds	r6, #1
 8009a46:	e7f2      	b.n	8009a2e <__libc_init_array+0x1e>
 8009a48:	08009c78 	.word	0x08009c78
 8009a4c:	08009c78 	.word	0x08009c78
 8009a50:	08009c78 	.word	0x08009c78
 8009a54:	08009c7c 	.word	0x08009c7c

08009a58 <_init>:
 8009a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5a:	bf00      	nop
 8009a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a5e:	bc08      	pop	{r3}
 8009a60:	469e      	mov	lr, r3
 8009a62:	4770      	bx	lr

08009a64 <_fini>:
 8009a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a66:	bf00      	nop
 8009a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a6a:	bc08      	pop	{r3}
 8009a6c:	469e      	mov	lr, r3
 8009a6e:	4770      	bx	lr
